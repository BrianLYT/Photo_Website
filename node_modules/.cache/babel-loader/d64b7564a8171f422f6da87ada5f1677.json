{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\n/** @typedef {import(\"../../declarations/WebpackOptions\").AssetParserOptions} AssetParserOptions */\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\n\nclass AssetParser extends Parser {\n  /**\n   * @param {AssetParserOptions[\"dataUrlCondition\"] | boolean} dataUrlCondition condition for inlining as DataUrl\n   */\n  constructor(dataUrlCondition) {\n    super();\n    this.dataUrlCondition = dataUrlCondition;\n  }\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n\n\n  parse(source, state) {\n    if (typeof source === \"object\" && !Buffer.isBuffer(source)) {\n      throw new Error(\"AssetParser doesn't accept preparsed AST\");\n    }\n\n    state.module.buildInfo.strict = true;\n    state.module.buildMeta.exportsType = \"default\";\n\n    if (typeof this.dataUrlCondition === \"function\") {\n      state.module.buildInfo.dataUrl = this.dataUrlCondition(source, {\n        filename: state.module.matchResource || state.module.resource,\n        module: state.module\n      });\n    } else if (typeof this.dataUrlCondition === \"boolean\") {\n      state.module.buildInfo.dataUrl = this.dataUrlCondition;\n    } else if (this.dataUrlCondition && typeof this.dataUrlCondition === \"object\") {\n      state.module.buildInfo.dataUrl = Buffer.byteLength(source) <= this.dataUrlCondition.maxSize;\n    } else {\n      throw new Error(\"Unexpected dataUrlCondition type\");\n    }\n\n    return state;\n  }\n\n}\n\nmodule.exports = AssetParser;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/asset/AssetParser.js"],"names":["Parser","require","AssetParser","constructor","dataUrlCondition","parse","source","state","Buffer","isBuffer","Error","module","buildInfo","strict","buildMeta","exportsType","dataUrl","filename","matchResource","resource","byteLength","maxSize","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;AAEA;;AACA;;AACA;;;AAEA,MAAMC,WAAN,SAA0BF,MAA1B,CAAiC;AAChC;AACD;AACA;AACCG,EAAAA,WAAW,CAACC,gBAAD,EAAmB;AAC7B;AACA,SAAKA,gBAAL,GAAwBA,gBAAxB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgB;AACpB,QAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8B,CAACE,MAAM,CAACC,QAAP,CAAgBH,MAAhB,CAAnC,EAA4D;AAC3D,YAAM,IAAII,KAAJ,CAAU,0CAAV,CAAN;AACA;;AACDH,IAAAA,KAAK,CAACI,MAAN,CAAaC,SAAb,CAAuBC,MAAvB,GAAgC,IAAhC;AACAN,IAAAA,KAAK,CAACI,MAAN,CAAaG,SAAb,CAAuBC,WAAvB,GAAqC,SAArC;;AAEA,QAAI,OAAO,KAAKX,gBAAZ,KAAiC,UAArC,EAAiD;AAChDG,MAAAA,KAAK,CAACI,MAAN,CAAaC,SAAb,CAAuBI,OAAvB,GAAiC,KAAKZ,gBAAL,CAAsBE,MAAtB,EAA8B;AAC9DW,QAAAA,QAAQ,EAAEV,KAAK,CAACI,MAAN,CAAaO,aAAb,IAA8BX,KAAK,CAACI,MAAN,CAAaQ,QADS;AAE9DR,QAAAA,MAAM,EAAEJ,KAAK,CAACI;AAFgD,OAA9B,CAAjC;AAIA,KALD,MAKO,IAAI,OAAO,KAAKP,gBAAZ,KAAiC,SAArC,EAAgD;AACtDG,MAAAA,KAAK,CAACI,MAAN,CAAaC,SAAb,CAAuBI,OAAvB,GAAiC,KAAKZ,gBAAtC;AACA,KAFM,MAEA,IACN,KAAKA,gBAAL,IACA,OAAO,KAAKA,gBAAZ,KAAiC,QAF3B,EAGL;AACDG,MAAAA,KAAK,CAACI,MAAN,CAAaC,SAAb,CAAuBI,OAAvB,GACCR,MAAM,CAACY,UAAP,CAAkBd,MAAlB,KAA6B,KAAKF,gBAAL,CAAsBiB,OADpD;AAEA,KANM,MAMA;AACN,YAAM,IAAIX,KAAJ,CAAU,kCAAV,CAAN;AACA;;AAED,WAAOH,KAAP;AACA;;AAvC+B;;AA0CjCI,MAAM,CAACW,OAAP,GAAiBpB,WAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").AssetParserOptions} AssetParserOptions */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nclass AssetParser extends Parser {\n\t/**\n\t * @param {AssetParserOptions[\"dataUrlCondition\"] | boolean} dataUrlCondition condition for inlining as DataUrl\n\t */\n\tconstructor(dataUrlCondition) {\n\t\tsuper();\n\t\tthis.dataUrlCondition = dataUrlCondition;\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tif (typeof source === \"object\" && !Buffer.isBuffer(source)) {\n\t\t\tthrow new Error(\"AssetParser doesn't accept preparsed AST\");\n\t\t}\n\t\tstate.module.buildInfo.strict = true;\n\t\tstate.module.buildMeta.exportsType = \"default\";\n\n\t\tif (typeof this.dataUrlCondition === \"function\") {\n\t\t\tstate.module.buildInfo.dataUrl = this.dataUrlCondition(source, {\n\t\t\t\tfilename: state.module.matchResource || state.module.resource,\n\t\t\t\tmodule: state.module\n\t\t\t});\n\t\t} else if (typeof this.dataUrlCondition === \"boolean\") {\n\t\t\tstate.module.buildInfo.dataUrl = this.dataUrlCondition;\n\t\t} else if (\n\t\t\tthis.dataUrlCondition &&\n\t\t\ttypeof this.dataUrlCondition === \"object\"\n\t\t) {\n\t\t\tstate.module.buildInfo.dataUrl =\n\t\t\t\tBuffer.byteLength(source) <= this.dataUrlCondition.maxSize;\n\t\t} else {\n\t\t\tthrow new Error(\"Unexpected dataUrlCondition type\");\n\t\t}\n\n\t\treturn state;\n\t}\n}\n\nmodule.exports = AssetParser;\n"]},"metadata":{},"sourceType":"script"}