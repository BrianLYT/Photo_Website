{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction findParent(_ref, cb) {\n  var parentPath = _ref.parentPath;\n\n  if (parentPath == null) {\n    throw new Error(\"node is root\");\n  }\n\n  var currentPath = parentPath;\n\n  while (cb(currentPath) !== false) {\n    // Hit the root node, stop\n    // $FlowIgnore\n    if (currentPath.parentPath == null) {\n      return null;\n    } // $FlowIgnore\n\n\n    currentPath = currentPath.parentPath;\n  }\n\n  return currentPath.node;\n}\n\nfunction insertBefore(context, newNode) {\n  return insert(context, newNode);\n}\n\nfunction insertAfter(context, newNode) {\n  return insert(context, newNode, 1);\n}\n\nfunction insert(_ref2, newNode) {\n  var node = _ref2.node,\n      inList = _ref2.inList,\n      parentPath = _ref2.parentPath,\n      parentKey = _ref2.parentKey;\n  var indexOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!inList) {\n    throw new Error('inList' + \" error: \" + (\"insert can only be used for nodes that are within lists\" || \"unknown\"));\n  }\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  } // $FlowIgnore\n\n\n  var parentList = parentPath.node[parentKey];\n  var indexInList = parentList.findIndex(function (n) {\n    return n === node;\n  });\n  parentList.splice(indexInList + indexOffset, 0, newNode);\n}\n\nfunction remove(_ref3) {\n  var node = _ref3.node,\n      parentKey = _ref3.parentKey,\n      parentPath = _ref3.parentPath;\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  } // $FlowIgnore\n\n\n  var parentNode = parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    // $FlowIgnore\n    parentNode[parentKey] = parentProperty.filter(function (n) {\n      return n !== node;\n    });\n  } else {\n    // $FlowIgnore\n    delete parentNode[parentKey];\n  }\n\n  node._deleted = true;\n}\n\nfunction stop(context) {\n  context.shouldStop = true;\n}\n\nfunction replaceWith(context, newNode) {\n  // $FlowIgnore\n  var parentNode = context.parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[context.parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    var indexInList = parentProperty.findIndex(function (n) {\n      return n === context.node;\n    });\n    parentProperty.splice(indexInList, 1, newNode);\n  } else {\n    // $FlowIgnore\n    parentNode[context.parentKey] = newNode;\n  }\n\n  context.node._deleted = true;\n  context.node = newNode;\n} // bind the context to the first argument of node operations\n\n\nfunction bindNodeOperations(operations, context) {\n  var keys = Object.keys(operations);\n  var boundOperations = {};\n  keys.forEach(function (key) {\n    boundOperations[key] = operations[key].bind(null, context);\n  });\n  return boundOperations;\n}\n\nfunction createPathOperations(context) {\n  // $FlowIgnore\n  return bindNodeOperations({\n    findParent: findParent,\n    replaceWith: replaceWith,\n    remove: remove,\n    insertBefore: insertBefore,\n    insertAfter: insertAfter,\n    stop: stop\n  }, context);\n}\n\nexport function createPath(context) {\n  var path = _extends({}, context); // $FlowIgnore\n\n\n  Object.assign(path, createPathOperations(path)); // $FlowIgnore\n\n  return path;\n}","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/@webassemblyjs/ast/esm/node-path.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","findParent","_ref","cb","parentPath","Error","currentPath","node","insertBefore","context","newNode","insert","insertAfter","_ref2","inList","parentKey","indexOffset","undefined","parentList","indexInList","findIndex","n","splice","remove","_ref3","parentNode","parentProperty","Array","isArray","filter","_deleted","stop","shouldStop","replaceWith","bindNodeOperations","operations","keys","boundOperations","forEach","bind","createPathOperations","createPath","path"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction findParent(_ref, cb) {\n  var parentPath = _ref.parentPath;\n\n  if (parentPath == null) {\n    throw new Error(\"node is root\");\n  }\n\n  var currentPath = parentPath;\n\n  while (cb(currentPath) !== false) {\n    // Hit the root node, stop\n    // $FlowIgnore\n    if (currentPath.parentPath == null) {\n      return null;\n    } // $FlowIgnore\n\n\n    currentPath = currentPath.parentPath;\n  }\n\n  return currentPath.node;\n}\n\nfunction insertBefore(context, newNode) {\n  return insert(context, newNode);\n}\n\nfunction insertAfter(context, newNode) {\n  return insert(context, newNode, 1);\n}\n\nfunction insert(_ref2, newNode) {\n  var node = _ref2.node,\n      inList = _ref2.inList,\n      parentPath = _ref2.parentPath,\n      parentKey = _ref2.parentKey;\n  var indexOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!inList) {\n    throw new Error('inList' + \" error: \" + (\"insert can only be used for nodes that are within lists\" || \"unknown\"));\n  }\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  var parentList = parentPath.node[parentKey];\n  var indexInList = parentList.findIndex(function (n) {\n    return n === node;\n  });\n  parentList.splice(indexInList + indexOffset, 0, newNode);\n}\n\nfunction remove(_ref3) {\n  var node = _ref3.node,\n      parentKey = _ref3.parentKey,\n      parentPath = _ref3.parentPath;\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  var parentNode = parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    // $FlowIgnore\n    parentNode[parentKey] = parentProperty.filter(function (n) {\n      return n !== node;\n    });\n  } else {\n    // $FlowIgnore\n    delete parentNode[parentKey];\n  }\n\n  node._deleted = true;\n}\n\nfunction stop(context) {\n  context.shouldStop = true;\n}\n\nfunction replaceWith(context, newNode) {\n  // $FlowIgnore\n  var parentNode = context.parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[context.parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    var indexInList = parentProperty.findIndex(function (n) {\n      return n === context.node;\n    });\n    parentProperty.splice(indexInList, 1, newNode);\n  } else {\n    // $FlowIgnore\n    parentNode[context.parentKey] = newNode;\n  }\n\n  context.node._deleted = true;\n  context.node = newNode;\n} // bind the context to the first argument of node operations\n\n\nfunction bindNodeOperations(operations, context) {\n  var keys = Object.keys(operations);\n  var boundOperations = {};\n  keys.forEach(function (key) {\n    boundOperations[key] = operations[key].bind(null, context);\n  });\n  return boundOperations;\n}\n\nfunction createPathOperations(context) {\n  // $FlowIgnore\n  return bindNodeOperations({\n    findParent: findParent,\n    replaceWith: replaceWith,\n    remove: remove,\n    insertBefore: insertBefore,\n    insertAfter: insertAfter,\n    stop: stop\n  }, context);\n}\n\nexport function createPath(context) {\n  var path = _extends({}, context); // $FlowIgnore\n\n\n  Object.assign(path, createPathOperations(path)); // $FlowIgnore\n\n  return path;\n}"]},"metadata":{},"sourceType":"module"}