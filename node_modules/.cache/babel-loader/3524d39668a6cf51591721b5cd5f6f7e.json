{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").WasmLoadingType} WasmLoadingType */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<WasmLoadingType>>} */\n\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n  let set = enabledTypes.get(compiler);\n\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n\n  return set;\n};\n\nclass EnableWasmLoadingPlugin {\n  /**\n   * @param {WasmLoadingType} type library type that should be available\n   */\n  constructor(type) {\n    this.type = type;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {WasmLoadingType} type type of library\n   * @returns {void}\n   */\n\n\n  static setEnabled(compiler, type) {\n    getEnabledTypes(compiler).add(type);\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {WasmLoadingType} type type of library\n   * @returns {void}\n   */\n\n\n  static checkEnabled(compiler, type) {\n    if (!getEnabledTypes(compiler).has(type)) {\n      throw new Error(`Library type \"${type}\" is not enabled. ` + \"EnableWasmLoadingPlugin need to be used to enable this type of wasm loading. \" + 'This usually happens through the \"output.enabledWasmLoadingTypes\" option. ' + 'If you are using a function as entry which sets \"wasmLoading\", you need to add all potential library types to \"output.enabledWasmLoadingTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n    }\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const {\n      type\n    } = this; // Only enable once\n\n    const enabled = getEnabledTypes(compiler);\n    if (enabled.has(type)) return;\n    enabled.add(type);\n\n    if (typeof type === \"string\") {\n      switch (type) {\n        case \"fetch\":\n          {\n            // TODO webpack 6 remove FetchCompileWasmPlugin\n            const FetchCompileWasmPlugin = require(\"../web/FetchCompileWasmPlugin\");\n\n            const FetchCompileAsyncWasmPlugin = require(\"../web/FetchCompileAsyncWasmPlugin\");\n\n            new FetchCompileWasmPlugin({\n              mangleImports: compiler.options.optimization.mangleWasmImports\n            }).apply(compiler);\n            new FetchCompileAsyncWasmPlugin().apply(compiler);\n            break;\n          }\n\n        case \"async-node\":\n          {\n            // TODO webpack 6 remove ReadFileCompileWasmPlugin\n            const ReadFileCompileWasmPlugin = require(\"../node/ReadFileCompileWasmPlugin\"); // @ts-expect-error typescript bug for duplicate require\n\n\n            const ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n\n            new ReadFileCompileWasmPlugin({\n              mangleImports: compiler.options.optimization.mangleWasmImports\n            }).apply(compiler);\n            new ReadFileCompileAsyncWasmPlugin({\n              type\n            }).apply(compiler);\n            break;\n          }\n\n        case \"async-node-module\":\n          {\n            // @ts-expect-error typescript bug for duplicate require\n            const ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n\n            new ReadFileCompileAsyncWasmPlugin({\n              type,\n              import: true\n            }).apply(compiler);\n            break;\n          }\n\n        case \"universal\":\n          throw new Error(\"Universal WebAssembly Loading is not implemented yet\");\n\n        default:\n          throw new Error(`Unsupported wasm loading type ${type}.\nPlugins which provide custom wasm loading types must call EnableWasmLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n      }\n    } else {// TODO support plugin instances here\n      // apply them to the compiler\n    }\n  }\n\n}\n\nmodule.exports = EnableWasmLoadingPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/wasm/EnableWasmLoadingPlugin.js"],"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableWasmLoadingPlugin","constructor","type","setEnabled","add","checkEnabled","has","Error","Array","from","join","apply","enabled","FetchCompileWasmPlugin","require","FetchCompileAsyncWasmPlugin","mangleImports","options","optimization","mangleWasmImports","ReadFileCompileWasmPlugin","ReadFileCompileAsyncWasmPlugin","import","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WasmLoadingType} WasmLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<WasmLoadingType>>} */\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n\tlet set = enabledTypes.get(compiler);\n\tif (set === undefined) {\n\t\tset = new Set();\n\t\tenabledTypes.set(compiler, set);\n\t}\n\treturn set;\n};\n\nclass EnableWasmLoadingPlugin {\n\t/**\n\t * @param {WasmLoadingType} type library type that should be available\n\t */\n\tconstructor(type) {\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {WasmLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic setEnabled(compiler, type) {\n\t\tgetEnabledTypes(compiler).add(type);\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {WasmLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic checkEnabled(compiler, type) {\n\t\tif (!getEnabledTypes(compiler).has(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Library type \"${type}\" is not enabled. ` +\n\t\t\t\t\t\"EnableWasmLoadingPlugin need to be used to enable this type of wasm loading. \" +\n\t\t\t\t\t'This usually happens through the \"output.enabledWasmLoadingTypes\" option. ' +\n\t\t\t\t\t'If you are using a function as entry which sets \"wasmLoading\", you need to add all potential library types to \"output.enabledWasmLoadingTypes\". ' +\n\t\t\t\t\t\"These types are enabled: \" +\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { type } = this;\n\n\t\t// Only enable once\n\t\tconst enabled = getEnabledTypes(compiler);\n\t\tif (enabled.has(type)) return;\n\t\tenabled.add(type);\n\n\t\tif (typeof type === \"string\") {\n\t\t\tswitch (type) {\n\t\t\t\tcase \"fetch\": {\n\t\t\t\t\t// TODO webpack 6 remove FetchCompileWasmPlugin\n\t\t\t\t\tconst FetchCompileWasmPlugin = require(\"../web/FetchCompileWasmPlugin\");\n\t\t\t\t\tconst FetchCompileAsyncWasmPlugin = require(\"../web/FetchCompileAsyncWasmPlugin\");\n\t\t\t\t\tnew FetchCompileWasmPlugin({\n\t\t\t\t\t\tmangleImports: compiler.options.optimization.mangleWasmImports\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tnew FetchCompileAsyncWasmPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"async-node\": {\n\t\t\t\t\t// TODO webpack 6 remove ReadFileCompileWasmPlugin\n\t\t\t\t\tconst ReadFileCompileWasmPlugin = require(\"../node/ReadFileCompileWasmPlugin\");\n\t\t\t\t\t// @ts-expect-error typescript bug for duplicate require\n\t\t\t\t\tconst ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n\t\t\t\t\tnew ReadFileCompileWasmPlugin({\n\t\t\t\t\t\tmangleImports: compiler.options.optimization.mangleWasmImports\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tnew ReadFileCompileAsyncWasmPlugin({ type }).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"async-node-module\": {\n\t\t\t\t\t// @ts-expect-error typescript bug for duplicate require\n\t\t\t\t\tconst ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n\t\t\t\t\tnew ReadFileCompileAsyncWasmPlugin({ type, import: true }).apply(\n\t\t\t\t\t\tcompiler\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"universal\":\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Universal WebAssembly Loading is not implemented yet\"\n\t\t\t\t\t);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported wasm loading type ${type}.\nPlugins which provide custom wasm loading types must call EnableWasmLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO support plugin instances here\n\t\t\t// apply them to the compiler\n\t\t}\n\t}\n}\n\nmodule.exports = EnableWasmLoadingPlugin;\n"]},"metadata":{},"sourceType":"script"}