{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n\nclass EnsureChunkRuntimeModule extends RuntimeModule {\n  constructor(runtimeRequirements) {\n    super(\"ensure chunk\");\n    this.runtimeRequirements = runtimeRequirements;\n  }\n  /**\n   * @returns {string} runtime code\n   */\n\n\n  generate() {\n    const {\n      runtimeTemplate\n    } = this.compilation; // Check if there are non initial chunks which need to be imported using require-ensure\n\n    if (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {\n      const handlers = RuntimeGlobals.ensureChunkHandlers;\n      return Template.asString([`${handlers} = {};`, \"// This file contains only the entry chunk.\", \"// The chunk loading function for additional chunks\", `${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.basicFunction(\"chunkId\", [`return Promise.all(Object.keys(${handlers}).reduce(${runtimeTemplate.basicFunction(\"promises, key\", [`${handlers}[key](chunkId, promises);`, \"return promises;\"])}, []));`])};`]);\n    } else {\n      // There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure\n      // function. This can happen with multiple entrypoints.\n      return Template.asString([\"// The chunk loading function for additional chunks\", \"// Since all referenced chunks are already included\", \"// in this file, this function is empty here.\", `${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.returningFunction(\"Promise.resolve()\")};`]);\n    }\n  }\n\n}\n\nmodule.exports = EnsureChunkRuntimeModule;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/runtime/EnsureChunkRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","EnsureChunkRuntimeModule","constructor","runtimeRequirements","generate","runtimeTemplate","compilation","has","ensureChunkHandlers","handlers","asString","ensureChunk","basicFunction","returningFunction","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;;AAEA,MAAMG,wBAAN,SAAuCF,aAAvC,CAAqD;AACpDG,EAAAA,WAAW,CAACC,mBAAD,EAAsB;AAChC,UAAM,cAAN;AACA,SAAKA,mBAAL,GAA2BA,mBAA3B;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,QAAQ,GAAG;AACV,UAAM;AAAEC,MAAAA;AAAF,QAAsB,KAAKC,WAAjC,CADU,CAEV;;AACA,QAAI,KAAKH,mBAAL,CAAyBI,GAAzB,CAA6BV,cAAc,CAACW,mBAA5C,CAAJ,EAAsE;AACrE,YAAMC,QAAQ,GAAGZ,cAAc,CAACW,mBAAhC;AACA,aAAOR,QAAQ,CAACU,QAAT,CAAkB,CACvB,GAAED,QAAS,QADY,EAExB,6CAFwB,EAGxB,qDAHwB,EAIvB,GAAEZ,cAAc,CAACc,WAAY,MAAKN,eAAe,CAACO,aAAhB,CAClC,SADkC,EAElC,CACE,kCAAiCH,QAAS,YAAWJ,eAAe,CAACO,aAAhB,CACrD,eADqD,EAErD,CAAE,GAAEH,QAAS,2BAAb,EAAyC,kBAAzC,CAFqD,CAGpD,SAJH,CAFkC,CAQjC,GAZsB,CAAlB,CAAP;AAcA,KAhBD,MAgBO;AACN;AACA;AACA,aAAOT,QAAQ,CAACU,QAAT,CAAkB,CACxB,qDADwB,EAExB,qDAFwB,EAGxB,+CAHwB,EAIvB,GAAEb,cAAc,CAACc,WAAY,MAAKN,eAAe,CAACQ,iBAAhB,CAClC,mBADkC,CAEjC,GANsB,CAAlB,CAAP;AAQA;AACD;;AAxCmD;;AA2CrDC,MAAM,CAACC,OAAP,GAAiBd,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\nclass EnsureChunkRuntimeModule extends RuntimeModule {\n\tconstructor(runtimeRequirements) {\n\t\tsuper(\"ensure chunk\");\n\t\tthis.runtimeRequirements = runtimeRequirements;\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { runtimeTemplate } = this.compilation;\n\t\t// Check if there are non initial chunks which need to be imported using require-ensure\n\t\tif (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {\n\t\t\tconst handlers = RuntimeGlobals.ensureChunkHandlers;\n\t\t\treturn Template.asString([\n\t\t\t\t`${handlers} = {};`,\n\t\t\t\t\"// This file contains only the entry chunk.\",\n\t\t\t\t\"// The chunk loading function for additional chunks\",\n\t\t\t\t`${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.basicFunction(\n\t\t\t\t\t\"chunkId\",\n\t\t\t\t\t[\n\t\t\t\t\t\t`return Promise.all(Object.keys(${handlers}).reduce(${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\t\"promises, key\",\n\t\t\t\t\t\t\t[`${handlers}[key](chunkId, promises);`, \"return promises;\"]\n\t\t\t\t\t\t)}, []));`\n\t\t\t\t\t]\n\t\t\t\t)};`\n\t\t\t]);\n\t\t} else {\n\t\t\t// There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure\n\t\t\t// function. This can happen with multiple entrypoints.\n\t\t\treturn Template.asString([\n\t\t\t\t\"// The chunk loading function for additional chunks\",\n\t\t\t\t\"// Since all referenced chunks are already included\",\n\t\t\t\t\"// in this file, this function is empty here.\",\n\t\t\t\t`${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.returningFunction(\n\t\t\t\t\t\"Promise.resolve()\"\n\t\t\t\t)};`\n\t\t\t]);\n\t\t}\n\t}\n}\n\nmodule.exports = EnsureChunkRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}