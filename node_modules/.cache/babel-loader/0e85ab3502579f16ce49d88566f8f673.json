{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\n\nconst {\n  RawSource,\n  ReplaceSource\n} = require(\"webpack-sources\");\n\nconst Generator = require(\"../Generator\");\n\nconst InitFragment = require(\"../InitFragment\");\n\nconst HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../DependenciesBlock\")} DependenciesBlock */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n// TODO: clean up this file\n// replace with newer constructs\n\n\nconst deprecatedGetInitFragments = util.deprecate((template, dependency, templateContext) => template.getInitFragments(dependency, templateContext), \"DependencyTemplate.getInitFragment is deprecated (use apply(dep, source, { initFragments }) instead)\", \"DEP_WEBPACK_JAVASCRIPT_GENERATOR_GET_INIT_FRAGMENTS\");\nconst TYPES = new Set([\"javascript\"]);\n\nclass JavascriptGenerator extends Generator {\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n  getTypes(module) {\n    return TYPES;\n  }\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return 39;\n    }\n\n    return originalSource.size();\n  }\n  /**\n   * @param {NormalModule} module module for which the bailout reason should be determined\n   * @param {ConcatenationBailoutReasonContext} context context\n   * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n   */\n\n\n  getConcatenationBailoutReason(module, context) {\n    // Only harmony modules are valid for optimization\n    if (!module.buildMeta || module.buildMeta.exportsType !== \"namespace\" || module.presentationalDependencies === undefined || !module.presentationalDependencies.some(d => d instanceof HarmonyCompatibilityDependency)) {\n      return \"Module is not an ECMAScript module\";\n    } // Some expressions are not compatible with module concatenation\n    // because they may produce unexpected results. The plugin bails out\n    // if some were detected upfront.\n\n\n    if (module.buildInfo && module.buildInfo.moduleConcatenationBailout) {\n      return `Module uses ${module.buildInfo.moduleConcatenationBailout}`;\n    }\n  }\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, generateContext) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return new RawSource(\"throw new Error('No source available');\");\n    }\n\n    const source = new ReplaceSource(originalSource);\n    const initFragments = [];\n    this.sourceModule(module, initFragments, source, generateContext);\n    return InitFragment.addToSource(source, initFragments, generateContext);\n  }\n  /**\n   * @param {Module} module the module to generate\n   * @param {InitFragment[]} initFragments mutable list of init fragments\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {GenerateContext} generateContext the generateContext\n   * @returns {void}\n   */\n\n\n  sourceModule(module, initFragments, source, generateContext) {\n    for (const dependency of module.dependencies) {\n      this.sourceDependency(module, dependency, initFragments, source, generateContext);\n    }\n\n    if (module.presentationalDependencies !== undefined) {\n      for (const dependency of module.presentationalDependencies) {\n        this.sourceDependency(module, dependency, initFragments, source, generateContext);\n      }\n    }\n\n    for (const childBlock of module.blocks) {\n      this.sourceBlock(module, childBlock, initFragments, source, generateContext);\n    }\n  }\n  /**\n   * @param {Module} module the module to generate\n   * @param {DependenciesBlock} block the dependencies block which will be processed\n   * @param {InitFragment[]} initFragments mutable list of init fragments\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {GenerateContext} generateContext the generateContext\n   * @returns {void}\n   */\n\n\n  sourceBlock(module, block, initFragments, source, generateContext) {\n    for (const dependency of block.dependencies) {\n      this.sourceDependency(module, dependency, initFragments, source, generateContext);\n    }\n\n    for (const childBlock of block.blocks) {\n      this.sourceBlock(module, childBlock, initFragments, source, generateContext);\n    }\n  }\n  /**\n   * @param {Module} module the current module\n   * @param {Dependency} dependency the dependency to generate\n   * @param {InitFragment[]} initFragments mutable list of init fragments\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {GenerateContext} generateContext the render context\n   * @returns {void}\n   */\n\n\n  sourceDependency(module, dependency, initFragments, source, generateContext) {\n    const constructor =\n    /** @type {new (...args: any[]) => Dependency} */\n    dependency.constructor;\n    const template = generateContext.dependencyTemplates.get(constructor);\n\n    if (!template) {\n      throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n    }\n\n    const templateContext = {\n      runtimeTemplate: generateContext.runtimeTemplate,\n      dependencyTemplates: generateContext.dependencyTemplates,\n      moduleGraph: generateContext.moduleGraph,\n      chunkGraph: generateContext.chunkGraph,\n      module,\n      runtime: generateContext.runtime,\n      runtimeRequirements: generateContext.runtimeRequirements,\n      concatenationScope: generateContext.concatenationScope,\n      codeGenerationResults: generateContext.codeGenerationResults,\n      initFragments\n    };\n    template.apply(dependency, source, templateContext); // TODO remove in webpack 6\n\n    if (\"getInitFragments\" in template) {\n      const fragments = deprecatedGetInitFragments(template, dependency, templateContext);\n\n      if (fragments) {\n        for (const fragment of fragments) {\n          initFragments.push(fragment);\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = JavascriptGenerator;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/javascript/JavascriptGenerator.js"],"names":["util","require","RawSource","ReplaceSource","Generator","InitFragment","HarmonyCompatibilityDependency","deprecatedGetInitFragments","deprecate","template","dependency","templateContext","getInitFragments","TYPES","Set","JavascriptGenerator","getTypes","module","getSize","type","originalSource","size","getConcatenationBailoutReason","context","buildMeta","exportsType","presentationalDependencies","undefined","some","d","buildInfo","moduleConcatenationBailout","generate","generateContext","source","initFragments","sourceModule","addToSource","dependencies","sourceDependency","childBlock","blocks","sourceBlock","block","constructor","dependencyTemplates","get","Error","name","runtimeTemplate","moduleGraph","chunkGraph","runtime","runtimeRequirements","concatenationScope","codeGenerationResults","apply","fragments","fragment","push","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst { RawSource, ReplaceSource } = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst InitFragment = require(\"../InitFragment\");\nconst HarmonyCompatibilityDependency = require(\"../dependencies/HarmonyCompatibilityDependency\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../DependenciesBlock\")} DependenciesBlock */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n// TODO: clean up this file\n// replace with newer constructs\n\nconst deprecatedGetInitFragments = util.deprecate(\n\t(template, dependency, templateContext) =>\n\t\ttemplate.getInitFragments(dependency, templateContext),\n\t\"DependencyTemplate.getInitFragment is deprecated (use apply(dep, source, { initFragments }) instead)\",\n\t\"DEP_WEBPACK_JAVASCRIPT_GENERATOR_GET_INIT_FRAGMENTS\"\n);\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass JavascriptGenerator extends Generator {\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn 39;\n\t\t}\n\t\treturn originalSource.size();\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the bailout reason should be determined\n\t * @param {ConcatenationBailoutReasonContext} context context\n\t * @returns {string | undefined} reason why this module can't be concatenated, undefined when it can be concatenated\n\t */\n\tgetConcatenationBailoutReason(module, context) {\n\t\t// Only harmony modules are valid for optimization\n\t\tif (\n\t\t\t!module.buildMeta ||\n\t\t\tmodule.buildMeta.exportsType !== \"namespace\" ||\n\t\t\tmodule.presentationalDependencies === undefined ||\n\t\t\t!module.presentationalDependencies.some(\n\t\t\t\td => d instanceof HarmonyCompatibilityDependency\n\t\t\t)\n\t\t) {\n\t\t\treturn \"Module is not an ECMAScript module\";\n\t\t}\n\n\t\t// Some expressions are not compatible with module concatenation\n\t\t// because they may produce unexpected results. The plugin bails out\n\t\t// if some were detected upfront.\n\t\tif (module.buildInfo && module.buildInfo.moduleConcatenationBailout) {\n\t\t\treturn `Module uses ${module.buildInfo.moduleConcatenationBailout}`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"throw new Error('No source available');\");\n\t\t}\n\n\t\tconst source = new ReplaceSource(originalSource);\n\t\tconst initFragments = [];\n\n\t\tthis.sourceModule(module, initFragments, source, generateContext);\n\n\t\treturn InitFragment.addToSource(source, initFragments, generateContext);\n\t}\n\n\t/**\n\t * @param {Module} module the module to generate\n\t * @param {InitFragment[]} initFragments mutable list of init fragments\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {GenerateContext} generateContext the generateContext\n\t * @returns {void}\n\t */\n\tsourceModule(module, initFragments, source, generateContext) {\n\t\tfor (const dependency of module.dependencies) {\n\t\t\tthis.sourceDependency(\n\t\t\t\tmodule,\n\t\t\t\tdependency,\n\t\t\t\tinitFragments,\n\t\t\t\tsource,\n\t\t\t\tgenerateContext\n\t\t\t);\n\t\t}\n\n\t\tif (module.presentationalDependencies !== undefined) {\n\t\t\tfor (const dependency of module.presentationalDependencies) {\n\t\t\t\tthis.sourceDependency(\n\t\t\t\t\tmodule,\n\t\t\t\t\tdependency,\n\t\t\t\t\tinitFragments,\n\t\t\t\t\tsource,\n\t\t\t\t\tgenerateContext\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tfor (const childBlock of module.blocks) {\n\t\t\tthis.sourceBlock(\n\t\t\t\tmodule,\n\t\t\t\tchildBlock,\n\t\t\t\tinitFragments,\n\t\t\t\tsource,\n\t\t\t\tgenerateContext\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} module the module to generate\n\t * @param {DependenciesBlock} block the dependencies block which will be processed\n\t * @param {InitFragment[]} initFragments mutable list of init fragments\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {GenerateContext} generateContext the generateContext\n\t * @returns {void}\n\t */\n\tsourceBlock(module, block, initFragments, source, generateContext) {\n\t\tfor (const dependency of block.dependencies) {\n\t\t\tthis.sourceDependency(\n\t\t\t\tmodule,\n\t\t\t\tdependency,\n\t\t\t\tinitFragments,\n\t\t\t\tsource,\n\t\t\t\tgenerateContext\n\t\t\t);\n\t\t}\n\n\t\tfor (const childBlock of block.blocks) {\n\t\t\tthis.sourceBlock(\n\t\t\t\tmodule,\n\t\t\t\tchildBlock,\n\t\t\t\tinitFragments,\n\t\t\t\tsource,\n\t\t\t\tgenerateContext\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} module the current module\n\t * @param {Dependency} dependency the dependency to generate\n\t * @param {InitFragment[]} initFragments mutable list of init fragments\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {GenerateContext} generateContext the render context\n\t * @returns {void}\n\t */\n\tsourceDependency(module, dependency, initFragments, source, generateContext) {\n\t\tconst constructor = /** @type {new (...args: any[]) => Dependency} */ (\n\t\t\tdependency.constructor\n\t\t);\n\t\tconst template = generateContext.dependencyTemplates.get(constructor);\n\t\tif (!template) {\n\t\t\tthrow new Error(\n\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t);\n\t\t}\n\n\t\tconst templateContext = {\n\t\t\truntimeTemplate: generateContext.runtimeTemplate,\n\t\t\tdependencyTemplates: generateContext.dependencyTemplates,\n\t\t\tmoduleGraph: generateContext.moduleGraph,\n\t\t\tchunkGraph: generateContext.chunkGraph,\n\t\t\tmodule,\n\t\t\truntime: generateContext.runtime,\n\t\t\truntimeRequirements: generateContext.runtimeRequirements,\n\t\t\tconcatenationScope: generateContext.concatenationScope,\n\t\t\tcodeGenerationResults: generateContext.codeGenerationResults,\n\t\t\tinitFragments\n\t\t};\n\n\t\ttemplate.apply(dependency, source, templateContext);\n\n\t\t// TODO remove in webpack 6\n\t\tif (\"getInitFragments\" in template) {\n\t\t\tconst fragments = deprecatedGetInitFragments(\n\t\t\t\ttemplate,\n\t\t\t\tdependency,\n\t\t\t\ttemplateContext\n\t\t\t);\n\n\t\t\tif (fragments) {\n\t\t\t\tfor (const fragment of fragments) {\n\t\t\t\t\tinitFragments.push(fragment);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = JavascriptGenerator;\n"]},"metadata":{},"sourceType":"script"}