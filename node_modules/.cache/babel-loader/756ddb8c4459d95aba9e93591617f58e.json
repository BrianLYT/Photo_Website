{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst EntryDependency = require(\"./dependencies/EntryDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Entrypoint\").EntryOptions} EntryOptions */\n\n\nclass EntryPlugin {\n  /**\n   * An entry plugin which will handle\n   * creation of the EntryDependency\n   *\n   * @param {string} context context path\n   * @param {string} entry entry path\n   * @param {EntryOptions | string=} options entry options (passing a string is deprecated)\n   */\n  constructor(context, entry, options) {\n    this.context = context;\n    this.entry = entry;\n    this.options = options || \"\";\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"EntryPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(EntryDependency, normalModuleFactory);\n    });\n    const {\n      entry,\n      options,\n      context\n    } = this;\n    const dep = EntryPlugin.createDependency(entry, options);\n    compiler.hooks.make.tapAsync(\"EntryPlugin\", (compilation, callback) => {\n      compilation.addEntry(context, dep, options, err => {\n        callback(err);\n      });\n    });\n  }\n  /**\n   * @param {string} entry entry request\n   * @param {EntryOptions | string} options entry options (passing string is deprecated)\n   * @returns {EntryDependency} the dependency\n   */\n\n\n  static createDependency(entry, options) {\n    const dep = new EntryDependency(entry); // TODO webpack 6 remove string option\n\n    dep.loc = {\n      name: typeof options === \"object\" ? options.name : options\n    };\n    return dep;\n  }\n\n}\n\nmodule.exports = EntryPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/EntryPlugin.js"],"names":["EntryDependency","require","EntryPlugin","constructor","context","entry","options","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dep","createDependency","make","tapAsync","callback","addEntry","err","loc","name","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,gCAAD,CAA/B;AAEA;;AACA;;;AAEA,MAAMC,WAAN,CAAkB;AACjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiBC,OAAjB,EAA0B;AACpC,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,aADD,EAEC,CAACD,WAAD,WAA0C;AAAA,UAA5B;AAAEE,QAAAA;AAAF,OAA4B;AACzCF,MAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCd,eADD,EAECY,mBAFD;AAIA,KAPF;AAUA,UAAM;AAAEP,MAAAA,KAAF;AAASC,MAAAA,OAAT;AAAkBF,MAAAA;AAAlB,QAA8B,IAApC;AACA,UAAMW,GAAG,GAAGb,WAAW,CAACc,gBAAZ,CAA6BX,KAA7B,EAAoCC,OAApC,CAAZ;AAEAE,IAAAA,QAAQ,CAACC,KAAT,CAAeQ,IAAf,CAAoBC,QAApB,CAA6B,aAA7B,EAA4C,CAACR,WAAD,EAAcS,QAAd,KAA2B;AACtET,MAAAA,WAAW,CAACU,QAAZ,CAAqBhB,OAArB,EAA8BW,GAA9B,EAAmCT,OAAnC,EAA4Ce,GAAG,IAAI;AAClDF,QAAAA,QAAQ,CAACE,GAAD,CAAR;AACA,OAFD;AAGA,KAJD;AAKA;AAED;AACD;AACA;AACA;AACA;;;AACwB,SAAhBL,gBAAgB,CAACX,KAAD,EAAQC,OAAR,EAAiB;AACvC,UAAMS,GAAG,GAAG,IAAIf,eAAJ,CAAoBK,KAApB,CAAZ,CADuC,CAEvC;;AACAU,IAAAA,GAAG,CAACO,GAAJ,GAAU;AAAEC,MAAAA,IAAI,EAAE,OAAOjB,OAAP,KAAmB,QAAnB,GAA8BA,OAAO,CAACiB,IAAtC,GAA6CjB;AAArD,KAAV;AACA,WAAOS,GAAP;AACA;;AAnDgB;;AAsDlBS,MAAM,CAACC,OAAP,GAAiBvB,WAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst EntryDependency = require(\"./dependencies/EntryDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Entrypoint\").EntryOptions} EntryOptions */\n\nclass EntryPlugin {\n\t/**\n\t * An entry plugin which will handle\n\t * creation of the EntryDependency\n\t *\n\t * @param {string} context context path\n\t * @param {string} entry entry path\n\t * @param {EntryOptions | string=} options entry options (passing a string is deprecated)\n\t */\n\tconstructor(context, entry, options) {\n\t\tthis.context = context;\n\t\tthis.entry = entry;\n\t\tthis.options = options || \"\";\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"EntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tconst { entry, options, context } = this;\n\t\tconst dep = EntryPlugin.createDependency(entry, options);\n\n\t\tcompiler.hooks.make.tapAsync(\"EntryPlugin\", (compilation, callback) => {\n\t\t\tcompilation.addEntry(context, dep, options, err => {\n\t\t\t\tcallback(err);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} entry entry request\n\t * @param {EntryOptions | string} options entry options (passing string is deprecated)\n\t * @returns {EntryDependency} the dependency\n\t */\n\tstatic createDependency(entry, options) {\n\t\tconst dep = new EntryDependency(entry);\n\t\t// TODO webpack 6 remove string option\n\t\tdep.loc = { name: typeof options === \"object\" ? options.name : options };\n\t\treturn dep;\n\t}\n}\n\nmodule.exports = EntryPlugin;\n"]},"metadata":{},"sourceType":"script"}