{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\nconst getPaths = require(\"./getPaths\");\n\nconst {\n  getType,\n  PathType\n} = require(\"./util/path\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n\nmodule.exports = class SymlinkPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const fs = resolver.fileSystem;\n    resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n      if (request.ignoreSymlinks) return callback();\n      const pathsResult = getPaths(request.path);\n      const pathSegments = pathsResult.segments;\n      const paths = pathsResult.paths;\n      let containsSymlink = false;\n      let idx = -1;\n      forEachBail(paths, (path, callback) => {\n        idx++;\n        if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(path);\n        fs.readlink(path, (err, result) => {\n          if (!err && result) {\n            pathSegments[idx] = result;\n            containsSymlink = true; // Shortcut when absolute symlink found\n\n            const resultType = getType(result.toString());\n\n            if (resultType === PathType.AbsoluteWin || resultType === PathType.AbsolutePosix) {\n              return callback(null, idx);\n            }\n          }\n\n          callback();\n        });\n      }, (err, idx) => {\n        if (!containsSymlink) return callback();\n        const resultSegments = typeof idx === \"number\" ? pathSegments.slice(0, idx + 1) : pathSegments.slice();\n        const result = resultSegments.reduceRight((a, b) => {\n          return resolver.join(a, b);\n        });\n        const obj = { ...request,\n          path: result\n        };\n        resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/enhanced-resolve/lib/SymlinkPlugin.js"],"names":["forEachBail","require","getPaths","getType","PathType","module","exports","SymlinkPlugin","constructor","source","target","apply","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","ignoreSymlinks","pathsResult","path","pathSegments","segments","paths","containsSymlink","idx","fileDependencies","add","readlink","err","result","resultType","toString","AbsoluteWin","AbsolutePosix","resultSegments","slice","reduceRight","a","b","join","obj","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAM;AAAEE,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAwBH,OAAO,CAAC,aAAD,CAArC;AAEA;;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,MAAMC,aAAN,CAAoB;AACpC;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACA,UAAMI,EAAE,GAAGF,QAAQ,CAACG,UAApB;AACAH,IAAAA,QAAQ,CACNI,OADF,CACU,KAAKP,MADf,EAEEQ,QAFF,CAEW,eAFX,EAE4B,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACjE,UAAIF,OAAO,CAACG,cAAZ,EAA4B,OAAOD,QAAQ,EAAf;AAC5B,YAAME,WAAW,GAAGpB,QAAQ,CAACgB,OAAO,CAACK,IAAT,CAA5B;AACA,YAAMC,YAAY,GAAGF,WAAW,CAACG,QAAjC;AACA,YAAMC,KAAK,GAAGJ,WAAW,CAACI,KAA1B;AAEA,UAAIC,eAAe,GAAG,KAAtB;AACA,UAAIC,GAAG,GAAG,CAAC,CAAX;AACA5B,MAAAA,WAAW,CACV0B,KADU,EAEV,CAACH,IAAD,EAAOH,QAAP,KAAoB;AACnBQ,QAAAA,GAAG;AACH,YAAIT,cAAc,CAACU,gBAAnB,EACCV,cAAc,CAACU,gBAAf,CAAgCC,GAAhC,CAAoCP,IAApC;AACDT,QAAAA,EAAE,CAACiB,QAAH,CAAYR,IAAZ,EAAkB,CAACS,GAAD,EAAMC,MAAN,KAAiB;AAClC,cAAI,CAACD,GAAD,IAAQC,MAAZ,EAAoB;AACnBT,YAAAA,YAAY,CAACI,GAAD,CAAZ,GAAoBK,MAApB;AACAN,YAAAA,eAAe,GAAG,IAAlB,CAFmB,CAGnB;;AACA,kBAAMO,UAAU,GAAG/B,OAAO,CAAC8B,MAAM,CAACE,QAAP,EAAD,CAA1B;;AACA,gBACCD,UAAU,KAAK9B,QAAQ,CAACgC,WAAxB,IACAF,UAAU,KAAK9B,QAAQ,CAACiC,aAFzB,EAGE;AACD,qBAAOjB,QAAQ,CAAC,IAAD,EAAOQ,GAAP,CAAf;AACA;AACD;;AACDR,UAAAA,QAAQ;AACR,SAdD;AAeA,OArBS,EAsBV,CAACY,GAAD,EAAMJ,GAAN,KAAc;AACb,YAAI,CAACD,eAAL,EAAsB,OAAOP,QAAQ,EAAf;AACtB,cAAMkB,cAAc,GACnB,OAAOV,GAAP,KAAe,QAAf,GACGJ,YAAY,CAACe,KAAb,CAAmB,CAAnB,EAAsBX,GAAG,GAAG,CAA5B,CADH,GAEGJ,YAAY,CAACe,KAAb,EAHJ;AAIA,cAAMN,MAAM,GAAGK,cAAc,CAACE,WAAf,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnD,iBAAO9B,QAAQ,CAAC+B,IAAT,CAAcF,CAAd,EAAiBC,CAAjB,CAAP;AACA,SAFc,CAAf;AAGA,cAAME,GAAG,GAAG,EACX,GAAG1B,OADQ;AAEXK,UAAAA,IAAI,EAAEU;AAFK,SAAZ;AAIArB,QAAAA,QAAQ,CAACiC,SAAT,CACCnC,MADD,EAECkC,GAFD,EAGC,yBAAyBX,MAH1B,EAICd,cAJD,EAKCC,QALD;AAOA,OA1CS,CAAX;AA4CA,KAtDF;AAuDA;;AAxEmC,CAArC","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\nconst { getType, PathType } = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class SymlinkPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (request.ignoreSymlinks) return callback();\n\t\t\t\tconst pathsResult = getPaths(request.path);\n\t\t\t\tconst pathSegments = pathsResult.segments;\n\t\t\t\tconst paths = pathsResult.paths;\n\n\t\t\t\tlet containsSymlink = false;\n\t\t\t\tlet idx = -1;\n\t\t\t\tforEachBail(\n\t\t\t\t\tpaths,\n\t\t\t\t\t(path, callback) => {\n\t\t\t\t\t\tidx++;\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(path);\n\t\t\t\t\t\tfs.readlink(path, (err, result) => {\n\t\t\t\t\t\t\tif (!err && result) {\n\t\t\t\t\t\t\t\tpathSegments[idx] = result;\n\t\t\t\t\t\t\t\tcontainsSymlink = true;\n\t\t\t\t\t\t\t\t// Shortcut when absolute symlink found\n\t\t\t\t\t\t\t\tconst resultType = getType(result.toString());\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsoluteWin ||\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsolutePosix\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn callback(null, idx);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t(err, idx) => {\n\t\t\t\t\t\tif (!containsSymlink) return callback();\n\t\t\t\t\t\tconst resultSegments =\n\t\t\t\t\t\t\ttypeof idx === \"number\"\n\t\t\t\t\t\t\t\t? pathSegments.slice(0, idx + 1)\n\t\t\t\t\t\t\t\t: pathSegments.slice();\n\t\t\t\t\t\tconst result = resultSegments.reduceRight((a, b) => {\n\t\t\t\t\t\t\treturn resolver.join(a, b);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\tpath: result\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\"resolved symlink to \" + result,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}