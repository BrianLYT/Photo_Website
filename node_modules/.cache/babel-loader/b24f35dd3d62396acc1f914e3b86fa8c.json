{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n/**\n * @param {number} size the size in bytes\n * @returns {string} the formatted size\n */\n\nexports.formatSize = size => {\n  if (typeof size !== \"number\" || Number.isNaN(size) === true) {\n    return \"unknown size\";\n  }\n\n  if (size <= 0) {\n    return \"0 bytes\";\n  }\n\n  const abbreviations = [\"bytes\", \"KiB\", \"MiB\", \"GiB\"];\n  const index = Math.floor(Math.log(size) / Math.log(1024));\n  return `${+(size / Math.pow(1024, index)).toPrecision(3)} ${abbreviations[index]}`;\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/SizeFormatHelpers.js"],"names":["exports","formatSize","size","Number","isNaN","abbreviations","index","Math","floor","log","pow","toPrecision"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,UAAR,GAAqBC,IAAI,IAAI;AAC5B,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BC,MAAM,CAACC,KAAP,CAAaF,IAAb,MAAuB,IAAvD,EAA6D;AAC5D,WAAO,cAAP;AACA;;AAED,MAAIA,IAAI,IAAI,CAAZ,EAAe;AACd,WAAO,SAAP;AACA;;AAED,QAAMG,aAAa,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,KAAjB,EAAwB,KAAxB,CAAtB;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASP,IAAT,IAAiBK,IAAI,CAACE,GAAL,CAAS,IAAT,CAA5B,CAAd;AAEA,SAAQ,GAAE,CAAC,CAACP,IAAI,GAAGK,IAAI,CAACG,GAAL,CAAS,IAAT,EAAeJ,KAAf,CAAR,EAA+BK,WAA/B,CAA2C,CAA3C,CAA8C,IACxDN,aAAa,CAACC,KAAD,CACb,EAFD;AAGA,CAfD","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\n\"use strict\";\n\n/**\n * @param {number} size the size in bytes\n * @returns {string} the formatted size\n */\nexports.formatSize = size => {\n\tif (typeof size !== \"number\" || Number.isNaN(size) === true) {\n\t\treturn \"unknown size\";\n\t}\n\n\tif (size <= 0) {\n\t\treturn \"0 bytes\";\n\t}\n\n\tconst abbreviations = [\"bytes\", \"KiB\", \"MiB\", \"GiB\"];\n\tconst index = Math.floor(Math.log(size) / Math.log(1024));\n\n\treturn `${+(size / Math.pow(1024, index)).toPrecision(3)} ${\n\t\tabbreviations[index]\n\t}`;\n};\n"]},"metadata":{},"sourceType":"script"}