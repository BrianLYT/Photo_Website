{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nconst base64VLQ = require(\"./base64-vlq\");\n\nconst util = require(\"./util\");\n\nconst ArraySet = require(\"./array-set\").ArraySet;\n\nconst MappingList = require(\"./mapping-list\").MappingList;\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\n\n\nclass SourceMapGenerator {\n  constructor(aArgs) {\n    if (!aArgs) {\n      aArgs = {};\n    }\n\n    this._file = util.getArg(aArgs, \"file\", null);\n    this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n    this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n  }\n  /**\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.\n   */\n\n\n  static fromSourceMap(aSourceMapConsumer) {\n    const sourceRoot = aSourceMapConsumer.sourceRoot;\n    const generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      const newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      let sourceRelative = sourceFile;\n\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  }\n  /**\n   * Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.\n   */\n\n\n  addMapping(aArgs) {\n    const generated = util.getArg(aArgs, \"generated\");\n    const original = util.getArg(aArgs, \"original\", null);\n    let source = util.getArg(aArgs, \"source\", null);\n    let name = util.getArg(aArgs, \"name\", null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source,\n      name\n    });\n  }\n  /**\n   * Set the source content for a source file.\n   */\n\n\n  setSourceContent(aSourceFile, aSourceContent) {\n    let source = aSourceFile;\n\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  }\n  /**\n   * Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\n   *        This parameter is needed when the two source maps aren't in the same\n   *        directory, and the source map to be applied contains relative source\n   *        paths. If so, those relative source paths need to be rewritten\n   *        relative to the SourceMapGenerator.\n   */\n\n\n  applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    let sourceFile = aSourceFile; // If aSourceFile is omitted, we will use the file property of the SourceMap\n\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\"SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, \" + 'or the source map\\'s \"file\" property. Both were omitted.');\n      }\n\n      sourceFile = aSourceMapConsumer.file;\n    }\n\n    const sourceRoot = this._sourceRoot; // Make \"sourceFile\" relative if an absolute Url is passed.\n\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    } // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n\n\n    const newSources = this._mappings.toArray().length > 0 ? new ArraySet() : this._sources;\n    const newNames = new ArraySet(); // Find mappings for the \"sourceFile\"\n\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        const original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source);\n          }\n\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      const source = mapping.source;\n\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      const name = mapping.name;\n\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n    }, this);\n\n    this._sources = newSources;\n    this._names = newNames; // Copy sourcesContents of applied map.\n\n    aSourceMapConsumer.sources.forEach(function (srcFile) {\n      const content = aSourceMapConsumer.sourceContentFor(srcFile);\n\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          srcFile = util.join(aSourceMapPath, srcFile);\n        }\n\n        if (sourceRoot != null) {\n          srcFile = util.relative(sourceRoot, srcFile);\n        }\n\n        this.setSourceContent(srcFile, content);\n      }\n    }, this);\n  }\n  /**\n   * A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.\n   */\n\n\n  _validateMapping(aGenerated, aOriginal, aSource, aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n      throw new Error(\"original.line and original.column are not numbers -- you probably meant to omit \" + \"the original mapping entirely and only map the generated position. If so, pass \" + \"null for the original mapping instead of an object with empty or null values.\");\n    }\n\n    if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {// Case 1.\n    } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {// Cases 2 and 3.\n    } else {\n      throw new Error(\"Invalid mapping: \" + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  }\n  /**\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.\n   */\n\n\n  _serializeMappings() {\n    let previousGeneratedColumn = 0;\n    let previousGeneratedLine = 1;\n    let previousOriginalColumn = 0;\n    let previousOriginalLine = 0;\n    let previousName = 0;\n    let previousSource = 0;\n    let result = \"\";\n    let next;\n    let mapping;\n    let nameIdx;\n    let sourceIdx;\n\n    const mappings = this._mappings.toArray();\n\n    for (let i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = \"\";\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += \";\";\n          previousGeneratedLine++;\n        }\n      } else if (i > 0) {\n        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n          continue;\n        }\n\n        next += \",\";\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx; // lines are stored 0-based in SourceMap spec version 3\n\n        next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n        next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  }\n\n  _generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n\n      const key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n    }, this);\n  }\n  /**\n   * Externalize the source map.\n   */\n\n\n  toJSON() {\n    const map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n\n    if (this._file != null) {\n      map.file = this._file;\n    }\n\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  }\n  /**\n   * Render the source map being generated to a string.\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n\n}\n\nSourceMapGenerator.prototype._version = 3;\nexports.SourceMapGenerator = SourceMapGenerator;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/terser/node_modules/source-map/lib/source-map-generator.js"],"names":["base64VLQ","require","util","ArraySet","MappingList","SourceMapGenerator","constructor","aArgs","_file","getArg","_sourceRoot","_skipValidation","_sources","_names","_mappings","_sourcesContents","fromSourceMap","aSourceMapConsumer","sourceRoot","generator","file","eachMapping","mapping","newMapping","generated","line","generatedLine","column","generatedColumn","source","relative","original","originalLine","originalColumn","name","addMapping","sources","forEach","sourceFile","sourceRelative","has","add","content","sourceContentFor","setSourceContent","_validateMapping","String","aSourceFile","aSourceContent","Object","create","toSetString","keys","length","applySourceMap","aSourceMapPath","Error","newSources","toArray","newNames","unsortedForEach","originalPositionFor","join","srcFile","aGenerated","aOriginal","aSource","aName","JSON","stringify","_serializeMappings","previousGeneratedColumn","previousGeneratedLine","previousOriginalColumn","previousOriginalLine","previousName","previousSource","result","next","nameIdx","sourceIdx","mappings","i","len","compareByGeneratedPositionsInflated","encode","indexOf","_generateSourcesContent","aSources","aSourceRoot","map","key","prototype","hasOwnProperty","call","toJSON","version","_version","names","sourcesContent","toString","exports"],"mappings":"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","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst util = require(\"./util\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst MappingList = require(\"./mapping-list\").MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nclass SourceMapGenerator {\n  constructor(aArgs) {\n    if (!aArgs) {\n      aArgs = {};\n    }\n    this._file = util.getArg(aArgs, \"file\", null);\n    this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n    this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n  }\n\n  /**\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.\n   */\n  static fromSourceMap(aSourceMapConsumer) {\n    const sourceRoot = aSourceMapConsumer.sourceRoot;\n    const generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      const newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      let sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  }\n\n  /**\n   * Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.\n   */\n  addMapping(aArgs) {\n    const generated = util.getArg(aArgs, \"generated\");\n    const original = util.getArg(aArgs, \"original\", null);\n    let source = util.getArg(aArgs, \"source\", null);\n    let name = util.getArg(aArgs, \"name\", null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source,\n      name\n    });\n  }\n\n  /**\n   * Set the source content for a source file.\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    let source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  }\n\n  /**\n   * Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\n   *        This parameter is needed when the two source maps aren't in the same\n   *        directory, and the source map to be applied contains relative source\n   *        paths. If so, those relative source paths need to be rewritten\n   *        relative to the SourceMapGenerator.\n   */\n  applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    let sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          \"SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, \" +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    const sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    const newSources = this._mappings.toArray().length > 0\n      ? new ArraySet()\n      : this._sources;\n    const newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function(mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        const original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source);\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      const source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      const name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function(srcFile) {\n      const content = aSourceMapConsumer.sourceContentFor(srcFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          srcFile = util.join(aSourceMapPath, srcFile);\n        }\n        if (sourceRoot != null) {\n          srcFile = util.relative(sourceRoot, srcFile);\n        }\n        this.setSourceContent(srcFile, content);\n      }\n    }, this);\n  }\n\n  /**\n   * A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.\n   */\n  _validateMapping(aGenerated, aOriginal, aSource, aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n            \"original.line and original.column are not numbers -- you probably meant to omit \" +\n            \"the original mapping entirely and only map the generated position. If so, pass \" +\n            \"null for the original mapping instead of an object with empty or null values.\"\n        );\n    }\n\n    if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n\n    } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated\n             && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n\n    } else {\n      throw new Error(\"Invalid mapping: \" + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  }\n\n  /**\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.\n   */\n  _serializeMappings() {\n    let previousGeneratedColumn = 0;\n    let previousGeneratedLine = 1;\n    let previousOriginalColumn = 0;\n    let previousOriginalLine = 0;\n    let previousName = 0;\n    let previousSource = 0;\n    let result = \"\";\n    let next;\n    let mapping;\n    let nameIdx;\n    let sourceIdx;\n\n    const mappings = this._mappings.toArray();\n    for (let i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = \"\";\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += \";\";\n          previousGeneratedLine++;\n        }\n      } else if (i > 0) {\n        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n          continue;\n        }\n        next += \",\";\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  }\n\n  _generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function(source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      const key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  }\n\n  /**\n   * Externalize the source map.\n   */\n  toJSON() {\n    const map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  }\n\n  /**\n   * Render the source map being generated to a string.\n   */\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nSourceMapGenerator.prototype._version = 3;\nexports.SourceMapGenerator = SourceMapGenerator;\n"]},"metadata":{},"sourceType":"script"}