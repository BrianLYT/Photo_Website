{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\n\nclass AssetSourceParser extends Parser {\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n  parse(source, state) {\n    if (typeof source === \"object\" && !Buffer.isBuffer(source)) {\n      throw new Error(\"AssetSourceParser doesn't accept preparsed AST\");\n    }\n\n    const {\n      module\n    } = state;\n    module.buildInfo.strict = true;\n    module.buildMeta.exportsType = \"default\";\n    return state;\n  }\n\n}\n\nmodule.exports = AssetSourceParser;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/asset/AssetSourceParser.js"],"names":["Parser","require","AssetSourceParser","parse","source","state","Buffer","isBuffer","Error","module","buildInfo","strict","buildMeta","exportsType","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;AAEA;;AACA;;;AAEA,MAAMC,iBAAN,SAAgCF,MAAhC,CAAuC;AACtC;AACD;AACA;AACA;AACA;AACCG,EAAAA,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgB;AACpB,QAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8B,CAACE,MAAM,CAACC,QAAP,CAAgBH,MAAhB,CAAnC,EAA4D;AAC3D,YAAM,IAAII,KAAJ,CAAU,gDAAV,CAAN;AACA;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAaJ,KAAnB;AACAI,IAAAA,MAAM,CAACC,SAAP,CAAiBC,MAAjB,GAA0B,IAA1B;AACAF,IAAAA,MAAM,CAACG,SAAP,CAAiBC,WAAjB,GAA+B,SAA/B;AAEA,WAAOR,KAAP;AACA;;AAfqC;;AAkBvCI,MAAM,CAACK,OAAP,GAAiBZ,iBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nconst Parser = require(\"../Parser\");\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nclass AssetSourceParser extends Parser {\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tif (typeof source === \"object\" && !Buffer.isBuffer(source)) {\n\t\t\tthrow new Error(\"AssetSourceParser doesn't accept preparsed AST\");\n\t\t}\n\t\tconst { module } = state;\n\t\tmodule.buildInfo.strict = true;\n\t\tmodule.buildMeta.exportsType = \"default\";\n\n\t\treturn state;\n\t}\n}\n\nmodule.exports = AssetSourceParser;\n"]},"metadata":{},"sourceType":"script"}