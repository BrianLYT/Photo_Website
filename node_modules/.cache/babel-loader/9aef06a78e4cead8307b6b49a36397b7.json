{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AddManagedPathsPlugin {\n  /**\n   * @param {Iterable<string | RegExp>} managedPaths list of managed paths\n   * @param {Iterable<string | RegExp>} immutablePaths list of immutable paths\n   */\n  constructor(managedPaths, immutablePaths) {\n    this.managedPaths = new Set(managedPaths);\n    this.immutablePaths = new Set(immutablePaths);\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    for (const managedPath of this.managedPaths) {\n      compiler.managedPaths.add(managedPath);\n    }\n\n    for (const immutablePath of this.immutablePaths) {\n      compiler.immutablePaths.add(immutablePath);\n    }\n  }\n\n}\n\nmodule.exports = AddManagedPathsPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/cache/AddManagedPathsPlugin.js"],"names":["AddManagedPathsPlugin","constructor","managedPaths","immutablePaths","Set","apply","compiler","managedPath","add","immutablePath","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,MAAMA,qBAAN,CAA4B;AAC3B;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,YAAD,EAAeC,cAAf,EAA+B;AACzC,SAAKD,YAAL,GAAoB,IAAIE,GAAJ,CAAQF,YAAR,CAApB;AACA,SAAKC,cAAL,GAAsB,IAAIC,GAAJ,CAAQD,cAAR,CAAtB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCE,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,SAAK,MAAMC,WAAX,IAA0B,KAAKL,YAA/B,EAA6C;AAC5CI,MAAAA,QAAQ,CAACJ,YAAT,CAAsBM,GAAtB,CAA0BD,WAA1B;AACA;;AACD,SAAK,MAAME,aAAX,IAA4B,KAAKN,cAAjC,EAAiD;AAChDG,MAAAA,QAAQ,CAACH,cAAT,CAAwBK,GAAxB,CAA4BC,aAA5B;AACA;AACD;;AAtB0B;;AAyB5BC,MAAM,CAACC,OAAP,GAAiBX,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AddManagedPathsPlugin {\n\t/**\n\t * @param {Iterable<string | RegExp>} managedPaths list of managed paths\n\t * @param {Iterable<string | RegExp>} immutablePaths list of immutable paths\n\t */\n\tconstructor(managedPaths, immutablePaths) {\n\t\tthis.managedPaths = new Set(managedPaths);\n\t\tthis.immutablePaths = new Set(immutablePaths);\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tfor (const managedPath of this.managedPaths) {\n\t\t\tcompiler.managedPaths.add(managedPath);\n\t\t}\n\t\tfor (const immutablePath of this.immutablePaths) {\n\t\t\tcompiler.immutablePaths.add(immutablePath);\n\t\t}\n\t}\n}\n\nmodule.exports = AddManagedPathsPlugin;\n"]},"metadata":{},"sourceType":"script"}