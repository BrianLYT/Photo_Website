{"ast":null,"code":"'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  if (!ajv._opts.$data) {\n    console.warn('keyword select requires $data option');\n    return ajv;\n  }\n\n  var metaSchemaRef = util.metaSchemaRef(ajv);\n  var compiledCaseSchemas = [];\n  defFunc.definition = {\n    validate: function v(schema, data, parentSchema) {\n      if (parentSchema.selectCases === undefined) throw new Error('keyword \"selectCases\" is absent');\n      var compiled = getCompiledSchemas(parentSchema, false);\n      var validate = compiled.cases[schema];\n      if (validate === undefined) validate = compiled.default;\n      if (typeof validate == 'boolean') return validate;\n      var valid = validate(data);\n      if (!valid) v.errors = validate.errors;\n      return valid;\n    },\n    $data: true,\n    metaSchema: {\n      type: ['string', 'number', 'boolean', 'null']\n    }\n  };\n  ajv.addKeyword('select', defFunc.definition);\n  ajv.addKeyword('selectCases', {\n    compile: function (schemas, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n\n      for (var value in schemas) compiled.cases[value] = compileOrBoolean(schemas[value]);\n\n      return function () {\n        return true;\n      };\n    },\n    valid: true,\n    metaSchema: {\n      type: 'object',\n      additionalProperties: metaSchemaRef\n    }\n  });\n  ajv.addKeyword('selectDefault', {\n    compile: function (schema, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n      compiled.default = compileOrBoolean(schema);\n      return function () {\n        return true;\n      };\n    },\n    valid: true,\n    metaSchema: metaSchemaRef\n  });\n  return ajv;\n\n  function getCompiledSchemas(parentSchema, create) {\n    var compiled;\n    compiledCaseSchemas.some(function (c) {\n      if (c.parentSchema === parentSchema) {\n        compiled = c;\n        return true;\n      }\n    });\n\n    if (!compiled && create !== false) {\n      compiled = {\n        parentSchema: parentSchema,\n        cases: {},\n        default: true\n      };\n      compiledCaseSchemas.push(compiled);\n    }\n\n    return compiled;\n  }\n\n  function compileOrBoolean(schema) {\n    return typeof schema == 'boolean' ? schema : ajv.compile(schema);\n  }\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/ajv-keywords/keywords/select.js"],"names":["util","require","module","exports","defFunc","ajv","_opts","$data","console","warn","metaSchemaRef","compiledCaseSchemas","definition","validate","v","schema","data","parentSchema","selectCases","undefined","Error","compiled","getCompiledSchemas","cases","default","valid","errors","metaSchema","type","addKeyword","compile","schemas","value","compileOrBoolean","additionalProperties","create","some","c","push"],"mappings":"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","sourcesContent":["'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  if (!ajv._opts.$data) {\n    console.warn('keyword select requires $data option');\n    return ajv;\n  }\n  var metaSchemaRef = util.metaSchemaRef(ajv);\n  var compiledCaseSchemas = [];\n\n  defFunc.definition = {\n    validate: function v(schema, data, parentSchema) {\n      if (parentSchema.selectCases === undefined)\n        throw new Error('keyword \"selectCases\" is absent');\n      var compiled = getCompiledSchemas(parentSchema, false);\n      var validate = compiled.cases[schema];\n      if (validate === undefined) validate = compiled.default;\n      if (typeof validate == 'boolean') return validate;\n      var valid = validate(data);\n      if (!valid) v.errors = validate.errors;\n      return valid;\n    },\n    $data: true,\n    metaSchema: { type: ['string', 'number', 'boolean', 'null'] }\n  };\n\n  ajv.addKeyword('select', defFunc.definition);\n  ajv.addKeyword('selectCases', {\n    compile: function (schemas, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n      for (var value in schemas)\n        compiled.cases[value] = compileOrBoolean(schemas[value]);\n      return function() { return true; };\n    },\n    valid: true,\n    metaSchema: {\n      type: 'object',\n      additionalProperties: metaSchemaRef\n    }\n  });\n  ajv.addKeyword('selectDefault', {\n    compile: function (schema, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n      compiled.default = compileOrBoolean(schema);\n      return function() { return true; };\n    },\n    valid: true,\n    metaSchema: metaSchemaRef\n  });\n  return ajv;\n\n\n  function getCompiledSchemas(parentSchema, create) {\n    var compiled;\n    compiledCaseSchemas.some(function (c) {\n      if (c.parentSchema === parentSchema) {\n        compiled = c;\n        return true;\n      }\n    });\n    if (!compiled && create !== false) {\n      compiled = {\n        parentSchema: parentSchema,\n        cases: {},\n        default: true\n      };\n      compiledCaseSchemas.push(compiled);\n    }\n    return compiled;\n  }\n\n  function compileOrBoolean(schema) {\n    return typeof schema == 'boolean'\n            ? schema\n            : ajv.compile(schema);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}