{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\"use strict\";\n\nconst {\n  ReplaceSource,\n  RawSource,\n  ConcatSource\n} = require(\"webpack-sources\");\n\nconst {\n  UsageState\n} = require(\"../ExportsInfo\");\n\nconst Generator = require(\"../Generator\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst Template = require(\"../Template\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass CssExportsGenerator extends Generator {\n  constructor() {\n    super();\n  } // TODO add getConcatenationBailoutReason to allow concatenation\n  // but how to make it have a module id\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, generateContext) {\n    const source = new ReplaceSource(new RawSource(\"\"));\n    const initFragments = [];\n    const cssExports = new Map();\n    generateContext.runtimeRequirements.add(RuntimeGlobals.module);\n    const runtimeRequirements = new Set();\n    const templateContext = {\n      runtimeTemplate: generateContext.runtimeTemplate,\n      dependencyTemplates: generateContext.dependencyTemplates,\n      moduleGraph: generateContext.moduleGraph,\n      chunkGraph: generateContext.chunkGraph,\n      module,\n      runtime: generateContext.runtime,\n      runtimeRequirements: runtimeRequirements,\n      concatenationScope: generateContext.concatenationScope,\n      codeGenerationResults: generateContext.codeGenerationResults,\n      initFragments,\n      cssExports\n    };\n\n    const handleDependency = dependency => {\n      const constructor =\n      /** @type {new (...args: any[]) => Dependency} */\n      dependency.constructor;\n      const template = generateContext.dependencyTemplates.get(constructor);\n\n      if (!template) {\n        throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n      }\n\n      template.apply(dependency, source, templateContext);\n    };\n\n    module.dependencies.forEach(handleDependency);\n\n    if (generateContext.concatenationScope) {\n      const source = new ConcatSource();\n      const usedIdentifiers = new Set();\n\n      for (const [k, v] of cssExports) {\n        let identifier = Template.toIdentifier(k);\n        let i = 0;\n\n        while (usedIdentifiers.has(identifier)) {\n          identifier = Template.toIdentifier(k + i);\n        }\n\n        usedIdentifiers.add(identifier);\n        generateContext.concatenationScope.registerExport(k, identifier);\n        source.add(`${generateContext.runtimeTemplate.supportsConst ? \"const\" : \"var\"} ${identifier} = ${JSON.stringify(v)};\\n`);\n      }\n\n      return source;\n    } else {\n      const otherUsed = generateContext.moduleGraph.getExportsInfo(module).otherExportsInfo.getUsed(generateContext.runtime) !== UsageState.Unused;\n\n      if (otherUsed) {\n        generateContext.runtimeRequirements.add(RuntimeGlobals.makeNamespaceObject);\n      }\n\n      return new RawSource(`${otherUsed ? `${RuntimeGlobals.makeNamespaceObject}(` : \"\"}${module.moduleArgument}.exports = {\\n${Array.from(cssExports, _ref => {\n        let [k, v] = _ref;\n        return `\\t${JSON.stringify(k)}: ${JSON.stringify(v)}`;\n      }).join(\",\\n\")}\\n}${otherUsed ? \")\" : \"\"};`);\n    }\n  }\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n\n\n  getTypes(module) {\n    return TYPES;\n  }\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    return 42;\n  }\n  /**\n   * @param {Hash} hash hash that will be modified\n   * @param {UpdateHashContext} updateHashContext context for updating hash\n   */\n\n\n  updateHash(hash, _ref2) {\n    let {\n      module\n    } = _ref2;\n  }\n\n}\n\nmodule.exports = CssExportsGenerator;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/css/CssExportsGenerator.js"],"names":["ReplaceSource","RawSource","ConcatSource","require","UsageState","Generator","RuntimeGlobals","Template","TYPES","Set","CssExportsGenerator","constructor","generate","module","generateContext","source","initFragments","cssExports","Map","runtimeRequirements","add","templateContext","runtimeTemplate","dependencyTemplates","moduleGraph","chunkGraph","runtime","concatenationScope","codeGenerationResults","handleDependency","dependency","template","get","Error","name","apply","dependencies","forEach","usedIdentifiers","k","v","identifier","toIdentifier","i","has","registerExport","supportsConst","JSON","stringify","otherUsed","getExportsInfo","otherExportsInfo","getUsed","Unused","makeNamespaceObject","moduleArgument","Array","from","join","getTypes","getSize","type","updateHash","hash","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { ReplaceSource, RawSource, ConcatSource } = require(\"webpack-sources\");\nconst { UsageState } = require(\"../ExportsInfo\");\nconst Generator = require(\"../Generator\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../Module\").ConcatenationBailoutReasonContext} ConcatenationBailoutReasonContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass CssExportsGenerator extends Generator {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// TODO add getConcatenationBailoutReason to allow concatenation\n\t// but how to make it have a module id\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\tconst source = new ReplaceSource(new RawSource(\"\"));\n\t\tconst initFragments = [];\n\t\tconst cssExports = new Map();\n\n\t\tgenerateContext.runtimeRequirements.add(RuntimeGlobals.module);\n\n\t\tconst runtimeRequirements = new Set();\n\n\t\tconst templateContext = {\n\t\t\truntimeTemplate: generateContext.runtimeTemplate,\n\t\t\tdependencyTemplates: generateContext.dependencyTemplates,\n\t\t\tmoduleGraph: generateContext.moduleGraph,\n\t\t\tchunkGraph: generateContext.chunkGraph,\n\t\t\tmodule,\n\t\t\truntime: generateContext.runtime,\n\t\t\truntimeRequirements: runtimeRequirements,\n\t\t\tconcatenationScope: generateContext.concatenationScope,\n\t\t\tcodeGenerationResults: generateContext.codeGenerationResults,\n\t\t\tinitFragments,\n\t\t\tcssExports\n\t\t};\n\n\t\tconst handleDependency = dependency => {\n\t\t\tconst constructor = /** @type {new (...args: any[]) => Dependency} */ (\n\t\t\t\tdependency.constructor\n\t\t\t);\n\t\t\tconst template = generateContext.dependencyTemplates.get(constructor);\n\t\t\tif (!template) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\ttemplate.apply(dependency, source, templateContext);\n\t\t};\n\t\tmodule.dependencies.forEach(handleDependency);\n\n\t\tif (generateContext.concatenationScope) {\n\t\t\tconst source = new ConcatSource();\n\t\t\tconst usedIdentifiers = new Set();\n\t\t\tfor (const [k, v] of cssExports) {\n\t\t\t\tlet identifier = Template.toIdentifier(k);\n\t\t\t\tlet i = 0;\n\t\t\t\twhile (usedIdentifiers.has(identifier)) {\n\t\t\t\t\tidentifier = Template.toIdentifier(k + i);\n\t\t\t\t}\n\t\t\t\tusedIdentifiers.add(identifier);\n\t\t\t\tgenerateContext.concatenationScope.registerExport(k, identifier);\n\t\t\t\tsource.add(\n\t\t\t\t\t`${\n\t\t\t\t\t\tgenerateContext.runtimeTemplate.supportsConst ? \"const\" : \"var\"\n\t\t\t\t\t} ${identifier} = ${JSON.stringify(v)};\\n`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn source;\n\t\t} else {\n\t\t\tconst otherUsed =\n\t\t\t\tgenerateContext.moduleGraph\n\t\t\t\t\t.getExportsInfo(module)\n\t\t\t\t\t.otherExportsInfo.getUsed(generateContext.runtime) !==\n\t\t\t\tUsageState.Unused;\n\t\t\tif (otherUsed) {\n\t\t\t\tgenerateContext.runtimeRequirements.add(\n\t\t\t\t\tRuntimeGlobals.makeNamespaceObject\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn new RawSource(\n\t\t\t\t`${otherUsed ? `${RuntimeGlobals.makeNamespaceObject}(` : \"\"}${\n\t\t\t\t\tmodule.moduleArgument\n\t\t\t\t}.exports = {\\n${Array.from(\n\t\t\t\t\tcssExports,\n\t\t\t\t\t([k, v]) => `\\t${JSON.stringify(k)}: ${JSON.stringify(v)}`\n\t\t\t\t).join(\",\\n\")}\\n}${otherUsed ? \")\" : \"\"};`\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\treturn 42;\n\t}\n\n\t/**\n\t * @param {Hash} hash hash that will be modified\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\n\t */\n\tupdateHash(hash, { module }) {}\n}\n\nmodule.exports = CssExportsGenerator;\n"]},"metadata":{},"sourceType":"script"}