{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n\nclass ChunkPrefetchTriggerRuntimeModule extends RuntimeModule {\n  /**\n   * @param {Record<string|number, (string|number)[]>} chunkMap map from chunk to\n   */\n  constructor(chunkMap) {\n    super(`chunk prefetch trigger`, RuntimeModule.STAGE_TRIGGER);\n    this.chunkMap = chunkMap;\n  }\n  /**\n   * @returns {string} runtime code\n   */\n\n\n  generate() {\n    const {\n      chunkMap\n    } = this;\n    const {\n      runtimeTemplate\n    } = this.compilation;\n    const body = [\"var chunks = chunkToChildrenMap[chunkId];\", `Array.isArray(chunks) && chunks.map(${RuntimeGlobals.prefetchChunk});`];\n    return Template.asString([Template.asString([`var chunkToChildrenMap = ${JSON.stringify(chunkMap, null, \"\\t\")};`, `${RuntimeGlobals.ensureChunkHandlers}.prefetch = ${runtimeTemplate.expressionFunction(`Promise.all(promises).then(${runtimeTemplate.basicFunction(\"\", body)})`, \"chunkId, promises\")};`])]);\n  }\n\n}\n\nmodule.exports = ChunkPrefetchTriggerRuntimeModule;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/prefetch/ChunkPrefetchTriggerRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","ChunkPrefetchTriggerRuntimeModule","constructor","chunkMap","STAGE_TRIGGER","generate","runtimeTemplate","compilation","body","prefetchChunk","asString","JSON","stringify","ensureChunkHandlers","expressionFunction","basicFunction","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;AAEA;;;AAEA,MAAMG,iCAAN,SAAgDF,aAAhD,CAA8D;AAC7D;AACD;AACA;AACCG,EAAAA,WAAW,CAACC,QAAD,EAAW;AACrB,UAAO,wBAAP,EAAgCJ,aAAa,CAACK,aAA9C;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACA;AAED;AACD;AACA;;;AACCE,EAAAA,QAAQ,GAAG;AACV,UAAM;AAAEF,MAAAA;AAAF,QAAe,IAArB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAsB,KAAKC,WAAjC;AACA,UAAMC,IAAI,GAAG,CACZ,2CADY,EAEX,uCAAsCX,cAAc,CAACY,aAAc,IAFxD,CAAb;AAIA,WAAOT,QAAQ,CAACU,QAAT,CAAkB,CACxBV,QAAQ,CAACU,QAAT,CAAkB,CAChB,4BAA2BC,IAAI,CAACC,SAAL,CAAeT,QAAf,EAAyB,IAAzB,EAA+B,IAA/B,CAAqC,GADhD,EAEhB,GACAN,cAAc,CAACgB,mBACf,eAAcP,eAAe,CAACQ,kBAAhB,CACb,8BAA6BR,eAAe,CAACS,aAAhB,CAC7B,EAD6B,EAE7BP,IAF6B,CAG5B,GAJY,EAKd,mBALc,CAMb,GAVe,CAAlB,CADwB,CAAlB,CAAP;AAcA;;AAjC4D;;AAoC9DQ,MAAM,CAACC,OAAP,GAAiBhB,iCAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\nclass ChunkPrefetchTriggerRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {Record<string|number, (string|number)[]>} chunkMap map from chunk to\n\t */\n\tconstructor(chunkMap) {\n\t\tsuper(`chunk prefetch trigger`, RuntimeModule.STAGE_TRIGGER);\n\t\tthis.chunkMap = chunkMap;\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { chunkMap } = this;\n\t\tconst { runtimeTemplate } = this.compilation;\n\t\tconst body = [\n\t\t\t\"var chunks = chunkToChildrenMap[chunkId];\",\n\t\t\t`Array.isArray(chunks) && chunks.map(${RuntimeGlobals.prefetchChunk});`\n\t\t];\n\t\treturn Template.asString([\n\t\t\tTemplate.asString([\n\t\t\t\t`var chunkToChildrenMap = ${JSON.stringify(chunkMap, null, \"\\t\")};`,\n\t\t\t\t`${\n\t\t\t\t\tRuntimeGlobals.ensureChunkHandlers\n\t\t\t\t}.prefetch = ${runtimeTemplate.expressionFunction(\n\t\t\t\t\t`Promise.all(promises).then(${runtimeTemplate.basicFunction(\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tbody\n\t\t\t\t\t)})`,\n\t\t\t\t\t\"chunkId, promises\"\n\t\t\t\t)};`\n\t\t\t])\n\t\t]);\n\t}\n}\n\nmodule.exports = ChunkPrefetchTriggerRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}