{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\nconst CONTINUATION_BIT = 0x20;\n\nconst createMappingsSerializer = options => {\n  const linesOnly = options && options.columns === false;\n  return linesOnly ? createLinesOnlyMappingsSerializer() : createFullMappingsSerializer();\n};\n\nconst createFullMappingsSerializer = () => {\n  let currentLine = 1;\n  let currentColumn = 0;\n  let currentSourceIndex = 0;\n  let currentOriginalLine = 1;\n  let currentOriginalColumn = 0;\n  let currentNameIndex = 0;\n  let activeMapping = false;\n  let activeName = false;\n  let initial = true;\n  return (generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) => {\n    if (activeMapping && currentLine === generatedLine) {\n      // A mapping is still active\n      if (sourceIndex === currentSourceIndex && originalLine === currentOriginalLine && originalColumn === currentOriginalColumn && !activeName && nameIndex < 0) {\n        // avoid repeating the same original mapping\n        return \"\";\n      }\n    } else {\n      // No mapping is active\n      if (sourceIndex < 0) {\n        // avoid writing unneccessary generated mappings\n        return \"\";\n      }\n    }\n\n    let str;\n\n    if (currentLine < generatedLine) {\n      str = \";\".repeat(generatedLine - currentLine);\n      currentLine = generatedLine;\n      currentColumn = 0;\n      initial = false;\n    } else if (initial) {\n      str = \"\";\n      initial = false;\n    } else {\n      str = \",\";\n    }\n\n    const writeValue = value => {\n      const sign = value >>> 31 & 1;\n      const mask = value >> 31;\n      const absValue = value + mask ^ mask;\n      let data = absValue << 1 | sign;\n\n      for (;;) {\n        const sextet = data & 0x1f;\n        data >>= 5;\n\n        if (data === 0) {\n          str += ALPHABET[sextet];\n          break;\n        } else {\n          str += ALPHABET[sextet | CONTINUATION_BIT];\n        }\n      }\n    };\n\n    writeValue(generatedColumn - currentColumn);\n    currentColumn = generatedColumn;\n\n    if (sourceIndex >= 0) {\n      activeMapping = true;\n\n      if (sourceIndex === currentSourceIndex) {\n        str += \"A\";\n      } else {\n        writeValue(sourceIndex - currentSourceIndex);\n        currentSourceIndex = sourceIndex;\n      }\n\n      writeValue(originalLine - currentOriginalLine);\n      currentOriginalLine = originalLine;\n\n      if (originalColumn === currentOriginalColumn) {\n        str += \"A\";\n      } else {\n        writeValue(originalColumn - currentOriginalColumn);\n        currentOriginalColumn = originalColumn;\n      }\n\n      if (nameIndex >= 0) {\n        writeValue(nameIndex - currentNameIndex);\n        currentNameIndex = nameIndex;\n        activeName = true;\n      } else {\n        activeName = false;\n      }\n    } else {\n      activeMapping = false;\n    }\n\n    return str;\n  };\n};\n\nconst createLinesOnlyMappingsSerializer = () => {\n  let lastWrittenLine = 0;\n  let currentLine = 1;\n  let currentSourceIndex = 0;\n  let currentOriginalLine = 1;\n  return (generatedLine, _generatedColumn, sourceIndex, originalLine, _originalColumn, _nameIndex) => {\n    if (sourceIndex < 0) {\n      // avoid writing generated mappings at all\n      return \"\";\n    }\n\n    if (lastWrittenLine === generatedLine) {\n      // avoid writing multiple original mappings per line\n      return \"\";\n    }\n\n    let str;\n\n    const writeValue = value => {\n      const sign = value >>> 31 & 1;\n      const mask = value >> 31;\n      const absValue = value + mask ^ mask;\n      let data = absValue << 1 | sign;\n\n      for (;;) {\n        const sextet = data & 0x1f;\n        data >>= 5;\n\n        if (data === 0) {\n          str += ALPHABET[sextet];\n          break;\n        } else {\n          str += ALPHABET[sextet | CONTINUATION_BIT];\n        }\n      }\n    };\n\n    lastWrittenLine = generatedLine;\n\n    if (generatedLine === currentLine + 1) {\n      currentLine = generatedLine;\n\n      if (sourceIndex === currentSourceIndex) {\n        currentSourceIndex = sourceIndex;\n\n        if (originalLine === currentOriginalLine + 1) {\n          currentOriginalLine = originalLine;\n          return \";AACA\";\n        } else {\n          str = \";AA\";\n          writeValue(originalLine - currentOriginalLine);\n          currentOriginalLine = originalLine;\n          return str + \"A\";\n        }\n      } else {\n        str = \";A\";\n        writeValue(sourceIndex - currentSourceIndex);\n        currentSourceIndex = sourceIndex;\n        writeValue(originalLine - currentOriginalLine);\n        currentOriginalLine = originalLine;\n        return str + \"A\";\n      }\n    } else {\n      str = \";\".repeat(generatedLine - currentLine);\n      currentLine = generatedLine;\n\n      if (sourceIndex === currentSourceIndex) {\n        currentSourceIndex = sourceIndex;\n\n        if (originalLine === currentOriginalLine + 1) {\n          currentOriginalLine = originalLine;\n          return str + \"AACA\";\n        } else {\n          str += \"AA\";\n          writeValue(originalLine - currentOriginalLine);\n          currentOriginalLine = originalLine;\n          return str + \"A\";\n        }\n      } else {\n        str += \"A\";\n        writeValue(sourceIndex - currentSourceIndex);\n        currentSourceIndex = sourceIndex;\n        writeValue(originalLine - currentOriginalLine);\n        currentOriginalLine = originalLine;\n        return str + \"A\";\n      }\n    }\n  };\n};\n\nmodule.exports = createMappingsSerializer;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack-sources/lib/helpers/createMappingsSerializer.js"],"names":["ALPHABET","split","CONTINUATION_BIT","createMappingsSerializer","options","linesOnly","columns","createLinesOnlyMappingsSerializer","createFullMappingsSerializer","currentLine","currentColumn","currentSourceIndex","currentOriginalLine","currentOriginalColumn","currentNameIndex","activeMapping","activeName","initial","generatedLine","generatedColumn","sourceIndex","originalLine","originalColumn","nameIndex","str","repeat","writeValue","value","sign","mask","absValue","data","sextet","lastWrittenLine","_generatedColumn","_originalColumn","_nameIndex","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\n\t\"\"\n);\n\nconst CONTINUATION_BIT = 0x20;\n\nconst createMappingsSerializer = options => {\n\tconst linesOnly = options && options.columns === false;\n\treturn linesOnly\n\t\t? createLinesOnlyMappingsSerializer()\n\t\t: createFullMappingsSerializer();\n};\n\nconst createFullMappingsSerializer = () => {\n\tlet currentLine = 1;\n\tlet currentColumn = 0;\n\tlet currentSourceIndex = 0;\n\tlet currentOriginalLine = 1;\n\tlet currentOriginalColumn = 0;\n\tlet currentNameIndex = 0;\n\tlet activeMapping = false;\n\tlet activeName = false;\n\tlet initial = true;\n\treturn (\n\t\tgeneratedLine,\n\t\tgeneratedColumn,\n\t\tsourceIndex,\n\t\toriginalLine,\n\t\toriginalColumn,\n\t\tnameIndex\n\t) => {\n\t\tif (activeMapping && currentLine === generatedLine) {\n\t\t\t// A mapping is still active\n\t\t\tif (\n\t\t\t\tsourceIndex === currentSourceIndex &&\n\t\t\t\toriginalLine === currentOriginalLine &&\n\t\t\t\toriginalColumn === currentOriginalColumn &&\n\t\t\t\t!activeName &&\n\t\t\t\tnameIndex < 0\n\t\t\t) {\n\t\t\t\t// avoid repeating the same original mapping\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t} else {\n\t\t\t// No mapping is active\n\t\t\tif (sourceIndex < 0) {\n\t\t\t\t// avoid writing unneccessary generated mappings\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t}\n\n\t\tlet str;\n\t\tif (currentLine < generatedLine) {\n\t\t\tstr = \";\".repeat(generatedLine - currentLine);\n\t\t\tcurrentLine = generatedLine;\n\t\t\tcurrentColumn = 0;\n\t\t\tinitial = false;\n\t\t} else if (initial) {\n\t\t\tstr = \"\";\n\t\t\tinitial = false;\n\t\t} else {\n\t\t\tstr = \",\";\n\t\t}\n\n\t\tconst writeValue = value => {\n\t\t\tconst sign = (value >>> 31) & 1;\n\t\t\tconst mask = value >> 31;\n\t\t\tconst absValue = (value + mask) ^ mask;\n\t\t\tlet data = (absValue << 1) | sign;\n\t\t\tfor (;;) {\n\t\t\t\tconst sextet = data & 0x1f;\n\t\t\t\tdata >>= 5;\n\t\t\t\tif (data === 0) {\n\t\t\t\t\tstr += ALPHABET[sextet];\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tstr += ALPHABET[sextet | CONTINUATION_BIT];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\twriteValue(generatedColumn - currentColumn);\n\t\tcurrentColumn = generatedColumn;\n\t\tif (sourceIndex >= 0) {\n\t\t\tactiveMapping = true;\n\t\t\tif (sourceIndex === currentSourceIndex) {\n\t\t\t\tstr += \"A\";\n\t\t\t} else {\n\t\t\t\twriteValue(sourceIndex - currentSourceIndex);\n\t\t\t\tcurrentSourceIndex = sourceIndex;\n\t\t\t}\n\t\t\twriteValue(originalLine - currentOriginalLine);\n\t\t\tcurrentOriginalLine = originalLine;\n\t\t\tif (originalColumn === currentOriginalColumn) {\n\t\t\t\tstr += \"A\";\n\t\t\t} else {\n\t\t\t\twriteValue(originalColumn - currentOriginalColumn);\n\t\t\t\tcurrentOriginalColumn = originalColumn;\n\t\t\t}\n\t\t\tif (nameIndex >= 0) {\n\t\t\t\twriteValue(nameIndex - currentNameIndex);\n\t\t\t\tcurrentNameIndex = nameIndex;\n\t\t\t\tactiveName = true;\n\t\t\t} else {\n\t\t\t\tactiveName = false;\n\t\t\t}\n\t\t} else {\n\t\t\tactiveMapping = false;\n\t\t}\n\t\treturn str;\n\t};\n};\n\nconst createLinesOnlyMappingsSerializer = () => {\n\tlet lastWrittenLine = 0;\n\tlet currentLine = 1;\n\tlet currentSourceIndex = 0;\n\tlet currentOriginalLine = 1;\n\treturn (\n\t\tgeneratedLine,\n\t\t_generatedColumn,\n\t\tsourceIndex,\n\t\toriginalLine,\n\t\t_originalColumn,\n\t\t_nameIndex\n\t) => {\n\t\tif (sourceIndex < 0) {\n\t\t\t// avoid writing generated mappings at all\n\t\t\treturn \"\";\n\t\t}\n\t\tif (lastWrittenLine === generatedLine) {\n\t\t\t// avoid writing multiple original mappings per line\n\t\t\treturn \"\";\n\t\t}\n\t\tlet str;\n\t\tconst writeValue = value => {\n\t\t\tconst sign = (value >>> 31) & 1;\n\t\t\tconst mask = value >> 31;\n\t\t\tconst absValue = (value + mask) ^ mask;\n\t\t\tlet data = (absValue << 1) | sign;\n\t\t\tfor (;;) {\n\t\t\t\tconst sextet = data & 0x1f;\n\t\t\t\tdata >>= 5;\n\t\t\t\tif (data === 0) {\n\t\t\t\t\tstr += ALPHABET[sextet];\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tstr += ALPHABET[sextet | CONTINUATION_BIT];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tlastWrittenLine = generatedLine;\n\t\tif (generatedLine === currentLine + 1) {\n\t\t\tcurrentLine = generatedLine;\n\t\t\tif (sourceIndex === currentSourceIndex) {\n\t\t\t\tcurrentSourceIndex = sourceIndex;\n\t\t\t\tif (originalLine === currentOriginalLine + 1) {\n\t\t\t\t\tcurrentOriginalLine = originalLine;\n\t\t\t\t\treturn \";AACA\";\n\t\t\t\t} else {\n\t\t\t\t\tstr = \";AA\";\n\t\t\t\t\twriteValue(originalLine - currentOriginalLine);\n\t\t\t\t\tcurrentOriginalLine = originalLine;\n\t\t\t\t\treturn str + \"A\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = \";A\";\n\t\t\t\twriteValue(sourceIndex - currentSourceIndex);\n\t\t\t\tcurrentSourceIndex = sourceIndex;\n\t\t\t\twriteValue(originalLine - currentOriginalLine);\n\t\t\t\tcurrentOriginalLine = originalLine;\n\t\t\t\treturn str + \"A\";\n\t\t\t}\n\t\t} else {\n\t\t\tstr = \";\".repeat(generatedLine - currentLine);\n\t\t\tcurrentLine = generatedLine;\n\t\t\tif (sourceIndex === currentSourceIndex) {\n\t\t\t\tcurrentSourceIndex = sourceIndex;\n\t\t\t\tif (originalLine === currentOriginalLine + 1) {\n\t\t\t\t\tcurrentOriginalLine = originalLine;\n\t\t\t\t\treturn str + \"AACA\";\n\t\t\t\t} else {\n\t\t\t\t\tstr += \"AA\";\n\t\t\t\t\twriteValue(originalLine - currentOriginalLine);\n\t\t\t\t\tcurrentOriginalLine = originalLine;\n\t\t\t\t\treturn str + \"A\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr += \"A\";\n\t\t\t\twriteValue(sourceIndex - currentSourceIndex);\n\t\t\t\tcurrentSourceIndex = sourceIndex;\n\t\t\t\twriteValue(originalLine - currentOriginalLine);\n\t\t\t\tcurrentOriginalLine = originalLine;\n\t\t\t\treturn str + \"A\";\n\t\t\t}\n\t\t}\n\t};\n};\n\nmodule.exports = createMappingsSerializer;\n"]},"metadata":{},"sourceType":"script"}