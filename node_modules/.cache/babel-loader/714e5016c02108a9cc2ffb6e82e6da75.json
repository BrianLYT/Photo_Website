{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst NullDependency = require(\"./NullDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n\nclass UnsupportedDependency extends NullDependency {\n  constructor(request, range) {\n    super();\n    this.request = request;\n    this.range = range;\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.request);\n    write(this.range);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.request = read();\n    this.range = read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(UnsupportedDependency, \"webpack/lib/dependencies/UnsupportedDependency\");\nUnsupportedDependency.Template = class UnsupportedDependencyTemplate extends NullDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, _ref) {\n    let {\n      runtimeTemplate\n    } = _ref;\n    const dep =\n    /** @type {UnsupportedDependency} */\n    dependency;\n    source.replace(dep.range[0], dep.range[1], runtimeTemplate.missingModule({\n      request: dep.request\n    }));\n  }\n\n};\nmodule.exports = UnsupportedDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/UnsupportedDependency.js"],"names":["makeSerializable","require","NullDependency","UnsupportedDependency","constructor","request","range","serialize","context","write","deserialize","read","Template","UnsupportedDependencyTemplate","apply","dependency","source","runtimeTemplate","dep","replace","missingModule","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;AAEA;;AACA;;AACA;;;AAEA,MAAME,qBAAN,SAAoCD,cAApC,CAAmD;AAClDE,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiB;AAC3B;AAEA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAU;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,OAAlB;AAEAC,IAAAA,KAAK,CAAC,KAAKJ,OAAN,CAAL;AACAI,IAAAA,KAAK,CAAC,KAAKH,KAAN,CAAL;AAEA,UAAMC,SAAN,CAAgBC,OAAhB;AACA;;AAEDE,EAAAA,WAAW,CAACF,OAAD,EAAU;AACpB,UAAM;AAAEG,MAAAA;AAAF,QAAWH,OAAjB;AAEA,SAAKH,OAAL,GAAeM,IAAI,EAAnB;AACA,SAAKL,KAAL,GAAaK,IAAI,EAAjB;AAEA,UAAMD,WAAN,CAAkBF,OAAlB;AACA;;AAxBiD;;AA2BnDR,gBAAgB,CACfG,qBADe,EAEf,gDAFe,CAAhB;AAKAA,qBAAqB,CAACS,QAAtB,GAAiC,MAAMC,6BAAN,SAChCX,cAAc,CAACU,QADiB,CAE/B;AACD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,KAAK,CAACC,UAAD,EAAaC,MAAb,QAA0C;AAAA,QAArB;AAAEC,MAAAA;AAAF,KAAqB;AAC9C,UAAMC,GAAG;AAAG;AAAsCH,IAAAA,UAAlD;AAEAC,IAAAA,MAAM,CAACG,OAAP,CACCD,GAAG,CAACZ,KAAJ,CAAU,CAAV,CADD,EAECY,GAAG,CAACZ,KAAJ,CAAU,CAAV,CAFD,EAGCW,eAAe,CAACG,aAAhB,CAA8B;AAC7Bf,MAAAA,OAAO,EAAEa,GAAG,CAACb;AADgB,KAA9B,CAHD;AAOA;;AAjBA,CAFF;AAsBAgB,MAAM,CAACC,OAAP,GAAiBnB,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass UnsupportedDependency extends NullDependency {\n\tconstructor(request, range) {\n\t\tsuper();\n\n\t\tthis.request = request;\n\t\tthis.range = range;\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.request);\n\t\twrite(this.range);\n\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\n\t\tthis.request = read();\n\t\tthis.range = read();\n\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tUnsupportedDependency,\n\t\"webpack/lib/dependencies/UnsupportedDependency\"\n);\n\nUnsupportedDependency.Template = class UnsupportedDependencyTemplate extends (\n\tNullDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, { runtimeTemplate }) {\n\t\tconst dep = /** @type {UnsupportedDependency} */ (dependency);\n\n\t\tsource.replace(\n\t\t\tdep.range[0],\n\t\t\tdep.range[1],\n\t\t\truntimeTemplate.missingModule({\n\t\t\t\trequest: dep.request\n\t\t\t})\n\t\t);\n\t}\n};\n\nmodule.exports = UnsupportedDependency;\n"]},"metadata":{},"sourceType":"script"}