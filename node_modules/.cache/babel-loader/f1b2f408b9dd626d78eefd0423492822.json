{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../../declarations/WebpackOptions\").ChunkLoadingType} ChunkLoadingType */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<ChunkLoadingType>>} */\n\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n  let set = enabledTypes.get(compiler);\n\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n\n  return set;\n};\n\nclass EnableChunkLoadingPlugin {\n  /**\n   * @param {ChunkLoadingType} type library type that should be available\n   */\n  constructor(type) {\n    this.type = type;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {ChunkLoadingType} type type of library\n   * @returns {void}\n   */\n\n\n  static setEnabled(compiler, type) {\n    getEnabledTypes(compiler).add(type);\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {ChunkLoadingType} type type of library\n   * @returns {void}\n   */\n\n\n  static checkEnabled(compiler, type) {\n    if (!getEnabledTypes(compiler).has(type)) {\n      throw new Error(`Chunk loading type \"${type}\" is not enabled. ` + \"EnableChunkLoadingPlugin need to be used to enable this type of chunk loading. \" + 'This usually happens through the \"output.enabledChunkLoadingTypes\" option. ' + 'If you are using a function as entry which sets \"chunkLoading\", you need to add all potential chunk loading types to \"output.enabledChunkLoadingTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n    }\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const {\n      type\n    } = this; // Only enable once\n\n    const enabled = getEnabledTypes(compiler);\n    if (enabled.has(type)) return;\n    enabled.add(type);\n\n    if (typeof type === \"string\") {\n      switch (type) {\n        case \"jsonp\":\n          {\n            const JsonpChunkLoadingPlugin = require(\"../web/JsonpChunkLoadingPlugin\");\n\n            new JsonpChunkLoadingPlugin().apply(compiler);\n            break;\n          }\n\n        case \"import-scripts\":\n          {\n            const ImportScriptsChunkLoadingPlugin = require(\"../webworker/ImportScriptsChunkLoadingPlugin\");\n\n            new ImportScriptsChunkLoadingPlugin().apply(compiler);\n            break;\n          }\n\n        case \"require\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\n            new CommonJsChunkLoadingPlugin({\n              asyncChunkLoading: false\n            }).apply(compiler);\n            break;\n          }\n\n        case \"async-node\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\n            new CommonJsChunkLoadingPlugin({\n              asyncChunkLoading: true\n            }).apply(compiler);\n            break;\n          }\n\n        case \"import\":\n          {\n            const ModuleChunkLoadingPlugin = require(\"../esm/ModuleChunkLoadingPlugin\");\n\n            new ModuleChunkLoadingPlugin().apply(compiler);\n            break;\n          }\n\n        case \"universal\":\n          // TODO implement universal chunk loading\n          throw new Error(\"Universal Chunk Loading is not implemented yet\");\n\n        default:\n          throw new Error(`Unsupported chunk loading type ${type}.\nPlugins which provide custom chunk loading types must call EnableChunkLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n      }\n    } else {// TODO support plugin instances here\n      // apply them to the compiler\n    }\n  }\n\n}\n\nmodule.exports = EnableChunkLoadingPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/javascript/EnableChunkLoadingPlugin.js"],"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableChunkLoadingPlugin","constructor","type","setEnabled","add","checkEnabled","has","Error","Array","from","join","apply","enabled","JsonpChunkLoadingPlugin","require","ImportScriptsChunkLoadingPlugin","CommonJsChunkLoadingPlugin","asyncChunkLoading","ModuleChunkLoadingPlugin","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ChunkLoadingType} ChunkLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<ChunkLoadingType>>} */\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n\tlet set = enabledTypes.get(compiler);\n\tif (set === undefined) {\n\t\tset = new Set();\n\t\tenabledTypes.set(compiler, set);\n\t}\n\treturn set;\n};\n\nclass EnableChunkLoadingPlugin {\n\t/**\n\t * @param {ChunkLoadingType} type library type that should be available\n\t */\n\tconstructor(type) {\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {ChunkLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic setEnabled(compiler, type) {\n\t\tgetEnabledTypes(compiler).add(type);\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {ChunkLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic checkEnabled(compiler, type) {\n\t\tif (!getEnabledTypes(compiler).has(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Chunk loading type \"${type}\" is not enabled. ` +\n\t\t\t\t\t\"EnableChunkLoadingPlugin need to be used to enable this type of chunk loading. \" +\n\t\t\t\t\t'This usually happens through the \"output.enabledChunkLoadingTypes\" option. ' +\n\t\t\t\t\t'If you are using a function as entry which sets \"chunkLoading\", you need to add all potential chunk loading types to \"output.enabledChunkLoadingTypes\". ' +\n\t\t\t\t\t\"These types are enabled: \" +\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { type } = this;\n\n\t\t// Only enable once\n\t\tconst enabled = getEnabledTypes(compiler);\n\t\tif (enabled.has(type)) return;\n\t\tenabled.add(type);\n\n\t\tif (typeof type === \"string\") {\n\t\t\tswitch (type) {\n\t\t\t\tcase \"jsonp\": {\n\t\t\t\t\tconst JsonpChunkLoadingPlugin = require(\"../web/JsonpChunkLoadingPlugin\");\n\t\t\t\t\tnew JsonpChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"import-scripts\": {\n\t\t\t\t\tconst ImportScriptsChunkLoadingPlugin = require(\"../webworker/ImportScriptsChunkLoadingPlugin\");\n\t\t\t\t\tnew ImportScriptsChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"require\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\t\t\t\t\tnew CommonJsChunkLoadingPlugin({\n\t\t\t\t\t\tasyncChunkLoading: false\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"async-node\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\t\t\t\t\tnew CommonJsChunkLoadingPlugin({\n\t\t\t\t\t\tasyncChunkLoading: true\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"import\": {\n\t\t\t\t\tconst ModuleChunkLoadingPlugin = require(\"../esm/ModuleChunkLoadingPlugin\");\n\t\t\t\t\tnew ModuleChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"universal\":\n\t\t\t\t\t// TODO implement universal chunk loading\n\t\t\t\t\tthrow new Error(\"Universal Chunk Loading is not implemented yet\");\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported chunk loading type ${type}.\nPlugins which provide custom chunk loading types must call EnableChunkLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO support plugin instances here\n\t\t\t// apply them to the compiler\n\t\t}\n\t}\n}\n\nmodule.exports = EnableChunkLoadingPlugin;\n"]},"metadata":{},"sourceType":"script"}