{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst ModuleDependency = require(\"./ModuleDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nclass WorkerDependency extends ModuleDependency {\n  /**\n   * @param {string} request request\n   * @param {[number, number]} range range\n   */\n  constructor(request, range) {\n    super(request);\n    this.range = range;\n  }\n  /**\n   * Returns list of exports referenced by this dependency\n   * @param {ModuleGraph} moduleGraph module graph\n   * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n   * @returns {(string[] | ReferencedExport)[]} referenced exports\n   */\n\n\n  getReferencedExports(moduleGraph, runtime) {\n    return Dependency.NO_EXPORTS_REFERENCED;\n  }\n\n  get type() {\n    return \"new Worker()\";\n  }\n\n  get category() {\n    return \"worker\";\n  }\n\n}\n\nWorkerDependency.Template = class WorkerDependencyTemplate extends ModuleDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const {\n      chunkGraph,\n      moduleGraph,\n      runtimeRequirements\n    } = templateContext;\n    const dep =\n    /** @type {WorkerDependency} */\n    dependency;\n    const block =\n    /** @type {AsyncDependenciesBlock} */\n    moduleGraph.getParentBlock(dependency);\n    const entrypoint =\n    /** @type {Entrypoint} */\n    chunkGraph.getBlockChunkGroup(block);\n    const chunk = entrypoint.getEntrypointChunk();\n    runtimeRequirements.add(RuntimeGlobals.publicPath);\n    runtimeRequirements.add(RuntimeGlobals.baseURI);\n    runtimeRequirements.add(RuntimeGlobals.getChunkScriptFilename);\n    source.replace(dep.range[0], dep.range[1] - 1, `/* worker import */ ${RuntimeGlobals.publicPath} + ${RuntimeGlobals.getChunkScriptFilename}(${JSON.stringify(chunk.id)}), ${RuntimeGlobals.baseURI}`);\n  }\n\n};\nmakeSerializable(WorkerDependency, \"webpack/lib/dependencies/WorkerDependency\");\nmodule.exports = WorkerDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/WorkerDependency.js"],"names":["Dependency","require","RuntimeGlobals","makeSerializable","ModuleDependency","WorkerDependency","constructor","request","range","getReferencedExports","moduleGraph","runtime","NO_EXPORTS_REFERENCED","type","category","Template","WorkerDependencyTemplate","apply","dependency","source","templateContext","chunkGraph","runtimeRequirements","dep","block","getParentBlock","entrypoint","getBlockChunkGroup","chunk","getEntrypointChunk","add","publicPath","baseURI","getChunkScriptFilename","replace","JSON","stringify","id","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAAhC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMI,gBAAN,SAA+BD,gBAA/B,CAAgD;AAC/C;AACD;AACA;AACA;AACCE,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiB;AAC3B,UAAMD,OAAN;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,oBAAoB,CAACC,WAAD,EAAcC,OAAd,EAAuB;AAC1C,WAAOX,UAAU,CAACY,qBAAlB;AACA;;AAEO,MAAJC,IAAI,GAAG;AACV,WAAO,cAAP;AACA;;AAEW,MAARC,QAAQ,GAAG;AACd,WAAO,QAAP;AACA;;AA1B8C;;AA6BhDT,gBAAgB,CAACU,QAAjB,GAA4B,MAAMC,wBAAN,SAC3BZ,gBAAgB,CAACW,QADU,CAE1B;AACD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,KAAK,CAACC,UAAD,EAAaC,MAAb,EAAqBC,eAArB,EAAsC;AAC1C,UAAM;AAAEC,MAAAA,UAAF;AAAcX,MAAAA,WAAd;AAA2BY,MAAAA;AAA3B,QAAmDF,eAAzD;AACA,UAAMG,GAAG;AAAG;AAAiCL,IAAAA,UAA7C;AACA,UAAMM,KAAK;AAAG;AACbd,IAAAA,WAAW,CAACe,cAAZ,CAA2BP,UAA3B,CADD;AAGA,UAAMQ,UAAU;AAAG;AAClBL,IAAAA,UAAU,CAACM,kBAAX,CAA8BH,KAA9B,CADD;AAGA,UAAMI,KAAK,GAAGF,UAAU,CAACG,kBAAX,EAAd;AAEAP,IAAAA,mBAAmB,CAACQ,GAApB,CAAwB5B,cAAc,CAAC6B,UAAvC;AACAT,IAAAA,mBAAmB,CAACQ,GAApB,CAAwB5B,cAAc,CAAC8B,OAAvC;AACAV,IAAAA,mBAAmB,CAACQ,GAApB,CAAwB5B,cAAc,CAAC+B,sBAAvC;AAEAd,IAAAA,MAAM,CAACe,OAAP,CACCX,GAAG,CAACf,KAAJ,CAAU,CAAV,CADD,EAECe,GAAG,CAACf,KAAJ,CAAU,CAAV,IAAe,CAFhB,EAGE,uBAAsBN,cAAc,CAAC6B,UAAW,MAChD7B,cAAc,CAAC+B,sBACf,IAAGE,IAAI,CAACC,SAAL,CAAeR,KAAK,CAACS,EAArB,CAAyB,MAAKnC,cAAc,CAAC8B,OAAQ,EAL1D;AAOA;;AA7BA,CAFF;AAkCA7B,gBAAgB,CAACE,gBAAD,EAAmB,2CAAnB,CAAhB;AAEAiC,MAAM,CAACC,OAAP,GAAiBlC,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nclass WorkerDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request request\n\t * @param {[number, number]} range range\n\t */\n\tconstructor(request, range) {\n\t\tsuper(request);\n\t\tthis.range = range;\n\t}\n\n\t/**\n\t * Returns list of exports referenced by this dependency\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n\t * @returns {(string[] | ReferencedExport)[]} referenced exports\n\t */\n\tgetReferencedExports(moduleGraph, runtime) {\n\t\treturn Dependency.NO_EXPORTS_REFERENCED;\n\t}\n\n\tget type() {\n\t\treturn \"new Worker()\";\n\t}\n\n\tget category() {\n\t\treturn \"worker\";\n\t}\n}\n\nWorkerDependency.Template = class WorkerDependencyTemplate extends (\n\tModuleDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst { chunkGraph, moduleGraph, runtimeRequirements } = templateContext;\n\t\tconst dep = /** @type {WorkerDependency} */ (dependency);\n\t\tconst block = /** @type {AsyncDependenciesBlock} */ (\n\t\t\tmoduleGraph.getParentBlock(dependency)\n\t\t);\n\t\tconst entrypoint = /** @type {Entrypoint} */ (\n\t\t\tchunkGraph.getBlockChunkGroup(block)\n\t\t);\n\t\tconst chunk = entrypoint.getEntrypointChunk();\n\n\t\truntimeRequirements.add(RuntimeGlobals.publicPath);\n\t\truntimeRequirements.add(RuntimeGlobals.baseURI);\n\t\truntimeRequirements.add(RuntimeGlobals.getChunkScriptFilename);\n\n\t\tsource.replace(\n\t\t\tdep.range[0],\n\t\t\tdep.range[1] - 1,\n\t\t\t`/* worker import */ ${RuntimeGlobals.publicPath} + ${\n\t\t\t\tRuntimeGlobals.getChunkScriptFilename\n\t\t\t}(${JSON.stringify(chunk.id)}), ${RuntimeGlobals.baseURI}`\n\t\t);\n\t}\n};\n\nmakeSerializable(WorkerDependency, \"webpack/lib/dependencies/WorkerDependency\");\n\nmodule.exports = WorkerDependency;\n"]},"metadata":{},"sourceType":"script"}