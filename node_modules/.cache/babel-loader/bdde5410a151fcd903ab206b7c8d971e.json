{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n\nconst ExternalModule = require(\"../ExternalModule\");\n\nconst Template = require(\"../Template\");\n\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} AmdLibraryPluginOptions\n * @property {LibraryType} type\n * @property {boolean=} requireAsWrapper\n */\n\n/**\n * @typedef {Object} AmdLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {AmdLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<AmdLibraryPluginParsed>}\n */\n\n\nclass AmdLibraryPlugin extends AbstractLibraryPlugin {\n  /**\n   * @param {AmdLibraryPluginOptions} options the plugin options\n   */\n  constructor(options) {\n    super({\n      pluginName: \"AmdLibraryPlugin\",\n      type: options.type\n    });\n    this.requireAsWrapper = options.requireAsWrapper;\n  }\n  /**\n   * @param {LibraryOptions} library normalized library option\n   * @returns {T | false} preprocess as needed by overriding\n   */\n\n\n  parseOptions(library) {\n    const {\n      name\n    } = library;\n\n    if (this.requireAsWrapper) {\n      if (name) {\n        throw new Error(`AMD library name must be unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`);\n      }\n    } else {\n      if (name && typeof name !== \"string\") {\n        throw new Error(`AMD library name must be a simple string or unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`);\n      }\n    }\n\n    return {\n      name:\n      /** @type {string=} */\n      name\n    };\n  }\n  /**\n   * @param {Source} source source\n   * @param {RenderContext} renderContext render context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {Source} source with library export\n   */\n\n\n  render(source, _ref, _ref2) {\n    let {\n      chunkGraph,\n      chunk,\n      runtimeTemplate\n    } = _ref;\n    let {\n      options,\n      compilation\n    } = _ref2;\n    const modern = runtimeTemplate.supportsArrowFunction();\n    const modules = chunkGraph.getChunkModules(chunk).filter(m => m instanceof ExternalModule);\n    const externals =\n    /** @type {ExternalModule[]} */\n    modules;\n    const externalsDepsArray = JSON.stringify(externals.map(m => typeof m.request === \"object\" && !Array.isArray(m.request) ? m.request.amd : m.request));\n    const externalsArguments = externals.map(m => `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${chunkGraph.getModuleId(m)}`)}__`).join(\", \");\n    const iife = runtimeTemplate.isIIFE();\n    const fnStart = (modern ? `(${externalsArguments}) => {` : `function(${externalsArguments}) {`) + (iife || !chunk.hasRuntime() ? \" return \" : \"\\n\");\n    const fnEnd = iife ? \";\\n}\" : \"\\n}\";\n\n    if (this.requireAsWrapper) {\n      return new ConcatSource(`require(${externalsDepsArray}, ${fnStart}`, source, `${fnEnd});`);\n    } else if (options.name) {\n      const name = compilation.getPath(options.name, {\n        chunk\n      });\n      return new ConcatSource(`define(${JSON.stringify(name)}, ${externalsDepsArray}, ${fnStart}`, source, `${fnEnd});`);\n    } else if (externalsArguments) {\n      return new ConcatSource(`define(${externalsDepsArray}, ${fnStart}`, source, `${fnEnd});`);\n    } else {\n      return new ConcatSource(`define(${fnStart}`, source, `${fnEnd});`);\n    }\n  }\n  /**\n   * @param {Chunk} chunk the chunk\n   * @param {Hash} hash hash\n   * @param {ChunkHashContext} chunkHashContext chunk hash context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {void}\n   */\n\n\n  chunkHash(chunk, hash, chunkHashContext, _ref3) {\n    let {\n      options,\n      compilation\n    } = _ref3;\n    hash.update(\"AmdLibraryPlugin\");\n\n    if (this.requireAsWrapper) {\n      hash.update(\"requireAsWrapper\");\n    } else if (options.name) {\n      hash.update(\"named\");\n      const name = compilation.getPath(options.name, {\n        chunk\n      });\n      hash.update(name);\n    }\n  }\n\n}\n\nmodule.exports = AmdLibraryPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/library/AmdLibraryPlugin.js"],"names":["ConcatSource","require","ExternalModule","Template","AbstractLibraryPlugin","AmdLibraryPlugin","constructor","options","pluginName","type","requireAsWrapper","parseOptions","library","name","Error","COMMON_LIBRARY_NAME_MESSAGE","render","source","chunkGraph","chunk","runtimeTemplate","compilation","modern","supportsArrowFunction","modules","getChunkModules","filter","m","externals","externalsDepsArray","JSON","stringify","map","request","Array","isArray","amd","externalsArguments","toIdentifier","getModuleId","join","iife","isIIFE","fnStart","hasRuntime","fnEnd","getPath","chunkHash","hash","chunkHashContext","update","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst ExternalModule = require(\"../ExternalModule\");\nconst Template = require(\"../Template\");\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} AmdLibraryPluginOptions\n * @property {LibraryType} type\n * @property {boolean=} requireAsWrapper\n */\n\n/**\n * @typedef {Object} AmdLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {AmdLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<AmdLibraryPluginParsed>}\n */\nclass AmdLibraryPlugin extends AbstractLibraryPlugin {\n\t/**\n\t * @param {AmdLibraryPluginOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tsuper({\n\t\t\tpluginName: \"AmdLibraryPlugin\",\n\t\t\ttype: options.type\n\t\t});\n\t\tthis.requireAsWrapper = options.requireAsWrapper;\n\t}\n\n\t/**\n\t * @param {LibraryOptions} library normalized library option\n\t * @returns {T | false} preprocess as needed by overriding\n\t */\n\tparseOptions(library) {\n\t\tconst { name } = library;\n\t\tif (this.requireAsWrapper) {\n\t\t\tif (name) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`AMD library name must be unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (name && typeof name !== \"string\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`AMD library name must be a simple string or unset. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tname: /** @type {string=} */ (name)\n\t\t};\n\t}\n\n\t/**\n\t * @param {Source} source source\n\t * @param {RenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {Source} source with library export\n\t */\n\trender(\n\t\tsource,\n\t\t{ chunkGraph, chunk, runtimeTemplate },\n\t\t{ options, compilation }\n\t) {\n\t\tconst modern = runtimeTemplate.supportsArrowFunction();\n\t\tconst modules = chunkGraph\n\t\t\t.getChunkModules(chunk)\n\t\t\t.filter(m => m instanceof ExternalModule);\n\t\tconst externals = /** @type {ExternalModule[]} */ (modules);\n\t\tconst externalsDepsArray = JSON.stringify(\n\t\t\texternals.map(m =>\n\t\t\t\ttypeof m.request === \"object\" && !Array.isArray(m.request)\n\t\t\t\t\t? m.request.amd\n\t\t\t\t\t: m.request\n\t\t\t)\n\t\t);\n\t\tconst externalsArguments = externals\n\t\t\t.map(\n\t\t\t\tm =>\n\t\t\t\t\t`__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(\n\t\t\t\t\t\t`${chunkGraph.getModuleId(m)}`\n\t\t\t\t\t)}__`\n\t\t\t)\n\t\t\t.join(\", \");\n\n\t\tconst iife = runtimeTemplate.isIIFE();\n\t\tconst fnStart =\n\t\t\t(modern\n\t\t\t\t? `(${externalsArguments}) => {`\n\t\t\t\t: `function(${externalsArguments}) {`) +\n\t\t\t(iife || !chunk.hasRuntime() ? \" return \" : \"\\n\");\n\t\tconst fnEnd = iife ? \";\\n}\" : \"\\n}\";\n\n\t\tif (this.requireAsWrapper) {\n\t\t\treturn new ConcatSource(\n\t\t\t\t`require(${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else if (options.name) {\n\t\t\tconst name = compilation.getPath(options.name, {\n\t\t\t\tchunk\n\t\t\t});\n\n\t\t\treturn new ConcatSource(\n\t\t\t\t`define(${JSON.stringify(name)}, ${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else if (externalsArguments) {\n\t\t\treturn new ConcatSource(\n\t\t\t\t`define(${externalsDepsArray}, ${fnStart}`,\n\t\t\t\tsource,\n\t\t\t\t`${fnEnd});`\n\t\t\t);\n\t\t} else {\n\t\t\treturn new ConcatSource(`define(${fnStart}`, source, `${fnEnd});`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Chunk} chunk the chunk\n\t * @param {Hash} hash hash\n\t * @param {ChunkHashContext} chunkHashContext chunk hash context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {void}\n\t */\n\tchunkHash(chunk, hash, chunkHashContext, { options, compilation }) {\n\t\thash.update(\"AmdLibraryPlugin\");\n\t\tif (this.requireAsWrapper) {\n\t\t\thash.update(\"requireAsWrapper\");\n\t\t} else if (options.name) {\n\t\t\thash.update(\"named\");\n\t\t\tconst name = compilation.getPath(options.name, {\n\t\t\t\tchunk\n\t\t\t});\n\t\t\thash.update(name);\n\t\t}\n\t}\n}\n\nmodule.exports = AmdLibraryPlugin;\n"]},"metadata":{},"sourceType":"script"}