{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst UnsupportedWebAssemblyFeatureError = require(\"../wasm-sync/UnsupportedWebAssemblyFeatureError\");\n\nconst ModuleDependency = require(\"./ModuleDependency\");\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleImportDescription} ModuleImportDescription */\n\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nclass WebAssemblyImportDependency extends ModuleDependency {\n  /**\n   * @param {string} request the request\n   * @param {string} name the imported name\n   * @param {ModuleImportDescription} description the WASM ast node\n   * @param {false | string} onlyDirectImport if only direct imports are allowed\n   */\n  constructor(request, name, description, onlyDirectImport) {\n    super(request);\n    /** @type {string} */\n\n    this.name = name;\n    /** @type {ModuleImportDescription} */\n\n    this.description = description;\n    /** @type {false | string} */\n\n    this.onlyDirectImport = onlyDirectImport;\n  }\n\n  get type() {\n    return \"wasm import\";\n  }\n\n  get category() {\n    return \"wasm\";\n  }\n  /**\n   * Returns list of exports referenced by this dependency\n   * @param {ModuleGraph} moduleGraph module graph\n   * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n   * @returns {(string[] | ReferencedExport)[]} referenced exports\n   */\n\n\n  getReferencedExports(moduleGraph, runtime) {\n    return [[this.name]];\n  }\n  /**\n   * Returns errors\n   * @param {ModuleGraph} moduleGraph module graph\n   * @returns {WebpackError[]} errors\n   */\n\n\n  getErrors(moduleGraph) {\n    const module = moduleGraph.getModule(this);\n\n    if (this.onlyDirectImport && module && !module.type.startsWith(\"webassembly\")) {\n      return [new UnsupportedWebAssemblyFeatureError(`Import \"${this.name}\" from \"${this.request}\" with ${this.onlyDirectImport} can only be used for direct wasm to wasm dependencies`)];\n    }\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.name);\n    write(this.description);\n    write(this.onlyDirectImport);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.name = read();\n    this.description = read();\n    this.onlyDirectImport = read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(WebAssemblyImportDependency, \"webpack/lib/dependencies/WebAssemblyImportDependency\");\nmodule.exports = WebAssemblyImportDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/WebAssemblyImportDependency.js"],"names":["makeSerializable","require","UnsupportedWebAssemblyFeatureError","ModuleDependency","WebAssemblyImportDependency","constructor","request","name","description","onlyDirectImport","type","category","getReferencedExports","moduleGraph","runtime","getErrors","module","getModule","startsWith","serialize","context","write","deserialize","read","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMC,kCAAkC,GAAGD,OAAO,CAAC,iDAAD,CAAlD;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;AAEA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMG,2BAAN,SAA0CD,gBAA1C,CAA2D;AAC1D;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgBC,WAAhB,EAA6BC,gBAA7B,EAA+C;AACzD,UAAMH,OAAN;AACA;;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA;;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA;;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA;;AAEO,MAAJC,IAAI,GAAG;AACV,WAAO,aAAP;AACA;;AAEW,MAARC,QAAQ,GAAG;AACd,WAAO,MAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,oBAAoB,CAACC,WAAD,EAAcC,OAAd,EAAuB;AAC1C,WAAO,CAAC,CAAC,KAAKP,IAAN,CAAD,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCQ,EAAAA,SAAS,CAACF,WAAD,EAAc;AACtB,UAAMG,MAAM,GAAGH,WAAW,CAACI,SAAZ,CAAsB,IAAtB,CAAf;;AAEA,QACC,KAAKR,gBAAL,IACAO,MADA,IAEA,CAACA,MAAM,CAACN,IAAP,CAAYQ,UAAZ,CAAuB,aAAvB,CAHF,EAIE;AACD,aAAO,CACN,IAAIhB,kCAAJ,CACE,WAAU,KAAKK,IAAK,WAAU,KAAKD,OAAQ,UAAS,KAAKG,gBAAiB,wDAD5E,CADM,CAAP;AAKA;AACD;;AAEDU,EAAAA,SAAS,CAACC,OAAD,EAAU;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,OAAlB;AAEAC,IAAAA,KAAK,CAAC,KAAKd,IAAN,CAAL;AACAc,IAAAA,KAAK,CAAC,KAAKb,WAAN,CAAL;AACAa,IAAAA,KAAK,CAAC,KAAKZ,gBAAN,CAAL;AAEA,UAAMU,SAAN,CAAgBC,OAAhB;AACA;;AAEDE,EAAAA,WAAW,CAACF,OAAD,EAAU;AACpB,UAAM;AAAEG,MAAAA;AAAF,QAAWH,OAAjB;AAEA,SAAKb,IAAL,GAAYgB,IAAI,EAAhB;AACA,SAAKf,WAAL,GAAmBe,IAAI,EAAvB;AACA,SAAKd,gBAAL,GAAwBc,IAAI,EAA5B;AAEA,UAAMD,WAAN,CAAkBF,OAAlB;AACA;;AA1EyD;;AA6E3DpB,gBAAgB,CACfI,2BADe,EAEf,sDAFe,CAAhB;AAKAY,MAAM,CAACQ,OAAP,GAAiBpB,2BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst UnsupportedWebAssemblyFeatureError = require(\"../wasm-sync/UnsupportedWebAssemblyFeatureError\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleImportDescription} ModuleImportDescription */\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nclass WebAssemblyImportDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request the request\n\t * @param {string} name the imported name\n\t * @param {ModuleImportDescription} description the WASM ast node\n\t * @param {false | string} onlyDirectImport if only direct imports are allowed\n\t */\n\tconstructor(request, name, description, onlyDirectImport) {\n\t\tsuper(request);\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\t\t/** @type {ModuleImportDescription} */\n\t\tthis.description = description;\n\t\t/** @type {false | string} */\n\t\tthis.onlyDirectImport = onlyDirectImport;\n\t}\n\n\tget type() {\n\t\treturn \"wasm import\";\n\t}\n\n\tget category() {\n\t\treturn \"wasm\";\n\t}\n\n\t/**\n\t * Returns list of exports referenced by this dependency\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n\t * @returns {(string[] | ReferencedExport)[]} referenced exports\n\t */\n\tgetReferencedExports(moduleGraph, runtime) {\n\t\treturn [[this.name]];\n\t}\n\n\t/**\n\t * Returns errors\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @returns {WebpackError[]} errors\n\t */\n\tgetErrors(moduleGraph) {\n\t\tconst module = moduleGraph.getModule(this);\n\n\t\tif (\n\t\t\tthis.onlyDirectImport &&\n\t\t\tmodule &&\n\t\t\t!module.type.startsWith(\"webassembly\")\n\t\t) {\n\t\t\treturn [\n\t\t\t\tnew UnsupportedWebAssemblyFeatureError(\n\t\t\t\t\t`Import \"${this.name}\" from \"${this.request}\" with ${this.onlyDirectImport} can only be used for direct wasm to wasm dependencies`\n\t\t\t\t)\n\t\t\t];\n\t\t}\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.name);\n\t\twrite(this.description);\n\t\twrite(this.onlyDirectImport);\n\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\n\t\tthis.name = read();\n\t\tthis.description = read();\n\t\tthis.onlyDirectImport = read();\n\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tWebAssemblyImportDependency,\n\t\"webpack/lib/dependencies/WebAssemblyImportDependency\"\n);\n\nmodule.exports = WebAssemblyImportDependency;\n"]},"metadata":{},"sourceType":"script"}