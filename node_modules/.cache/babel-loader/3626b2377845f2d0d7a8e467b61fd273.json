{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst NullDependency = require(\"./NullDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n\nclass AMDRequireArrayDependency extends NullDependency {\n  constructor(depsArray, range) {\n    super();\n    this.depsArray = depsArray;\n    this.range = range;\n  }\n\n  get type() {\n    return \"amd require array\";\n  }\n\n  get category() {\n    return \"amd\";\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.depsArray);\n    write(this.range);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.depsArray = read();\n    this.range = read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(AMDRequireArrayDependency, \"webpack/lib/dependencies/AMDRequireArrayDependency\");\nAMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends DependencyTemplate {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const dep =\n    /** @type {AMDRequireArrayDependency} */\n    dependency;\n    const content = this.getContent(dep, templateContext);\n    source.replace(dep.range[0], dep.range[1] - 1, content);\n  }\n\n  getContent(dep, templateContext) {\n    const requires = dep.depsArray.map(dependency => {\n      return this.contentForDependency(dependency, templateContext);\n    });\n    return `[${requires.join(\", \")}]`;\n  }\n\n  contentForDependency(dep, _ref) {\n    let {\n      runtimeTemplate,\n      moduleGraph,\n      chunkGraph,\n      runtimeRequirements\n    } = _ref;\n\n    if (typeof dep === \"string\") {\n      return dep;\n    }\n\n    if (dep.localModule) {\n      return dep.localModule.variableName();\n    } else {\n      return runtimeTemplate.moduleExports({\n        module: moduleGraph.getModule(dep),\n        chunkGraph,\n        request: dep.request,\n        runtimeRequirements\n      });\n    }\n  }\n\n};\nmodule.exports = AMDRequireArrayDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/AMDRequireArrayDependency.js"],"names":["DependencyTemplate","require","makeSerializable","NullDependency","AMDRequireArrayDependency","constructor","depsArray","range","type","category","serialize","context","write","deserialize","read","Template","AMDRequireArrayDependencyTemplate","apply","dependency","source","templateContext","dep","content","getContent","replace","requires","map","contentForDependency","join","runtimeTemplate","moduleGraph","chunkGraph","runtimeRequirements","localModule","variableName","moduleExports","module","getModule","request","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;AAEA;;AACA;;AACA;;;AAEA,MAAMG,yBAAN,SAAwCD,cAAxC,CAAuD;AACtDE,EAAAA,WAAW,CAACC,SAAD,EAAYC,KAAZ,EAAmB;AAC7B;AAEA,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA;;AAEO,MAAJC,IAAI,GAAG;AACV,WAAO,mBAAP;AACA;;AAEW,MAARC,QAAQ,GAAG;AACd,WAAO,KAAP;AACA;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAU;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,OAAlB;AAEAC,IAAAA,KAAK,CAAC,KAAKN,SAAN,CAAL;AACAM,IAAAA,KAAK,CAAC,KAAKL,KAAN,CAAL;AAEA,UAAMG,SAAN,CAAgBC,OAAhB;AACA;;AAEDE,EAAAA,WAAW,CAACF,OAAD,EAAU;AACpB,UAAM;AAAEG,MAAAA;AAAF,QAAWH,OAAjB;AAEA,SAAKL,SAAL,GAAiBQ,IAAI,EAArB;AACA,SAAKP,KAAL,GAAaO,IAAI,EAAjB;AAEA,UAAMD,WAAN,CAAkBF,OAAlB;AACA;;AAhCqD;;AAmCvDT,gBAAgB,CACfE,yBADe,EAEf,oDAFe,CAAhB;AAKAA,yBAAyB,CAACW,QAA1B,GAAqC,MAAMC,iCAAN,SACpChB,kBADoC,CAEnC;AACD;AACD;AACA;AACA;AACA;AACA;AACCiB,EAAAA,KAAK,CAACC,UAAD,EAAaC,MAAb,EAAqBC,eAArB,EAAsC;AAC1C,UAAMC,GAAG;AAAG;AAA0CH,IAAAA,UAAtD;AACA,UAAMI,OAAO,GAAG,KAAKC,UAAL,CAAgBF,GAAhB,EAAqBD,eAArB,CAAhB;AACAD,IAAAA,MAAM,CAACK,OAAP,CAAeH,GAAG,CAACd,KAAJ,CAAU,CAAV,CAAf,EAA6Bc,GAAG,CAACd,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+Ce,OAA/C;AACA;;AAEDC,EAAAA,UAAU,CAACF,GAAD,EAAMD,eAAN,EAAuB;AAChC,UAAMK,QAAQ,GAAGJ,GAAG,CAACf,SAAJ,CAAcoB,GAAd,CAAkBR,UAAU,IAAI;AAChD,aAAO,KAAKS,oBAAL,CAA0BT,UAA1B,EAAsCE,eAAtC,CAAP;AACA,KAFgB,CAAjB;AAGA,WAAQ,IAAGK,QAAQ,CAACG,IAAT,CAAc,IAAd,CAAoB,GAA/B;AACA;;AAEDD,EAAAA,oBAAoB,CACnBN,GADmB,QAGlB;AAAA,QADD;AAAEQ,MAAAA,eAAF;AAAmBC,MAAAA,WAAnB;AAAgCC,MAAAA,UAAhC;AAA4CC,MAAAA;AAA5C,KACC;;AACD,QAAI,OAAOX,GAAP,KAAe,QAAnB,EAA6B;AAC5B,aAAOA,GAAP;AACA;;AAED,QAAIA,GAAG,CAACY,WAAR,EAAqB;AACpB,aAAOZ,GAAG,CAACY,WAAJ,CAAgBC,YAAhB,EAAP;AACA,KAFD,MAEO;AACN,aAAOL,eAAe,CAACM,aAAhB,CAA8B;AACpCC,QAAAA,MAAM,EAAEN,WAAW,CAACO,SAAZ,CAAsBhB,GAAtB,CAD4B;AAEpCU,QAAAA,UAFoC;AAGpCO,QAAAA,OAAO,EAAEjB,GAAG,CAACiB,OAHuB;AAIpCN,QAAAA;AAJoC,OAA9B,CAAP;AAMA;AACD;;AAtCA,CAFF;AA2CAI,MAAM,CAACG,OAAP,GAAiBnC,yBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass AMDRequireArrayDependency extends NullDependency {\n\tconstructor(depsArray, range) {\n\t\tsuper();\n\n\t\tthis.depsArray = depsArray;\n\t\tthis.range = range;\n\t}\n\n\tget type() {\n\t\treturn \"amd require array\";\n\t}\n\n\tget category() {\n\t\treturn \"amd\";\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.depsArray);\n\t\twrite(this.range);\n\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\n\t\tthis.depsArray = read();\n\t\tthis.range = read();\n\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tAMDRequireArrayDependency,\n\t\"webpack/lib/dependencies/AMDRequireArrayDependency\"\n);\n\nAMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends (\n\tDependencyTemplate\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst dep = /** @type {AMDRequireArrayDependency} */ (dependency);\n\t\tconst content = this.getContent(dep, templateContext);\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, content);\n\t}\n\n\tgetContent(dep, templateContext) {\n\t\tconst requires = dep.depsArray.map(dependency => {\n\t\t\treturn this.contentForDependency(dependency, templateContext);\n\t\t});\n\t\treturn `[${requires.join(\", \")}]`;\n\t}\n\n\tcontentForDependency(\n\t\tdep,\n\t\t{ runtimeTemplate, moduleGraph, chunkGraph, runtimeRequirements }\n\t) {\n\t\tif (typeof dep === \"string\") {\n\t\t\treturn dep;\n\t\t}\n\n\t\tif (dep.localModule) {\n\t\t\treturn dep.localModule.variableName();\n\t\t} else {\n\t\t\treturn runtimeTemplate.moduleExports({\n\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\tchunkGraph,\n\t\t\t\trequest: dep.request,\n\t\t\t\truntimeRequirements\n\t\t\t});\n\t\t}\n\t}\n};\n\nmodule.exports = AMDRequireArrayDependency;\n"]},"metadata":{},"sourceType":"script"}