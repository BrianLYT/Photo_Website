{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nconst {\n  find\n} = require(\"../util/SetHelpers\");\n\nconst AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\n\nconst EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\n\nconst NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").PerformanceOptions} PerformanceOptions */\n\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n\n/**\n * @typedef {Object} AssetDetails\n * @property {string} name\n * @property {number} size\n */\n\n/**\n * @typedef {Object} EntrypointDetails\n * @property {string} name\n * @property {number} size\n * @property {string[]} files\n */\n\n\nconst isOverSizeLimitSet = new WeakSet();\n\nconst excludeSourceMap = (name, source, info) => !info.development;\n\nmodule.exports = class SizeLimitsPlugin {\n  /**\n   * @param {PerformanceOptions} options the plugin options\n   */\n  constructor(options) {\n    this.hints = options.hints;\n    this.maxAssetSize = options.maxAssetSize;\n    this.maxEntrypointSize = options.maxEntrypointSize;\n    this.assetFilter = options.assetFilter;\n  }\n  /**\n   * @param {ChunkGroup | Source} thing the resource to test\n   * @returns {boolean} true if over the limit\n   */\n\n\n  static isOverSizeLimit(thing) {\n    return isOverSizeLimitSet.has(thing);\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const entrypointSizeLimit = this.maxEntrypointSize;\n    const assetSizeLimit = this.maxAssetSize;\n    const hints = this.hints;\n    const assetFilter = this.assetFilter || excludeSourceMap;\n    compiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", compilation => {\n      /** @type {WebpackError[]} */\n      const warnings = [];\n      /**\n       * @param {Entrypoint} entrypoint an entrypoint\n       * @returns {number} the size of the entrypoint\n       */\n\n      const getEntrypointSize = entrypoint => {\n        let size = 0;\n\n        for (const file of entrypoint.getFiles()) {\n          const asset = compilation.getAsset(file);\n\n          if (asset && assetFilter(asset.name, asset.source, asset.info) && asset.source) {\n            size += asset.info.size || asset.source.size();\n          }\n        }\n\n        return size;\n      };\n      /** @type {AssetDetails[]} */\n\n\n      const assetsOverSizeLimit = [];\n\n      for (const {\n        name,\n        source,\n        info\n      } of compilation.getAssets()) {\n        if (!assetFilter(name, source, info) || !source) {\n          continue;\n        }\n\n        const size = info.size || source.size();\n\n        if (size > assetSizeLimit) {\n          assetsOverSizeLimit.push({\n            name,\n            size\n          });\n          isOverSizeLimitSet.add(source);\n        }\n      }\n\n      const fileFilter = name => {\n        const asset = compilation.getAsset(name);\n        return asset && assetFilter(asset.name, asset.source, asset.info);\n      };\n      /** @type {EntrypointDetails[]} */\n\n\n      const entrypointsOverLimit = [];\n\n      for (const [name, entry] of compilation.entrypoints) {\n        const size = getEntrypointSize(entry);\n\n        if (size > entrypointSizeLimit) {\n          entrypointsOverLimit.push({\n            name: name,\n            size: size,\n            files: entry.getFiles().filter(fileFilter)\n          });\n          isOverSizeLimitSet.add(entry);\n        }\n      }\n\n      if (hints) {\n        // 1. Individual Chunk: Size < 250kb\n        // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n        // 3. No Async Chunks\n        // if !1, then 2, if !2 return\n        if (assetsOverSizeLimit.length > 0) {\n          warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));\n        }\n\n        if (entrypointsOverLimit.length > 0) {\n          warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));\n        }\n\n        if (warnings.length > 0) {\n          const someAsyncChunk = find(compilation.chunks, chunk => !chunk.canBeInitial());\n\n          if (!someAsyncChunk) {\n            warnings.push(new NoAsyncChunksWarning());\n          }\n\n          if (hints === \"error\") {\n            compilation.errors.push(...warnings);\n          } else {\n            compilation.warnings.push(...warnings);\n          }\n        }\n      }\n    });\n  }\n\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/performance/SizeLimitsPlugin.js"],"names":["find","require","AssetsOverSizeLimitWarning","EntrypointsOverSizeLimitWarning","NoAsyncChunksWarning","isOverSizeLimitSet","WeakSet","excludeSourceMap","name","source","info","development","module","exports","SizeLimitsPlugin","constructor","options","hints","maxAssetSize","maxEntrypointSize","assetFilter","isOverSizeLimit","thing","has","apply","compiler","entrypointSizeLimit","assetSizeLimit","hooks","afterEmit","tap","compilation","warnings","getEntrypointSize","entrypoint","size","file","getFiles","asset","getAsset","assetsOverSizeLimit","getAssets","push","add","fileFilter","entrypointsOverLimit","entry","entrypoints","files","filter","length","someAsyncChunk","chunks","chunk","canBeInitial","errors"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\n\"use strict\";\n\nconst { find } = require(\"../util/SetHelpers\");\nconst AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\nconst EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\nconst NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").PerformanceOptions} PerformanceOptions */\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n\n/**\n * @typedef {Object} AssetDetails\n * @property {string} name\n * @property {number} size\n */\n\n/**\n * @typedef {Object} EntrypointDetails\n * @property {string} name\n * @property {number} size\n * @property {string[]} files\n */\n\nconst isOverSizeLimitSet = new WeakSet();\n\nconst excludeSourceMap = (name, source, info) => !info.development;\n\nmodule.exports = class SizeLimitsPlugin {\n\t/**\n\t * @param {PerformanceOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tthis.hints = options.hints;\n\t\tthis.maxAssetSize = options.maxAssetSize;\n\t\tthis.maxEntrypointSize = options.maxEntrypointSize;\n\t\tthis.assetFilter = options.assetFilter;\n\t}\n\n\t/**\n\t * @param {ChunkGroup | Source} thing the resource to test\n\t * @returns {boolean} true if over the limit\n\t */\n\tstatic isOverSizeLimit(thing) {\n\t\treturn isOverSizeLimitSet.has(thing);\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst entrypointSizeLimit = this.maxEntrypointSize;\n\t\tconst assetSizeLimit = this.maxAssetSize;\n\t\tconst hints = this.hints;\n\t\tconst assetFilter = this.assetFilter || excludeSourceMap;\n\n\t\tcompiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", compilation => {\n\t\t\t/** @type {WebpackError[]} */\n\t\t\tconst warnings = [];\n\n\t\t\t/**\n\t\t\t * @param {Entrypoint} entrypoint an entrypoint\n\t\t\t * @returns {number} the size of the entrypoint\n\t\t\t */\n\t\t\tconst getEntrypointSize = entrypoint => {\n\t\t\t\tlet size = 0;\n\t\t\t\tfor (const file of entrypoint.getFiles()) {\n\t\t\t\t\tconst asset = compilation.getAsset(file);\n\t\t\t\t\tif (\n\t\t\t\t\t\tasset &&\n\t\t\t\t\t\tassetFilter(asset.name, asset.source, asset.info) &&\n\t\t\t\t\t\tasset.source\n\t\t\t\t\t) {\n\t\t\t\t\t\tsize += asset.info.size || asset.source.size();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn size;\n\t\t\t};\n\n\t\t\t/** @type {AssetDetails[]} */\n\t\t\tconst assetsOverSizeLimit = [];\n\t\t\tfor (const { name, source, info } of compilation.getAssets()) {\n\t\t\t\tif (!assetFilter(name, source, info) || !source) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst size = info.size || source.size();\n\t\t\t\tif (size > assetSizeLimit) {\n\t\t\t\t\tassetsOverSizeLimit.push({\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tsize\n\t\t\t\t\t});\n\t\t\t\t\tisOverSizeLimitSet.add(source);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst fileFilter = name => {\n\t\t\t\tconst asset = compilation.getAsset(name);\n\t\t\t\treturn asset && assetFilter(asset.name, asset.source, asset.info);\n\t\t\t};\n\n\t\t\t/** @type {EntrypointDetails[]} */\n\t\t\tconst entrypointsOverLimit = [];\n\t\t\tfor (const [name, entry] of compilation.entrypoints) {\n\t\t\t\tconst size = getEntrypointSize(entry);\n\n\t\t\t\tif (size > entrypointSizeLimit) {\n\t\t\t\t\tentrypointsOverLimit.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tsize: size,\n\t\t\t\t\t\tfiles: entry.getFiles().filter(fileFilter)\n\t\t\t\t\t});\n\t\t\t\t\tisOverSizeLimitSet.add(entry);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hints) {\n\t\t\t\t// 1. Individual Chunk: Size < 250kb\n\t\t\t\t// 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n\t\t\t\t// 3. No Async Chunks\n\t\t\t\t// if !1, then 2, if !2 return\n\t\t\t\tif (assetsOverSizeLimit.length > 0) {\n\t\t\t\t\twarnings.push(\n\t\t\t\t\t\tnew AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (entrypointsOverLimit.length > 0) {\n\t\t\t\t\twarnings.push(\n\t\t\t\t\t\tnew EntrypointsOverSizeLimitWarning(\n\t\t\t\t\t\t\tentrypointsOverLimit,\n\t\t\t\t\t\t\tentrypointSizeLimit\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (warnings.length > 0) {\n\t\t\t\t\tconst someAsyncChunk = find(\n\t\t\t\t\t\tcompilation.chunks,\n\t\t\t\t\t\tchunk => !chunk.canBeInitial()\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!someAsyncChunk) {\n\t\t\t\t\t\twarnings.push(new NoAsyncChunksWarning());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (hints === \"error\") {\n\t\t\t\t\t\tcompilation.errors.push(...warnings);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcompilation.warnings.push(...warnings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}