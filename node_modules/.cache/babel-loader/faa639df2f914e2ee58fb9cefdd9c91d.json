{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SortableSet = require(\"./SortableSet\");\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../Entrypoint\").EntryOptions} EntryOptions */\n\n/** @typedef {string | SortableSet<string> | undefined} RuntimeSpec */\n\n/** @typedef {RuntimeSpec | boolean} RuntimeCondition */\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {string} name name of the entry\n * @param {EntryOptions=} options optionally already received entry options\n * @returns {RuntimeSpec} runtime\n */\n\n\nexports.getEntryRuntime = (compilation, name, options) => {\n  let dependOn;\n  let runtime;\n\n  if (options) {\n    ({\n      dependOn,\n      runtime\n    } = options);\n  } else {\n    const entry = compilation.entries.get(name);\n    if (!entry) return name;\n    ({\n      dependOn,\n      runtime\n    } = entry.options);\n  }\n\n  if (dependOn) {\n    /** @type {RuntimeSpec} */\n    let result = undefined;\n    const queue = new Set(dependOn);\n\n    for (const name of queue) {\n      const dep = compilation.entries.get(name);\n      if (!dep) continue;\n      const {\n        dependOn,\n        runtime\n      } = dep.options;\n\n      if (dependOn) {\n        for (const name of dependOn) {\n          queue.add(name);\n        }\n      } else {\n        result = mergeRuntimeOwned(result, runtime || name);\n      }\n    }\n\n    return result || name;\n  } else {\n    return runtime || name;\n  }\n};\n/**\n * @param {RuntimeSpec} runtime runtime\n * @param {function(string): void} fn functor\n * @param {boolean} deterministicOrder enforce a deterministic order\n * @returns {void}\n */\n\n\nexports.forEachRuntime = function (runtime, fn) {\n  let deterministicOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (runtime === undefined) {\n    fn(undefined);\n  } else if (typeof runtime === \"string\") {\n    fn(runtime);\n  } else {\n    if (deterministicOrder) runtime.sort();\n\n    for (const r of runtime) {\n      fn(r);\n    }\n  }\n};\n\nconst getRuntimesKey = set => {\n  set.sort();\n  return Array.from(set).join(\"\\n\");\n};\n/**\n * @param {RuntimeSpec} runtime runtime(s)\n * @returns {string} key of runtimes\n */\n\n\nconst getRuntimeKey = runtime => {\n  if (runtime === undefined) return \"*\";\n  if (typeof runtime === \"string\") return runtime;\n  return runtime.getFromUnorderedCache(getRuntimesKey);\n};\n\nexports.getRuntimeKey = getRuntimeKey;\n/**\n * @param {string} key key of runtimes\n * @returns {RuntimeSpec} runtime(s)\n */\n\nconst keyToRuntime = key => {\n  if (key === \"*\") return undefined;\n  const items = key.split(\"\\n\");\n  if (items.length === 1) return items[0];\n  return new SortableSet(items);\n};\n\nexports.keyToRuntime = keyToRuntime;\n\nconst getRuntimesString = set => {\n  set.sort();\n  return Array.from(set).join(\"+\");\n};\n/**\n * @param {RuntimeSpec} runtime runtime(s)\n * @returns {string} readable version\n */\n\n\nconst runtimeToString = runtime => {\n  if (runtime === undefined) return \"*\";\n  if (typeof runtime === \"string\") return runtime;\n  return runtime.getFromUnorderedCache(getRuntimesString);\n};\n\nexports.runtimeToString = runtimeToString;\n/**\n * @param {RuntimeCondition} runtimeCondition runtime condition\n * @returns {string} readable version\n */\n\nexports.runtimeConditionToString = runtimeCondition => {\n  if (runtimeCondition === true) return \"true\";\n  if (runtimeCondition === false) return \"false\";\n  return runtimeToString(runtimeCondition);\n};\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {boolean} true, when they are equal\n */\n\n\nconst runtimeEqual = (a, b) => {\n  if (a === b) {\n    return true;\n  } else if (a === undefined || b === undefined || typeof a === \"string\" || typeof b === \"string\") {\n    return false;\n  } else if (a.size !== b.size) {\n    return false;\n  } else {\n    a.sort();\n    b.sort();\n    const aIt = a[Symbol.iterator]();\n    const bIt = b[Symbol.iterator]();\n\n    for (;;) {\n      const aV = aIt.next();\n      if (aV.done) return true;\n      const bV = bIt.next();\n      if (aV.value !== bV.value) return false;\n    }\n  }\n};\n\nexports.runtimeEqual = runtimeEqual;\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {-1|0|1} compare\n */\n\nexports.compareRuntime = (a, b) => {\n  if (a === b) {\n    return 0;\n  } else if (a === undefined) {\n    return -1;\n  } else if (b === undefined) {\n    return 1;\n  } else {\n    const aKey = getRuntimeKey(a);\n    const bKey = getRuntimeKey(b);\n    if (aKey < bKey) return -1;\n    if (aKey > bKey) return 1;\n    return 0;\n  }\n};\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\n\n\nconst mergeRuntime = (a, b) => {\n  if (a === undefined) {\n    return b;\n  } else if (b === undefined) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      const set = new SortableSet();\n      set.add(a);\n      set.add(b);\n      return set;\n    } else if (b.has(a)) {\n      return b;\n    } else {\n      const set = new SortableSet(b);\n      set.add(a);\n      return set;\n    }\n  } else {\n    if (typeof b === \"string\") {\n      if (a.has(b)) return a;\n      const set = new SortableSet(a);\n      set.add(b);\n      return set;\n    } else {\n      const set = new SortableSet(a);\n\n      for (const item of b) set.add(item);\n\n      if (set.size === a.size) return a;\n      return set;\n    }\n  }\n};\n\nexports.mergeRuntime = mergeRuntime;\n/**\n * @param {RuntimeCondition} a first\n * @param {RuntimeCondition} b second\n * @param {RuntimeSpec} runtime full runtime\n * @returns {RuntimeCondition} result\n */\n\nexports.mergeRuntimeCondition = (a, b, runtime) => {\n  if (a === false) return b;\n  if (b === false) return a;\n  if (a === true || b === true) return true;\n  const merged = mergeRuntime(a, b);\n  if (merged === undefined) return undefined;\n\n  if (typeof merged === \"string\") {\n    if (typeof runtime === \"string\" && merged === runtime) return true;\n    return merged;\n  }\n\n  if (typeof runtime === \"string\" || runtime === undefined) return merged;\n  if (merged.size === runtime.size) return true;\n  return merged;\n};\n/**\n * @param {RuntimeSpec | true} a first\n * @param {RuntimeSpec | true} b second\n * @param {RuntimeSpec} runtime full runtime\n * @returns {RuntimeSpec | true} result\n */\n\n\nexports.mergeRuntimeConditionNonFalse = (a, b, runtime) => {\n  if (a === true || b === true) return true;\n  const merged = mergeRuntime(a, b);\n  if (merged === undefined) return undefined;\n\n  if (typeof merged === \"string\") {\n    if (typeof runtime === \"string\" && merged === runtime) return true;\n    return merged;\n  }\n\n  if (typeof runtime === \"string\" || runtime === undefined) return merged;\n  if (merged.size === runtime.size) return true;\n  return merged;\n};\n/**\n * @param {RuntimeSpec} a first (may be modified)\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\n\n\nconst mergeRuntimeOwned = (a, b) => {\n  if (b === undefined) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (a === undefined) {\n    if (typeof b === \"string\") {\n      return b;\n    } else {\n      return new SortableSet(b);\n    }\n  } else if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      const set = new SortableSet();\n      set.add(a);\n      set.add(b);\n      return set;\n    } else {\n      const set = new SortableSet(b);\n      set.add(a);\n      return set;\n    }\n  } else {\n    if (typeof b === \"string\") {\n      a.add(b);\n      return a;\n    } else {\n      for (const item of b) a.add(item);\n\n      return a;\n    }\n  }\n};\n\nexports.mergeRuntimeOwned = mergeRuntimeOwned;\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\n\nexports.intersectRuntime = (a, b) => {\n  if (a === undefined) {\n    return b;\n  } else if (b === undefined) {\n    return a;\n  } else if (a === b) {\n    return a;\n  } else if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return undefined;\n    } else if (b.has(a)) {\n      return a;\n    } else {\n      return undefined;\n    }\n  } else {\n    if (typeof b === \"string\") {\n      if (a.has(b)) return b;\n      return undefined;\n    } else {\n      const set = new SortableSet();\n\n      for (const item of b) {\n        if (a.has(item)) set.add(item);\n      }\n\n      if (set.size === 0) return undefined;\n      if (set.size === 1) for (const item of set) return item;\n      return set;\n    }\n  }\n};\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} result\n */\n\n\nconst subtractRuntime = (a, b) => {\n  if (a === undefined) {\n    return undefined;\n  } else if (b === undefined) {\n    return a;\n  } else if (a === b) {\n    return undefined;\n  } else if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return a;\n    } else if (b.has(a)) {\n      return undefined;\n    } else {\n      return a;\n    }\n  } else {\n    if (typeof b === \"string\") {\n      if (!a.has(b)) return a;\n\n      if (a.size === 2) {\n        for (const item of a) {\n          if (item !== b) return item;\n        }\n      }\n\n      const set = new SortableSet(a);\n      set.delete(b);\n    } else {\n      const set = new SortableSet();\n\n      for (const item of a) {\n        if (!b.has(item)) set.add(item);\n      }\n\n      if (set.size === 0) return undefined;\n      if (set.size === 1) for (const item of set) return item;\n      return set;\n    }\n  }\n};\n\nexports.subtractRuntime = subtractRuntime;\n/**\n * @param {RuntimeCondition} a first\n * @param {RuntimeCondition} b second\n * @param {RuntimeSpec} runtime runtime\n * @returns {RuntimeCondition} result\n */\n\nexports.subtractRuntimeCondition = (a, b, runtime) => {\n  if (b === true) return false;\n  if (b === false) return a;\n  if (a === false) return false;\n  const result = subtractRuntime(a === true ? runtime : a, b);\n  return result === undefined ? false : result;\n};\n/**\n * @param {RuntimeSpec} runtime runtime\n * @param {function(RuntimeSpec): boolean} filter filter function\n * @returns {boolean | RuntimeSpec} true/false if filter is constant for all runtimes, otherwise runtimes that are active\n */\n\n\nexports.filterRuntime = (runtime, filter) => {\n  if (runtime === undefined) return filter(undefined);\n  if (typeof runtime === \"string\") return filter(runtime);\n  let some = false;\n  let every = true;\n  let result = undefined;\n\n  for (const r of runtime) {\n    const v = filter(r);\n\n    if (v) {\n      some = true;\n      result = mergeRuntimeOwned(result, r);\n    } else {\n      every = false;\n    }\n  }\n\n  if (!some) return false;\n  if (every) return true;\n  return result;\n};\n/**\n * @template T\n */\n\n\nclass RuntimeSpecMap {\n  /**\n   * @param {RuntimeSpecMap<T>=} clone copy form this\n   */\n  constructor(clone) {\n    this._mode = clone ? clone._mode : 0; // 0 = empty, 1 = single entry, 2 = map\n\n    /** @type {RuntimeSpec} */\n\n    this._singleRuntime = clone ? clone._singleRuntime : undefined;\n    /** @type {T} */\n\n    this._singleValue = clone ? clone._singleValue : undefined;\n    /** @type {Map<string, T> | undefined} */\n\n    this._map = clone && clone._map ? new Map(clone._map) : undefined;\n  }\n  /**\n   * @param {RuntimeSpec} runtime the runtimes\n   * @returns {T} value\n   */\n\n\n  get(runtime) {\n    switch (this._mode) {\n      case 0:\n        return undefined;\n\n      case 1:\n        return runtimeEqual(this._singleRuntime, runtime) ? this._singleValue : undefined;\n\n      default:\n        return this._map.get(getRuntimeKey(runtime));\n    }\n  }\n  /**\n   * @param {RuntimeSpec} runtime the runtimes\n   * @returns {boolean} true, when the runtime is stored\n   */\n\n\n  has(runtime) {\n    switch (this._mode) {\n      case 0:\n        return false;\n\n      case 1:\n        return runtimeEqual(this._singleRuntime, runtime);\n\n      default:\n        return this._map.has(getRuntimeKey(runtime));\n    }\n  }\n\n  set(runtime, value) {\n    switch (this._mode) {\n      case 0:\n        this._mode = 1;\n        this._singleRuntime = runtime;\n        this._singleValue = value;\n        break;\n\n      case 1:\n        if (runtimeEqual(this._singleRuntime, runtime)) {\n          this._singleValue = value;\n          break;\n        }\n\n        this._mode = 2;\n        this._map = new Map();\n\n        this._map.set(getRuntimeKey(this._singleRuntime), this._singleValue);\n\n        this._singleRuntime = undefined;\n        this._singleValue = undefined;\n\n      /* falls through */\n\n      default:\n        this._map.set(getRuntimeKey(runtime), value);\n\n    }\n  }\n\n  provide(runtime, computer) {\n    switch (this._mode) {\n      case 0:\n        this._mode = 1;\n        this._singleRuntime = runtime;\n        return this._singleValue = computer();\n\n      case 1:\n        {\n          if (runtimeEqual(this._singleRuntime, runtime)) {\n            return this._singleValue;\n          }\n\n          this._mode = 2;\n          this._map = new Map();\n\n          this._map.set(getRuntimeKey(this._singleRuntime), this._singleValue);\n\n          this._singleRuntime = undefined;\n          this._singleValue = undefined;\n          const newValue = computer();\n\n          this._map.set(getRuntimeKey(runtime), newValue);\n\n          return newValue;\n        }\n\n      default:\n        {\n          const key = getRuntimeKey(runtime);\n\n          const value = this._map.get(key);\n\n          if (value !== undefined) return value;\n          const newValue = computer();\n\n          this._map.set(key, newValue);\n\n          return newValue;\n        }\n    }\n  }\n\n  delete(runtime) {\n    switch (this._mode) {\n      case 0:\n        return;\n\n      case 1:\n        if (runtimeEqual(this._singleRuntime, runtime)) {\n          this._mode = 0;\n          this._singleRuntime = undefined;\n          this._singleValue = undefined;\n        }\n\n        return;\n\n      default:\n        this._map.delete(getRuntimeKey(runtime));\n\n    }\n  }\n\n  update(runtime, fn) {\n    switch (this._mode) {\n      case 0:\n        throw new Error(\"runtime passed to update must exist\");\n\n      case 1:\n        {\n          if (runtimeEqual(this._singleRuntime, runtime)) {\n            this._singleValue = fn(this._singleValue);\n            break;\n          }\n\n          const newValue = fn(undefined);\n\n          if (newValue !== undefined) {\n            this._mode = 2;\n            this._map = new Map();\n\n            this._map.set(getRuntimeKey(this._singleRuntime), this._singleValue);\n\n            this._singleRuntime = undefined;\n            this._singleValue = undefined;\n\n            this._map.set(getRuntimeKey(runtime), newValue);\n          }\n\n          break;\n        }\n\n      default:\n        {\n          const key = getRuntimeKey(runtime);\n\n          const oldValue = this._map.get(key);\n\n          const newValue = fn(oldValue);\n          if (newValue !== oldValue) this._map.set(key, newValue);\n        }\n    }\n  }\n\n  keys() {\n    switch (this._mode) {\n      case 0:\n        return [];\n\n      case 1:\n        return [this._singleRuntime];\n\n      default:\n        return Array.from(this._map.keys(), keyToRuntime);\n    }\n  }\n\n  values() {\n    switch (this._mode) {\n      case 0:\n        return [][Symbol.iterator]();\n\n      case 1:\n        return [this._singleValue][Symbol.iterator]();\n\n      default:\n        return this._map.values();\n    }\n  }\n\n  get size() {\n    if (this._mode <= 1) return this._mode;\n    return this._map.size;\n  }\n\n}\n\nexports.RuntimeSpecMap = RuntimeSpecMap;\n\nclass RuntimeSpecSet {\n  constructor(iterable) {\n    /** @type {Map<string, RuntimeSpec>} */\n    this._map = new Map();\n\n    if (iterable) {\n      for (const item of iterable) {\n        this.add(item);\n      }\n    }\n  }\n\n  add(runtime) {\n    this._map.set(getRuntimeKey(runtime), runtime);\n  }\n\n  has(runtime) {\n    return this._map.has(getRuntimeKey(runtime));\n  }\n\n  [Symbol.iterator]() {\n    return this._map.values();\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n}\n\nexports.RuntimeSpecSet = RuntimeSpecSet;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/util/runtime.js"],"names":["SortableSet","require","exports","getEntryRuntime","compilation","name","options","dependOn","runtime","entry","entries","get","result","undefined","queue","Set","dep","add","mergeRuntimeOwned","forEachRuntime","fn","deterministicOrder","sort","r","getRuntimesKey","set","Array","from","join","getRuntimeKey","getFromUnorderedCache","keyToRuntime","key","items","split","length","getRuntimesString","runtimeToString","runtimeConditionToString","runtimeCondition","runtimeEqual","a","b","size","aIt","Symbol","iterator","bIt","aV","next","done","bV","value","compareRuntime","aKey","bKey","mergeRuntime","has","item","mergeRuntimeCondition","merged","mergeRuntimeConditionNonFalse","intersectRuntime","subtractRuntime","delete","subtractRuntimeCondition","filterRuntime","filter","some","every","v","RuntimeSpecMap","constructor","clone","_mode","_singleRuntime","_singleValue","_map","Map","provide","computer","newValue","update","Error","oldValue","keys","values","RuntimeSpecSet","iterable"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst SortableSet = require(\"./SortableSet\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Entrypoint\").EntryOptions} EntryOptions */\n\n/** @typedef {string | SortableSet<string> | undefined} RuntimeSpec */\n/** @typedef {RuntimeSpec | boolean} RuntimeCondition */\n\n/**\n * @param {Compilation} compilation the compilation\n * @param {string} name name of the entry\n * @param {EntryOptions=} options optionally already received entry options\n * @returns {RuntimeSpec} runtime\n */\nexports.getEntryRuntime = (compilation, name, options) => {\n\tlet dependOn;\n\tlet runtime;\n\tif (options) {\n\t\t({ dependOn, runtime } = options);\n\t} else {\n\t\tconst entry = compilation.entries.get(name);\n\t\tif (!entry) return name;\n\t\t({ dependOn, runtime } = entry.options);\n\t}\n\tif (dependOn) {\n\t\t/** @type {RuntimeSpec} */\n\t\tlet result = undefined;\n\t\tconst queue = new Set(dependOn);\n\t\tfor (const name of queue) {\n\t\t\tconst dep = compilation.entries.get(name);\n\t\t\tif (!dep) continue;\n\t\t\tconst { dependOn, runtime } = dep.options;\n\t\t\tif (dependOn) {\n\t\t\t\tfor (const name of dependOn) {\n\t\t\t\t\tqueue.add(name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult = mergeRuntimeOwned(result, runtime || name);\n\t\t\t}\n\t\t}\n\t\treturn result || name;\n\t} else {\n\t\treturn runtime || name;\n\t}\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime\n * @param {function(string): void} fn functor\n * @param {boolean} deterministicOrder enforce a deterministic order\n * @returns {void}\n */\nexports.forEachRuntime = (runtime, fn, deterministicOrder = false) => {\n\tif (runtime === undefined) {\n\t\tfn(undefined);\n\t} else if (typeof runtime === \"string\") {\n\t\tfn(runtime);\n\t} else {\n\t\tif (deterministicOrder) runtime.sort();\n\t\tfor (const r of runtime) {\n\t\t\tfn(r);\n\t\t}\n\t}\n};\n\nconst getRuntimesKey = set => {\n\tset.sort();\n\treturn Array.from(set).join(\"\\n\");\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime(s)\n * @returns {string} key of runtimes\n */\nconst getRuntimeKey = runtime => {\n\tif (runtime === undefined) return \"*\";\n\tif (typeof runtime === \"string\") return runtime;\n\treturn runtime.getFromUnorderedCache(getRuntimesKey);\n};\nexports.getRuntimeKey = getRuntimeKey;\n\n/**\n * @param {string} key key of runtimes\n * @returns {RuntimeSpec} runtime(s)\n */\nconst keyToRuntime = key => {\n\tif (key === \"*\") return undefined;\n\tconst items = key.split(\"\\n\");\n\tif (items.length === 1) return items[0];\n\treturn new SortableSet(items);\n};\nexports.keyToRuntime = keyToRuntime;\n\nconst getRuntimesString = set => {\n\tset.sort();\n\treturn Array.from(set).join(\"+\");\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime(s)\n * @returns {string} readable version\n */\nconst runtimeToString = runtime => {\n\tif (runtime === undefined) return \"*\";\n\tif (typeof runtime === \"string\") return runtime;\n\treturn runtime.getFromUnorderedCache(getRuntimesString);\n};\nexports.runtimeToString = runtimeToString;\n\n/**\n * @param {RuntimeCondition} runtimeCondition runtime condition\n * @returns {string} readable version\n */\nexports.runtimeConditionToString = runtimeCondition => {\n\tif (runtimeCondition === true) return \"true\";\n\tif (runtimeCondition === false) return \"false\";\n\treturn runtimeToString(runtimeCondition);\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {boolean} true, when they are equal\n */\nconst runtimeEqual = (a, b) => {\n\tif (a === b) {\n\t\treturn true;\n\t} else if (\n\t\ta === undefined ||\n\t\tb === undefined ||\n\t\ttypeof a === \"string\" ||\n\t\ttypeof b === \"string\"\n\t) {\n\t\treturn false;\n\t} else if (a.size !== b.size) {\n\t\treturn false;\n\t} else {\n\t\ta.sort();\n\t\tb.sort();\n\t\tconst aIt = a[Symbol.iterator]();\n\t\tconst bIt = b[Symbol.iterator]();\n\t\tfor (;;) {\n\t\t\tconst aV = aIt.next();\n\t\t\tif (aV.done) return true;\n\t\t\tconst bV = bIt.next();\n\t\t\tif (aV.value !== bV.value) return false;\n\t\t}\n\t}\n};\nexports.runtimeEqual = runtimeEqual;\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {-1|0|1} compare\n */\nexports.compareRuntime = (a, b) => {\n\tif (a === b) {\n\t\treturn 0;\n\t} else if (a === undefined) {\n\t\treturn -1;\n\t} else if (b === undefined) {\n\t\treturn 1;\n\t} else {\n\t\tconst aKey = getRuntimeKey(a);\n\t\tconst bKey = getRuntimeKey(b);\n\t\tif (aKey < bKey) return -1;\n\t\tif (aKey > bKey) return 1;\n\t\treturn 0;\n\t}\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nconst mergeRuntime = (a, b) => {\n\tif (a === undefined) {\n\t\treturn b;\n\t} else if (b === undefined) {\n\t\treturn a;\n\t} else if (a === b) {\n\t\treturn a;\n\t} else if (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\tconst set = new SortableSet();\n\t\t\tset.add(a);\n\t\t\tset.add(b);\n\t\t\treturn set;\n\t\t} else if (b.has(a)) {\n\t\t\treturn b;\n\t\t} else {\n\t\t\tconst set = new SortableSet(b);\n\t\t\tset.add(a);\n\t\t\treturn set;\n\t\t}\n\t} else {\n\t\tif (typeof b === \"string\") {\n\t\t\tif (a.has(b)) return a;\n\t\t\tconst set = new SortableSet(a);\n\t\t\tset.add(b);\n\t\t\treturn set;\n\t\t} else {\n\t\t\tconst set = new SortableSet(a);\n\t\t\tfor (const item of b) set.add(item);\n\t\t\tif (set.size === a.size) return a;\n\t\t\treturn set;\n\t\t}\n\t}\n};\nexports.mergeRuntime = mergeRuntime;\n\n/**\n * @param {RuntimeCondition} a first\n * @param {RuntimeCondition} b second\n * @param {RuntimeSpec} runtime full runtime\n * @returns {RuntimeCondition} result\n */\nexports.mergeRuntimeCondition = (a, b, runtime) => {\n\tif (a === false) return b;\n\tif (b === false) return a;\n\tif (a === true || b === true) return true;\n\tconst merged = mergeRuntime(a, b);\n\tif (merged === undefined) return undefined;\n\tif (typeof merged === \"string\") {\n\t\tif (typeof runtime === \"string\" && merged === runtime) return true;\n\t\treturn merged;\n\t}\n\tif (typeof runtime === \"string\" || runtime === undefined) return merged;\n\tif (merged.size === runtime.size) return true;\n\treturn merged;\n};\n\n/**\n * @param {RuntimeSpec | true} a first\n * @param {RuntimeSpec | true} b second\n * @param {RuntimeSpec} runtime full runtime\n * @returns {RuntimeSpec | true} result\n */\nexports.mergeRuntimeConditionNonFalse = (a, b, runtime) => {\n\tif (a === true || b === true) return true;\n\tconst merged = mergeRuntime(a, b);\n\tif (merged === undefined) return undefined;\n\tif (typeof merged === \"string\") {\n\t\tif (typeof runtime === \"string\" && merged === runtime) return true;\n\t\treturn merged;\n\t}\n\tif (typeof runtime === \"string\" || runtime === undefined) return merged;\n\tif (merged.size === runtime.size) return true;\n\treturn merged;\n};\n\n/**\n * @param {RuntimeSpec} a first (may be modified)\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nconst mergeRuntimeOwned = (a, b) => {\n\tif (b === undefined) {\n\t\treturn a;\n\t} else if (a === b) {\n\t\treturn a;\n\t} else if (a === undefined) {\n\t\tif (typeof b === \"string\") {\n\t\t\treturn b;\n\t\t} else {\n\t\t\treturn new SortableSet(b);\n\t\t}\n\t} else if (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\tconst set = new SortableSet();\n\t\t\tset.add(a);\n\t\t\tset.add(b);\n\t\t\treturn set;\n\t\t} else {\n\t\t\tconst set = new SortableSet(b);\n\t\t\tset.add(a);\n\t\t\treturn set;\n\t\t}\n\t} else {\n\t\tif (typeof b === \"string\") {\n\t\t\ta.add(b);\n\t\t\treturn a;\n\t\t} else {\n\t\t\tfor (const item of b) a.add(item);\n\t\t\treturn a;\n\t\t}\n\t}\n};\nexports.mergeRuntimeOwned = mergeRuntimeOwned;\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} merged\n */\nexports.intersectRuntime = (a, b) => {\n\tif (a === undefined) {\n\t\treturn b;\n\t} else if (b === undefined) {\n\t\treturn a;\n\t} else if (a === b) {\n\t\treturn a;\n\t} else if (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\treturn undefined;\n\t\t} else if (b.has(a)) {\n\t\t\treturn a;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t} else {\n\t\tif (typeof b === \"string\") {\n\t\t\tif (a.has(b)) return b;\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\tconst set = new SortableSet();\n\t\t\tfor (const item of b) {\n\t\t\t\tif (a.has(item)) set.add(item);\n\t\t\t}\n\t\t\tif (set.size === 0) return undefined;\n\t\t\tif (set.size === 1) for (const item of set) return item;\n\t\t\treturn set;\n\t\t}\n\t}\n};\n\n/**\n * @param {RuntimeSpec} a first\n * @param {RuntimeSpec} b second\n * @returns {RuntimeSpec} result\n */\nconst subtractRuntime = (a, b) => {\n\tif (a === undefined) {\n\t\treturn undefined;\n\t} else if (b === undefined) {\n\t\treturn a;\n\t} else if (a === b) {\n\t\treturn undefined;\n\t} else if (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\treturn a;\n\t\t} else if (b.has(a)) {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\treturn a;\n\t\t}\n\t} else {\n\t\tif (typeof b === \"string\") {\n\t\t\tif (!a.has(b)) return a;\n\t\t\tif (a.size === 2) {\n\t\t\t\tfor (const item of a) {\n\t\t\t\t\tif (item !== b) return item;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst set = new SortableSet(a);\n\t\t\tset.delete(b);\n\t\t} else {\n\t\t\tconst set = new SortableSet();\n\t\t\tfor (const item of a) {\n\t\t\t\tif (!b.has(item)) set.add(item);\n\t\t\t}\n\t\t\tif (set.size === 0) return undefined;\n\t\t\tif (set.size === 1) for (const item of set) return item;\n\t\t\treturn set;\n\t\t}\n\t}\n};\nexports.subtractRuntime = subtractRuntime;\n\n/**\n * @param {RuntimeCondition} a first\n * @param {RuntimeCondition} b second\n * @param {RuntimeSpec} runtime runtime\n * @returns {RuntimeCondition} result\n */\nexports.subtractRuntimeCondition = (a, b, runtime) => {\n\tif (b === true) return false;\n\tif (b === false) return a;\n\tif (a === false) return false;\n\tconst result = subtractRuntime(a === true ? runtime : a, b);\n\treturn result === undefined ? false : result;\n};\n\n/**\n * @param {RuntimeSpec} runtime runtime\n * @param {function(RuntimeSpec): boolean} filter filter function\n * @returns {boolean | RuntimeSpec} true/false if filter is constant for all runtimes, otherwise runtimes that are active\n */\nexports.filterRuntime = (runtime, filter) => {\n\tif (runtime === undefined) return filter(undefined);\n\tif (typeof runtime === \"string\") return filter(runtime);\n\tlet some = false;\n\tlet every = true;\n\tlet result = undefined;\n\tfor (const r of runtime) {\n\t\tconst v = filter(r);\n\t\tif (v) {\n\t\t\tsome = true;\n\t\t\tresult = mergeRuntimeOwned(result, r);\n\t\t} else {\n\t\t\tevery = false;\n\t\t}\n\t}\n\tif (!some) return false;\n\tif (every) return true;\n\treturn result;\n};\n\n/**\n * @template T\n */\nclass RuntimeSpecMap {\n\t/**\n\t * @param {RuntimeSpecMap<T>=} clone copy form this\n\t */\n\tconstructor(clone) {\n\t\tthis._mode = clone ? clone._mode : 0; // 0 = empty, 1 = single entry, 2 = map\n\t\t/** @type {RuntimeSpec} */\n\t\tthis._singleRuntime = clone ? clone._singleRuntime : undefined;\n\t\t/** @type {T} */\n\t\tthis._singleValue = clone ? clone._singleValue : undefined;\n\t\t/** @type {Map<string, T> | undefined} */\n\t\tthis._map = clone && clone._map ? new Map(clone._map) : undefined;\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime the runtimes\n\t * @returns {T} value\n\t */\n\tget(runtime) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn undefined;\n\t\t\tcase 1:\n\t\t\t\treturn runtimeEqual(this._singleRuntime, runtime)\n\t\t\t\t\t? this._singleValue\n\t\t\t\t\t: undefined;\n\t\t\tdefault:\n\t\t\t\treturn this._map.get(getRuntimeKey(runtime));\n\t\t}\n\t}\n\n\t/**\n\t * @param {RuntimeSpec} runtime the runtimes\n\t * @returns {boolean} true, when the runtime is stored\n\t */\n\thas(runtime) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn false;\n\t\t\tcase 1:\n\t\t\t\treturn runtimeEqual(this._singleRuntime, runtime);\n\t\t\tdefault:\n\t\t\t\treturn this._map.has(getRuntimeKey(runtime));\n\t\t}\n\t}\n\n\tset(runtime, value) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\tthis._mode = 1;\n\t\t\t\tthis._singleRuntime = runtime;\n\t\t\t\tthis._singleValue = value;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tif (runtimeEqual(this._singleRuntime, runtime)) {\n\t\t\t\t\tthis._singleValue = value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis._mode = 2;\n\t\t\t\tthis._map = new Map();\n\t\t\t\tthis._map.set(getRuntimeKey(this._singleRuntime), this._singleValue);\n\t\t\t\tthis._singleRuntime = undefined;\n\t\t\t\tthis._singleValue = undefined;\n\t\t\t/* falls through */\n\t\t\tdefault:\n\t\t\t\tthis._map.set(getRuntimeKey(runtime), value);\n\t\t}\n\t}\n\n\tprovide(runtime, computer) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\tthis._mode = 1;\n\t\t\t\tthis._singleRuntime = runtime;\n\t\t\t\treturn (this._singleValue = computer());\n\t\t\tcase 1: {\n\t\t\t\tif (runtimeEqual(this._singleRuntime, runtime)) {\n\t\t\t\t\treturn this._singleValue;\n\t\t\t\t}\n\t\t\t\tthis._mode = 2;\n\t\t\t\tthis._map = new Map();\n\t\t\t\tthis._map.set(getRuntimeKey(this._singleRuntime), this._singleValue);\n\t\t\t\tthis._singleRuntime = undefined;\n\t\t\t\tthis._singleValue = undefined;\n\t\t\t\tconst newValue = computer();\n\t\t\t\tthis._map.set(getRuntimeKey(runtime), newValue);\n\t\t\t\treturn newValue;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconst key = getRuntimeKey(runtime);\n\t\t\t\tconst value = this._map.get(key);\n\t\t\t\tif (value !== undefined) return value;\n\t\t\t\tconst newValue = computer();\n\t\t\t\tthis._map.set(key, newValue);\n\t\t\t\treturn newValue;\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete(runtime) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn;\n\t\t\tcase 1:\n\t\t\t\tif (runtimeEqual(this._singleRuntime, runtime)) {\n\t\t\t\t\tthis._mode = 0;\n\t\t\t\t\tthis._singleRuntime = undefined;\n\t\t\t\t\tthis._singleValue = undefined;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tthis._map.delete(getRuntimeKey(runtime));\n\t\t}\n\t}\n\n\tupdate(runtime, fn) {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\tthrow new Error(\"runtime passed to update must exist\");\n\t\t\tcase 1: {\n\t\t\t\tif (runtimeEqual(this._singleRuntime, runtime)) {\n\t\t\t\t\tthis._singleValue = fn(this._singleValue);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst newValue = fn(undefined);\n\t\t\t\tif (newValue !== undefined) {\n\t\t\t\t\tthis._mode = 2;\n\t\t\t\t\tthis._map = new Map();\n\t\t\t\t\tthis._map.set(getRuntimeKey(this._singleRuntime), this._singleValue);\n\t\t\t\t\tthis._singleRuntime = undefined;\n\t\t\t\t\tthis._singleValue = undefined;\n\t\t\t\t\tthis._map.set(getRuntimeKey(runtime), newValue);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconst key = getRuntimeKey(runtime);\n\t\t\t\tconst oldValue = this._map.get(key);\n\t\t\t\tconst newValue = fn(oldValue);\n\t\t\t\tif (newValue !== oldValue) this._map.set(key, newValue);\n\t\t\t}\n\t\t}\n\t}\n\n\tkeys() {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn [];\n\t\t\tcase 1:\n\t\t\t\treturn [this._singleRuntime];\n\t\t\tdefault:\n\t\t\t\treturn Array.from(this._map.keys(), keyToRuntime);\n\t\t}\n\t}\n\n\tvalues() {\n\t\tswitch (this._mode) {\n\t\t\tcase 0:\n\t\t\t\treturn [][Symbol.iterator]();\n\t\t\tcase 1:\n\t\t\t\treturn [this._singleValue][Symbol.iterator]();\n\t\t\tdefault:\n\t\t\t\treturn this._map.values();\n\t\t}\n\t}\n\n\tget size() {\n\t\tif (this._mode <= 1) return this._mode;\n\t\treturn this._map.size;\n\t}\n}\n\nexports.RuntimeSpecMap = RuntimeSpecMap;\n\nclass RuntimeSpecSet {\n\tconstructor(iterable) {\n\t\t/** @type {Map<string, RuntimeSpec>} */\n\t\tthis._map = new Map();\n\t\tif (iterable) {\n\t\t\tfor (const item of iterable) {\n\t\t\t\tthis.add(item);\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(runtime) {\n\t\tthis._map.set(getRuntimeKey(runtime), runtime);\n\t}\n\n\thas(runtime) {\n\t\treturn this._map.has(getRuntimeKey(runtime));\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this._map.values();\n\t}\n\n\tget size() {\n\t\treturn this._map.size;\n\t}\n}\n\nexports.RuntimeSpecSet = RuntimeSpecSet;\n"]},"metadata":{},"sourceType":"script"}