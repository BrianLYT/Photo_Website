{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  compareChunksNatural\n} = require(\"../util/comparators\");\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\n\nconst {\n  assignAscendingChunkIds\n} = require(\"./IdHelpers\");\n/** @typedef {import(\"../../declarations/plugins/ids/OccurrenceChunkIdsPlugin\").OccurrenceChunkIdsPluginOptions} OccurrenceChunkIdsPluginOptions */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nconst validate = createSchemaValidation(require(\"../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.check.js\"), () => require(\"../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.json\"), {\n  name: \"Occurrence Order Chunk Ids Plugin\",\n  baseDataPath: \"options\"\n});\n\nclass OccurrenceChunkIdsPlugin {\n  /**\n   * @param {OccurrenceChunkIdsPluginOptions=} options options object\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    validate(options);\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const prioritiseInitial = this.options.prioritiseInitial;\n    compiler.hooks.compilation.tap(\"OccurrenceChunkIdsPlugin\", compilation => {\n      compilation.hooks.chunkIds.tap(\"OccurrenceChunkIdsPlugin\", chunks => {\n        const chunkGraph = compilation.chunkGraph;\n        /** @type {Map<Chunk, number>} */\n\n        const occursInInitialChunksMap = new Map();\n        const compareNatural = compareChunksNatural(chunkGraph);\n\n        for (const c of chunks) {\n          let occurs = 0;\n\n          for (const chunkGroup of c.groupsIterable) {\n            for (const parent of chunkGroup.parentsIterable) {\n              if (parent.isInitial()) occurs++;\n            }\n          }\n\n          occursInInitialChunksMap.set(c, occurs);\n        }\n\n        const chunksInOccurrenceOrder = Array.from(chunks).sort((a, b) => {\n          if (prioritiseInitial) {\n            const aEntryOccurs = occursInInitialChunksMap.get(a);\n            const bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n          }\n\n          const aOccurs = a.getNumberOfGroups();\n          const bOccurs = b.getNumberOfGroups();\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          return compareNatural(a, b);\n        });\n        assignAscendingChunkIds(chunksInOccurrenceOrder, compilation);\n      });\n    });\n  }\n\n}\n\nmodule.exports = OccurrenceChunkIdsPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ids/OccurrenceChunkIdsPlugin.js"],"names":["compareChunksNatural","require","createSchemaValidation","assignAscendingChunkIds","validate","name","baseDataPath","OccurrenceChunkIdsPlugin","constructor","options","apply","compiler","prioritiseInitial","hooks","compilation","tap","chunkIds","chunks","chunkGraph","occursInInitialChunksMap","Map","compareNatural","c","occurs","chunkGroup","groupsIterable","parent","parentsIterable","isInitial","set","chunksInOccurrenceOrder","Array","from","sort","a","b","aEntryOccurs","get","bEntryOccurs","aOccurs","getNumberOfGroups","bOccurs","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,qBAAD,CAAxC;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAA8BF,OAAO,CAAC,aAAD,CAA3C;AAEA;;AACA;;AACA;;AACA;;;AAEA,MAAMG,QAAQ,GAAGF,sBAAsB,CACtCD,OAAO,CAAC,6DAAD,CAD+B,EAEtC,MAAMA,OAAO,CAAC,yDAAD,CAFyB,EAGtC;AACCI,EAAAA,IAAI,EAAE,mCADP;AAECC,EAAAA,YAAY,EAAE;AAFf,CAHsC,CAAvC;;AASA,MAAMC,wBAAN,CAA+B;AAC9B;AACD;AACA;AACCC,EAAAA,WAAW,GAAe;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACzBL,IAAAA,QAAQ,CAACK,OAAD,CAAR;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMC,iBAAiB,GAAG,KAAKH,OAAL,CAAaG,iBAAvC;AACAD,IAAAA,QAAQ,CAACE,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,0BAA/B,EAA2DD,WAAW,IAAI;AACzEA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,QAAlB,CAA2BD,GAA3B,CAA+B,0BAA/B,EAA2DE,MAAM,IAAI;AACpE,cAAMC,UAAU,GAAGJ,WAAW,CAACI,UAA/B;AAEA;;AACA,cAAMC,wBAAwB,GAAG,IAAIC,GAAJ,EAAjC;AAEA,cAAMC,cAAc,GAAGrB,oBAAoB,CAACkB,UAAD,CAA3C;;AAEA,aAAK,MAAMI,CAAX,IAAgBL,MAAhB,EAAwB;AACvB,cAAIM,MAAM,GAAG,CAAb;;AACA,eAAK,MAAMC,UAAX,IAAyBF,CAAC,CAACG,cAA3B,EAA2C;AAC1C,iBAAK,MAAMC,MAAX,IAAqBF,UAAU,CAACG,eAAhC,EAAiD;AAChD,kBAAID,MAAM,CAACE,SAAP,EAAJ,EAAwBL,MAAM;AAC9B;AACD;;AACDJ,UAAAA,wBAAwB,CAACU,GAAzB,CAA6BP,CAA7B,EAAgCC,MAAhC;AACA;;AAED,cAAMO,uBAAuB,GAAGC,KAAK,CAACC,IAAN,CAAWf,MAAX,EAAmBgB,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjE,cAAIvB,iBAAJ,EAAuB;AACtB,kBAAMwB,YAAY,GAAGjB,wBAAwB,CAACkB,GAAzB,CAA6BH,CAA7B,CAArB;AACA,kBAAMI,YAAY,GAAGnB,wBAAwB,CAACkB,GAAzB,CAA6BF,CAA7B,CAArB;AACA,gBAAIC,YAAY,GAAGE,YAAnB,EAAiC,OAAO,CAAC,CAAR;AACjC,gBAAIF,YAAY,GAAGE,YAAnB,EAAiC,OAAO,CAAP;AACjC;;AACD,gBAAMC,OAAO,GAAGL,CAAC,CAACM,iBAAF,EAAhB;AACA,gBAAMC,OAAO,GAAGN,CAAC,CAACK,iBAAF,EAAhB;AACA,cAAID,OAAO,GAAGE,OAAd,EAAuB,OAAO,CAAC,CAAR;AACvB,cAAIF,OAAO,GAAGE,OAAd,EAAuB,OAAO,CAAP;AACvB,iBAAOpB,cAAc,CAACa,CAAD,EAAIC,CAAJ,CAArB;AACA,SAZ+B,CAAhC;AAaAhC,QAAAA,uBAAuB,CAAC2B,uBAAD,EAA0BhB,WAA1B,CAAvB;AACA,OAhCD;AAiCA,KAlCD;AAmCA;;AAnD6B;;AAsD/B4B,MAAM,CAACC,OAAP,GAAiBpC,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { compareChunksNatural } = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst { assignAscendingChunkIds } = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../../declarations/plugins/ids/OccurrenceChunkIdsPlugin\").OccurrenceChunkIdsPluginOptions} OccurrenceChunkIdsPluginOptions */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.json\"),\n\t{\n\t\tname: \"Occurrence Order Chunk Ids Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass OccurrenceChunkIdsPlugin {\n\t/**\n\t * @param {OccurrenceChunkIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidate(options);\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst prioritiseInitial = this.options.prioritiseInitial;\n\t\tcompiler.hooks.compilation.tap(\"OccurrenceChunkIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.chunkIds.tap(\"OccurrenceChunkIdsPlugin\", chunks => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\n\t\t\t\t/** @type {Map<Chunk, number>} */\n\t\t\t\tconst occursInInitialChunksMap = new Map();\n\n\t\t\t\tconst compareNatural = compareChunksNatural(chunkGraph);\n\n\t\t\t\tfor (const c of chunks) {\n\t\t\t\t\tlet occurs = 0;\n\t\t\t\t\tfor (const chunkGroup of c.groupsIterable) {\n\t\t\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\tif (parent.isInitial()) occurs++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\toccursInInitialChunksMap.set(c, occurs);\n\t\t\t\t}\n\n\t\t\t\tconst chunksInOccurrenceOrder = Array.from(chunks).sort((a, b) => {\n\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t}\n\t\t\t\t\tconst aOccurs = a.getNumberOfGroups();\n\t\t\t\t\tconst bOccurs = b.getNumberOfGroups();\n\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\treturn compareNatural(a, b);\n\t\t\t\t});\n\t\t\t\tassignAscendingChunkIds(chunksInOccurrenceOrder, compilation);\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = OccurrenceChunkIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}