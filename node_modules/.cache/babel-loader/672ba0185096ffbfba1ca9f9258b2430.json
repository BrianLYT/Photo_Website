{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ArrayPushCallbackChunkFormatPlugin = require(\"../javascript/ArrayPushCallbackChunkFormatPlugin\");\n\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n\nconst JsonpChunkLoadingRuntimeModule = require(\"./JsonpChunkLoadingRuntimeModule\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass JsonpTemplatePlugin {\n  /**\n   * @deprecated use JsonpChunkLoadingRuntimeModule.getCompilationHooks instead\n   * @param {Compilation} compilation the compilation\n   * @returns {JsonpChunkLoadingRuntimeModule.JsonpCompilationPluginHooks} hooks\n   */\n  static getCompilationHooks(compilation) {\n    return JsonpChunkLoadingRuntimeModule.getCompilationHooks(compilation);\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.options.output.chunkLoading = \"jsonp\";\n    new ArrayPushCallbackChunkFormatPlugin().apply(compiler);\n    new EnableChunkLoadingPlugin(\"jsonp\").apply(compiler);\n  }\n\n}\n\nmodule.exports = JsonpTemplatePlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/web/JsonpTemplatePlugin.js"],"names":["ArrayPushCallbackChunkFormatPlugin","require","EnableChunkLoadingPlugin","JsonpChunkLoadingRuntimeModule","JsonpTemplatePlugin","getCompilationHooks","compilation","apply","compiler","options","output","chunkLoading","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,kCAAkC,GAAGC,OAAO,CAAC,kDAAD,CAAlD;;AACA,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,wCAAD,CAAxC;;AACA,MAAME,8BAA8B,GAAGF,OAAO,CAAC,kCAAD,CAA9C;AAEA;;AACA;;AACA;;;AAEA,MAAMG,mBAAN,CAA0B;AACzB;AACD;AACA;AACA;AACA;AAC2B,SAAnBC,mBAAmB,CAACC,WAAD,EAAc;AACvC,WAAOH,8BAA8B,CAACE,mBAA/B,CAAmDC,WAAnD,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,MAAjB,CAAwBC,YAAxB,GAAuC,OAAvC;AACA,QAAIX,kCAAJ,GAAyCO,KAAzC,CAA+CC,QAA/C;AACA,QAAIN,wBAAJ,CAA6B,OAA7B,EAAsCK,KAAtC,CAA4CC,QAA5C;AACA;;AAnBwB;;AAsB1BI,MAAM,CAACC,OAAP,GAAiBT,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ArrayPushCallbackChunkFormatPlugin = require(\"../javascript/ArrayPushCallbackChunkFormatPlugin\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\nconst JsonpChunkLoadingRuntimeModule = require(\"./JsonpChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass JsonpTemplatePlugin {\n\t/**\n\t * @deprecated use JsonpChunkLoadingRuntimeModule.getCompilationHooks instead\n\t * @param {Compilation} compilation the compilation\n\t * @returns {JsonpChunkLoadingRuntimeModule.JsonpCompilationPluginHooks} hooks\n\t */\n\tstatic getCompilationHooks(compilation) {\n\t\treturn JsonpChunkLoadingRuntimeModule.getCompilationHooks(compilation);\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.options.output.chunkLoading = \"jsonp\";\n\t\tnew ArrayPushCallbackChunkFormatPlugin().apply(compiler);\n\t\tnew EnableChunkLoadingPlugin(\"jsonp\").apply(compiler);\n\t}\n}\n\nmodule.exports = JsonpTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}