{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ContextElementDependency = require(\"./dependencies/ContextElementDependency\");\n\nconst {\n  join\n} = require(\"./util/fs\");\n\nclass ContextReplacementPlugin {\n  constructor(resourceRegExp, newContentResource, newContentRecursive, newContentRegExp) {\n    this.resourceRegExp = resourceRegExp;\n\n    if (typeof newContentResource === \"function\") {\n      this.newContentCallback = newContentResource;\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"object\") {\n      this.newContentResource = newContentResource;\n\n      this.newContentCreateContextMap = (fs, callback) => {\n        callback(null, newContentRecursive);\n      };\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"function\") {\n      this.newContentResource = newContentResource;\n      this.newContentCreateContextMap = newContentRecursive;\n    } else {\n      if (typeof newContentResource !== \"string\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = newContentResource;\n        newContentResource = undefined;\n      }\n\n      if (typeof newContentRecursive !== \"boolean\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = undefined;\n      }\n\n      this.newContentResource = newContentResource;\n      this.newContentRecursive = newContentRecursive;\n      this.newContentRegExp = newContentRegExp;\n    }\n  }\n\n  apply(compiler) {\n    const resourceRegExp = this.resourceRegExp;\n    const newContentCallback = this.newContentCallback;\n    const newContentResource = this.newContentResource;\n    const newContentRecursive = this.newContentRecursive;\n    const newContentRegExp = this.newContentRegExp;\n    const newContentCreateContextMap = this.newContentCreateContextMap;\n    compiler.hooks.contextModuleFactory.tap(\"ContextReplacementPlugin\", cmf => {\n      cmf.hooks.beforeResolve.tap(\"ContextReplacementPlugin\", result => {\n        if (!result) return;\n\n        if (resourceRegExp.test(result.request)) {\n          if (newContentResource !== undefined) {\n            result.request = newContentResource;\n          }\n\n          if (newContentRecursive !== undefined) {\n            result.recursive = newContentRecursive;\n          }\n\n          if (newContentRegExp !== undefined) {\n            result.regExp = newContentRegExp;\n          }\n\n          if (typeof newContentCallback === \"function\") {\n            newContentCallback(result);\n          } else {\n            for (const d of result.dependencies) {\n              if (d.critical) d.critical = false;\n            }\n          }\n        }\n\n        return result;\n      });\n      cmf.hooks.afterResolve.tap(\"ContextReplacementPlugin\", result => {\n        if (!result) return;\n\n        if (resourceRegExp.test(result.resource)) {\n          if (newContentResource !== undefined) {\n            if (newContentResource.startsWith(\"/\") || newContentResource.length > 1 && newContentResource[1] === \":\") {\n              result.resource = newContentResource;\n            } else {\n              result.resource = join(compiler.inputFileSystem, result.resource, newContentResource);\n            }\n          }\n\n          if (newContentRecursive !== undefined) {\n            result.recursive = newContentRecursive;\n          }\n\n          if (newContentRegExp !== undefined) {\n            result.regExp = newContentRegExp;\n          }\n\n          if (typeof newContentCreateContextMap === \"function\") {\n            result.resolveDependencies = createResolveDependenciesFromContextMap(newContentCreateContextMap);\n          }\n\n          if (typeof newContentCallback === \"function\") {\n            const origResource = result.resource;\n            newContentCallback(result);\n\n            if (result.resource !== origResource && !result.resource.startsWith(\"/\") && (result.resource.length <= 1 || result.resource[1] !== \":\")) {\n              // When the function changed it to an relative path\n              result.resource = join(compiler.inputFileSystem, origResource, result.resource);\n            }\n          } else {\n            for (const d of result.dependencies) {\n              if (d.critical) d.critical = false;\n            }\n          }\n        }\n\n        return result;\n      });\n    });\n  }\n\n}\n\nconst createResolveDependenciesFromContextMap = createContextMap => {\n  const resolveDependenciesFromContextMap = (fs, options, callback) => {\n    createContextMap(fs, (err, map) => {\n      if (err) return callback(err);\n      const dependencies = Object.keys(map).map(key => {\n        return new ContextElementDependency(map[key] + options.resourceQuery + options.resourceFragment, key, options.category, options.referencedExports);\n      });\n      callback(null, dependencies);\n    });\n  };\n\n  return resolveDependenciesFromContextMap;\n};\n\nmodule.exports = ContextReplacementPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ContextReplacementPlugin.js"],"names":["ContextElementDependency","require","join","ContextReplacementPlugin","constructor","resourceRegExp","newContentResource","newContentRecursive","newContentRegExp","newContentCallback","newContentCreateContextMap","fs","callback","undefined","apply","compiler","hooks","contextModuleFactory","tap","cmf","beforeResolve","result","test","request","recursive","regExp","d","dependencies","critical","afterResolve","resource","startsWith","length","inputFileSystem","resolveDependencies","createResolveDependenciesFromContextMap","origResource","createContextMap","resolveDependenciesFromContextMap","options","err","map","Object","keys","key","resourceQuery","resourceFragment","category","referencedExports","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ContextElementDependency = require(\"./dependencies/ContextElementDependency\");\nconst { join } = require(\"./util/fs\");\n\nclass ContextReplacementPlugin {\n\tconstructor(\n\t\tresourceRegExp,\n\t\tnewContentResource,\n\t\tnewContentRecursive,\n\t\tnewContentRegExp\n\t) {\n\t\tthis.resourceRegExp = resourceRegExp;\n\n\t\tif (typeof newContentResource === \"function\") {\n\t\t\tthis.newContentCallback = newContentResource;\n\t\t} else if (\n\t\t\ttypeof newContentResource === \"string\" &&\n\t\t\ttypeof newContentRecursive === \"object\"\n\t\t) {\n\t\t\tthis.newContentResource = newContentResource;\n\t\t\tthis.newContentCreateContextMap = (fs, callback) => {\n\t\t\t\tcallback(null, newContentRecursive);\n\t\t\t};\n\t\t} else if (\n\t\t\ttypeof newContentResource === \"string\" &&\n\t\t\ttypeof newContentRecursive === \"function\"\n\t\t) {\n\t\t\tthis.newContentResource = newContentResource;\n\t\t\tthis.newContentCreateContextMap = newContentRecursive;\n\t\t} else {\n\t\t\tif (typeof newContentResource !== \"string\") {\n\t\t\t\tnewContentRegExp = newContentRecursive;\n\t\t\t\tnewContentRecursive = newContentResource;\n\t\t\t\tnewContentResource = undefined;\n\t\t\t}\n\t\t\tif (typeof newContentRecursive !== \"boolean\") {\n\t\t\t\tnewContentRegExp = newContentRecursive;\n\t\t\t\tnewContentRecursive = undefined;\n\t\t\t}\n\t\t\tthis.newContentResource = newContentResource;\n\t\t\tthis.newContentRecursive = newContentRecursive;\n\t\t\tthis.newContentRegExp = newContentRegExp;\n\t\t}\n\t}\n\n\tapply(compiler) {\n\t\tconst resourceRegExp = this.resourceRegExp;\n\t\tconst newContentCallback = this.newContentCallback;\n\t\tconst newContentResource = this.newContentResource;\n\t\tconst newContentRecursive = this.newContentRecursive;\n\t\tconst newContentRegExp = this.newContentRegExp;\n\t\tconst newContentCreateContextMap = this.newContentCreateContextMap;\n\n\t\tcompiler.hooks.contextModuleFactory.tap(\"ContextReplacementPlugin\", cmf => {\n\t\t\tcmf.hooks.beforeResolve.tap(\"ContextReplacementPlugin\", result => {\n\t\t\t\tif (!result) return;\n\t\t\t\tif (resourceRegExp.test(result.request)) {\n\t\t\t\t\tif (newContentResource !== undefined) {\n\t\t\t\t\t\tresult.request = newContentResource;\n\t\t\t\t\t}\n\t\t\t\t\tif (newContentRecursive !== undefined) {\n\t\t\t\t\t\tresult.recursive = newContentRecursive;\n\t\t\t\t\t}\n\t\t\t\t\tif (newContentRegExp !== undefined) {\n\t\t\t\t\t\tresult.regExp = newContentRegExp;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof newContentCallback === \"function\") {\n\t\t\t\t\t\tnewContentCallback(result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const d of result.dependencies) {\n\t\t\t\t\t\t\tif (d.critical) d.critical = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tcmf.hooks.afterResolve.tap(\"ContextReplacementPlugin\", result => {\n\t\t\t\tif (!result) return;\n\t\t\t\tif (resourceRegExp.test(result.resource)) {\n\t\t\t\t\tif (newContentResource !== undefined) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tnewContentResource.startsWith(\"/\") ||\n\t\t\t\t\t\t\t(newContentResource.length > 1 && newContentResource[1] === \":\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tresult.resource = newContentResource;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.resource = join(\n\t\t\t\t\t\t\t\tcompiler.inputFileSystem,\n\t\t\t\t\t\t\t\tresult.resource,\n\t\t\t\t\t\t\t\tnewContentResource\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (newContentRecursive !== undefined) {\n\t\t\t\t\t\tresult.recursive = newContentRecursive;\n\t\t\t\t\t}\n\t\t\t\t\tif (newContentRegExp !== undefined) {\n\t\t\t\t\t\tresult.regExp = newContentRegExp;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof newContentCreateContextMap === \"function\") {\n\t\t\t\t\t\tresult.resolveDependencies =\n\t\t\t\t\t\t\tcreateResolveDependenciesFromContextMap(\n\t\t\t\t\t\t\t\tnewContentCreateContextMap\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof newContentCallback === \"function\") {\n\t\t\t\t\t\tconst origResource = result.resource;\n\t\t\t\t\t\tnewContentCallback(result);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tresult.resource !== origResource &&\n\t\t\t\t\t\t\t!result.resource.startsWith(\"/\") &&\n\t\t\t\t\t\t\t(result.resource.length <= 1 || result.resource[1] !== \":\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// When the function changed it to an relative path\n\t\t\t\t\t\t\tresult.resource = join(\n\t\t\t\t\t\t\t\tcompiler.inputFileSystem,\n\t\t\t\t\t\t\t\torigResource,\n\t\t\t\t\t\t\t\tresult.resource\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const d of result.dependencies) {\n\t\t\t\t\t\t\tif (d.critical) d.critical = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t});\n\t}\n}\n\nconst createResolveDependenciesFromContextMap = createContextMap => {\n\tconst resolveDependenciesFromContextMap = (fs, options, callback) => {\n\t\tcreateContextMap(fs, (err, map) => {\n\t\t\tif (err) return callback(err);\n\t\t\tconst dependencies = Object.keys(map).map(key => {\n\t\t\t\treturn new ContextElementDependency(\n\t\t\t\t\tmap[key] + options.resourceQuery + options.resourceFragment,\n\t\t\t\t\tkey,\n\t\t\t\t\toptions.category,\n\t\t\t\t\toptions.referencedExports\n\t\t\t\t);\n\t\t\t});\n\t\t\tcallback(null, dependencies);\n\t\t});\n\t};\n\treturn resolveDependenciesFromContextMap;\n};\n\nmodule.exports = ContextReplacementPlugin;\n"]},"metadata":{},"sourceType":"script"}