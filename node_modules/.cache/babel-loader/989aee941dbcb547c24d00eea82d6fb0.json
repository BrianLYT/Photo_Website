{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n\nconst HotUpdateChunk = require(\"../HotUpdateChunk\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst SelfModuleFactory = require(\"../SelfModuleFactory\");\n\nconst CssExportDependency = require(\"../dependencies/CssExportDependency\");\n\nconst CssImportDependency = require(\"../dependencies/CssImportDependency\");\n\nconst CssLocalIdentifierDependency = require(\"../dependencies/CssLocalIdentifierDependency\");\n\nconst CssSelfLocalIdentifierDependency = require(\"../dependencies/CssSelfLocalIdentifierDependency\");\n\nconst CssUrlDependency = require(\"../dependencies/CssUrlDependency\");\n\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\n\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\n\nconst createHash = require(\"../util/createHash\");\n\nconst memoize = require(\"../util/memoize\");\n\nconst nonNumericOnlyHash = require(\"../util/nonNumericOnlyHash\");\n\nconst CssExportsGenerator = require(\"./CssExportsGenerator\");\n\nconst CssGenerator = require(\"./CssGenerator\");\n\nconst CssParser = require(\"./CssParser\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssExperimentOptions} CssExperimentOptions */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nconst getCssLoadingRuntimeModule = memoize(() => require(\"./CssLoadingRuntimeModule\"));\n\nconst getSchema = name => {\n  const {\n    definitions\n  } = require(\"../../schemas/WebpackOptions.json\");\n\n  return {\n    definitions,\n    oneOf: [{\n      $ref: `#/definitions/${name}`\n    }]\n  };\n};\n\nconst validateGeneratorOptions = createSchemaValidation(require(\"../../schemas/plugins/css/CssGeneratorOptions.check.js\"), () => getSchema(\"CssGeneratorOptions\"), {\n  name: \"Css Modules Plugin\",\n  baseDataPath: \"parser\"\n});\nconst validateParserOptions = createSchemaValidation(require(\"../../schemas/plugins/css/CssParserOptions.check.js\"), () => getSchema(\"CssParserOptions\"), {\n  name: \"Css Modules Plugin\",\n  baseDataPath: \"parser\"\n});\n\nconst escapeCss = (str, omitOptionalUnderscore) => {\n  const escaped = `${str}`.replace( // cspell:word uffff\n  /[^a-zA-Z0-9_\\u0081-\\uffff-]/g, s => `\\\\${s}`);\n  return !omitOptionalUnderscore && /^(?!--)[0-9_-]/.test(escaped) ? `_${escaped}` : escaped;\n};\n\nconst plugin = \"CssModulesPlugin\";\n\nclass CssModulesPlugin {\n  /**\n   * @param {CssExperimentOptions} options options\n   */\n  constructor(_ref) {\n    let {\n      exportsOnly = false\n    } = _ref;\n    this._exportsOnly = exportsOnly;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(plugin, (compilation, _ref2) => {\n      let {\n        normalModuleFactory\n      } = _ref2;\n      const selfFactory = new SelfModuleFactory(compilation.moduleGraph);\n      compilation.dependencyFactories.set(CssUrlDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(CssUrlDependency, new CssUrlDependency.Template());\n      compilation.dependencyTemplates.set(CssLocalIdentifierDependency, new CssLocalIdentifierDependency.Template());\n      compilation.dependencyFactories.set(CssSelfLocalIdentifierDependency, selfFactory);\n      compilation.dependencyTemplates.set(CssSelfLocalIdentifierDependency, new CssSelfLocalIdentifierDependency.Template());\n      compilation.dependencyTemplates.set(CssExportDependency, new CssExportDependency.Template());\n      compilation.dependencyFactories.set(CssImportDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(CssImportDependency, new CssImportDependency.Template());\n      compilation.dependencyTemplates.set(StaticExportsDependency, new StaticExportsDependency.Template());\n      normalModuleFactory.hooks.createParser.for(\"css\").tap(plugin, parserOptions => {\n        validateParserOptions(parserOptions);\n        return new CssParser();\n      });\n      normalModuleFactory.hooks.createParser.for(\"css/global\").tap(plugin, parserOptions => {\n        validateParserOptions(parserOptions);\n        return new CssParser({\n          allowPseudoBlocks: false,\n          allowModeSwitch: false\n        });\n      });\n      normalModuleFactory.hooks.createParser.for(\"css/module\").tap(plugin, parserOptions => {\n        validateParserOptions(parserOptions);\n        return new CssParser({\n          defaultMode: \"local\"\n        });\n      });\n      normalModuleFactory.hooks.createGenerator.for(\"css\").tap(plugin, generatorOptions => {\n        validateGeneratorOptions(generatorOptions);\n        return this._exportsOnly ? new CssExportsGenerator() : new CssGenerator();\n      });\n      normalModuleFactory.hooks.createGenerator.for(\"css/global\").tap(plugin, generatorOptions => {\n        validateGeneratorOptions(generatorOptions);\n        return this._exportsOnly ? new CssExportsGenerator() : new CssGenerator();\n      });\n      normalModuleFactory.hooks.createGenerator.for(\"css/module\").tap(plugin, generatorOptions => {\n        validateGeneratorOptions(generatorOptions);\n        return this._exportsOnly ? new CssExportsGenerator() : new CssGenerator();\n      });\n      const orderedCssModulesPerChunk = new WeakMap();\n      compilation.hooks.afterCodeGeneration.tap(\"CssModulesPlugin\", () => {\n        const {\n          chunkGraph\n        } = compilation;\n\n        for (const chunk of compilation.chunks) {\n          if (CssModulesPlugin.chunkHasCss(chunk, chunkGraph)) {\n            orderedCssModulesPerChunk.set(chunk, this.getOrderedChunkCssModules(chunk, chunkGraph, compilation));\n          }\n        }\n      });\n      compilation.hooks.contentHash.tap(\"CssModulesPlugin\", chunk => {\n        const {\n          chunkGraph,\n          outputOptions: {\n            hashSalt,\n            hashDigest,\n            hashDigestLength,\n            hashFunction\n          }\n        } = compilation;\n        const modules = orderedCssModulesPerChunk.get(chunk);\n        if (modules === undefined) return;\n        const hash = createHash(hashFunction);\n        if (hashSalt) hash.update(hashSalt);\n\n        for (const module of modules) {\n          hash.update(chunkGraph.getModuleHash(module, chunk.runtime));\n        }\n\n        const digest =\n        /** @type {string} */\n        hash.digest(hashDigest);\n        chunk.contentHash.css = nonNumericOnlyHash(digest, hashDigestLength);\n      });\n      compilation.hooks.renderManifest.tap(plugin, (result, options) => {\n        const {\n          chunkGraph\n        } = compilation;\n        const {\n          hash,\n          chunk,\n          codeGenerationResults\n        } = options;\n        if (chunk instanceof HotUpdateChunk) return result;\n        const modules = orderedCssModulesPerChunk.get(chunk);\n\n        if (modules !== undefined) {\n          result.push({\n            render: () => this.renderChunk({\n              chunk,\n              chunkGraph,\n              codeGenerationResults,\n              uniqueName: compilation.outputOptions.uniqueName,\n              modules\n            }),\n            filenameTemplate: CssModulesPlugin.getChunkFilenameTemplate(chunk, compilation.outputOptions),\n            pathOptions: {\n              hash,\n              runtime: chunk.runtime,\n              chunk,\n              contentHashType: \"css\"\n            },\n            identifier: `css${chunk.id}`,\n            hash: chunk.contentHash.css\n          });\n        }\n\n        return result;\n      });\n      const enabledChunks = new WeakSet();\n\n      const handler = (chunk, set) => {\n        if (enabledChunks.has(chunk)) {\n          return;\n        }\n\n        enabledChunks.add(chunk);\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getChunkCssFilename);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.makeNamespaceObject);\n        const CssLoadingRuntimeModule = getCssLoadingRuntimeModule();\n        compilation.addRuntimeModule(chunk, new CssLoadingRuntimeModule(set));\n      };\n\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hasCssModules).tap(plugin, handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(plugin, handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(plugin, handler);\n    });\n  }\n\n  getModulesInOrder(chunk, modules, compilation) {\n    if (!modules) return [];\n    const modulesList = [...modules]; // Get ordered list of modules per chunk group\n    // Lists are in reverse order to allow to use Array.pop()\n\n    const modulesByChunkGroup = Array.from(chunk.groupsIterable, chunkGroup => {\n      const sortedModules = modulesList.map(module => {\n        return {\n          module,\n          index: chunkGroup.getModulePostOrderIndex(module)\n        };\n      }).filter(item => item.index !== undefined).sort((a, b) => b.index - a.index).map(item => item.module);\n      return {\n        list: sortedModules,\n        set: new Set(sortedModules)\n      };\n    });\n    if (modulesByChunkGroup.length === 1) return modulesByChunkGroup[0].list.reverse();\n\n    const compareModuleLists = (_ref3, _ref4) => {\n      let {\n        list: a\n      } = _ref3;\n      let {\n        list: b\n      } = _ref4;\n\n      if (a.length === 0) {\n        return b.length === 0 ? 0 : 1;\n      } else {\n        if (b.length === 0) return -1;\n        return compareModulesByIdentifier(a[a.length - 1], b[b.length - 1]);\n      }\n    };\n\n    modulesByChunkGroup.sort(compareModuleLists);\n    const finalModules = [];\n\n    for (;;) {\n      const failedModules = new Set();\n      const list = modulesByChunkGroup[0].list;\n\n      if (list.length === 0) {\n        // done, everything empty\n        break;\n      }\n\n      let selectedModule = list[list.length - 1];\n      let hasFailed = undefined;\n\n      outer: for (;;) {\n        for (const {\n          list,\n          set\n        } of modulesByChunkGroup) {\n          if (list.length === 0) continue;\n          const lastModule = list[list.length - 1];\n          if (lastModule === selectedModule) continue;\n          if (!set.has(selectedModule)) continue;\n          failedModules.add(selectedModule);\n\n          if (failedModules.has(lastModule)) {\n            // There is a conflict, try other alternatives\n            hasFailed = lastModule;\n            continue;\n          }\n\n          selectedModule = lastModule;\n          hasFailed = false;\n          continue outer; // restart\n        }\n\n        break;\n      }\n\n      if (hasFailed) {\n        // There is a not resolve-able conflict with the selectedModule\n        if (compilation) {\n          // TODO print better warning\n          compilation.warnings.push(new Error(`chunk ${chunk.name || chunk.id}\\nConflicting order between ${hasFailed.readableIdentifier(compilation.requestShortener)} and ${selectedModule.readableIdentifier(compilation.requestShortener)}`));\n        }\n\n        selectedModule = hasFailed;\n      } // Insert the selected module into the final modules list\n\n\n      finalModules.push(selectedModule); // Remove the selected module from all lists\n\n      for (const {\n        list,\n        set\n      } of modulesByChunkGroup) {\n        const lastModule = list[list.length - 1];\n        if (lastModule === selectedModule) list.pop();else if (hasFailed && set.has(selectedModule)) {\n          const idx = list.indexOf(selectedModule);\n          if (idx >= 0) list.splice(idx, 1);\n        }\n      }\n\n      modulesByChunkGroup.sort(compareModuleLists);\n    }\n\n    return finalModules;\n  }\n\n  getOrderedChunkCssModules(chunk, chunkGraph, compilation) {\n    return [...this.getModulesInOrder(chunk, chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"css-import\", compareModulesByIdentifier), compilation), ...this.getModulesInOrder(chunk, chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"css\", compareModulesByIdentifier), compilation)];\n  }\n\n  renderChunk(_ref5) {\n    let {\n      uniqueName,\n      chunk,\n      chunkGraph,\n      codeGenerationResults,\n      modules\n    } = _ref5;\n    const source = new ConcatSource();\n    const metaData = [];\n\n    for (const module of modules) {\n      try {\n        const codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n        const s = codeGenResult.sources.get(\"css\") || codeGenResult.sources.get(\"css-import\");\n\n        if (s) {\n          source.add(s);\n          source.add(\"\\n\");\n        }\n\n        const exports = codeGenResult.data && codeGenResult.data.get(\"css-exports\");\n        const moduleId = chunkGraph.getModuleId(module) + \"\";\n        metaData.push(`${exports ? Array.from(exports, _ref6 => {\n          let [n, v] = _ref6;\n          const shortcutValue = `${uniqueName ? uniqueName + \"-\" : \"\"}${moduleId}-${n}`;\n          return v === shortcutValue ? `${escapeCss(n)}/` : v === \"--\" + shortcutValue ? `${escapeCss(n)}%` : `${escapeCss(n)}(${escapeCss(v)})`;\n        }).join(\"\") : \"\"}${escapeCss(moduleId)}`);\n      } catch (e) {\n        e.message += `\\nduring rendering of css ${module.identifier()}`;\n        throw e;\n      }\n    }\n\n    source.add(`head{--webpack-${escapeCss((uniqueName ? uniqueName + \"-\" : \"\") + chunk.id, true)}:${metaData.join(\",\")};}`);\n    return source;\n  }\n\n  static getChunkFilenameTemplate(chunk, outputOptions) {\n    if (chunk.cssFilenameTemplate) {\n      return chunk.cssFilenameTemplate;\n    } else if (chunk.canBeInitial()) {\n      return outputOptions.cssFilename;\n    } else {\n      return outputOptions.cssChunkFilename;\n    }\n  }\n\n  static chunkHasCss(chunk, chunkGraph) {\n    return !!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css\") || !!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css-import\");\n  }\n\n}\n\nmodule.exports = CssModulesPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/css/CssModulesPlugin.js"],"names":["ConcatSource","require","HotUpdateChunk","RuntimeGlobals","SelfModuleFactory","CssExportDependency","CssImportDependency","CssLocalIdentifierDependency","CssSelfLocalIdentifierDependency","CssUrlDependency","StaticExportsDependency","compareModulesByIdentifier","createSchemaValidation","createHash","memoize","nonNumericOnlyHash","CssExportsGenerator","CssGenerator","CssParser","getCssLoadingRuntimeModule","getSchema","name","definitions","oneOf","$ref","validateGeneratorOptions","baseDataPath","validateParserOptions","escapeCss","str","omitOptionalUnderscore","escaped","replace","s","test","plugin","CssModulesPlugin","constructor","exportsOnly","_exportsOnly","apply","compiler","hooks","compilation","tap","normalModuleFactory","selfFactory","moduleGraph","dependencyFactories","set","dependencyTemplates","Template","createParser","for","parserOptions","allowPseudoBlocks","allowModeSwitch","defaultMode","createGenerator","generatorOptions","orderedCssModulesPerChunk","WeakMap","afterCodeGeneration","chunkGraph","chunk","chunks","chunkHasCss","getOrderedChunkCssModules","contentHash","outputOptions","hashSalt","hashDigest","hashDigestLength","hashFunction","modules","get","undefined","hash","update","module","getModuleHash","runtime","digest","css","renderManifest","result","options","codeGenerationResults","push","render","renderChunk","uniqueName","filenameTemplate","getChunkFilenameTemplate","pathOptions","contentHashType","identifier","id","enabledChunks","WeakSet","handler","has","add","publicPath","getChunkCssFilename","hasOwnProperty","moduleFactoriesAddOnly","makeNamespaceObject","CssLoadingRuntimeModule","addRuntimeModule","runtimeRequirementInTree","hasCssModules","ensureChunkHandlers","hmrDownloadUpdateHandlers","getModulesInOrder","modulesList","modulesByChunkGroup","Array","from","groupsIterable","chunkGroup","sortedModules","map","index","getModulePostOrderIndex","filter","item","sort","a","b","list","Set","length","reverse","compareModuleLists","finalModules","failedModules","selectedModule","hasFailed","outer","lastModule","warnings","Error","readableIdentifier","requestShortener","pop","idx","indexOf","splice","getOrderedChunkModulesIterableBySourceType","source","metaData","codeGenResult","sources","exports","data","moduleId","getModuleId","n","v","shortcutValue","join","e","message","cssFilenameTemplate","canBeInitial","cssFilename","cssChunkFilename","getChunkModulesIterableBySourceType"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst HotUpdateChunk = require(\"../HotUpdateChunk\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst SelfModuleFactory = require(\"../SelfModuleFactory\");\nconst CssExportDependency = require(\"../dependencies/CssExportDependency\");\nconst CssImportDependency = require(\"../dependencies/CssImportDependency\");\nconst CssLocalIdentifierDependency = require(\"../dependencies/CssLocalIdentifierDependency\");\nconst CssSelfLocalIdentifierDependency = require(\"../dependencies/CssSelfLocalIdentifierDependency\");\nconst CssUrlDependency = require(\"../dependencies/CssUrlDependency\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst createHash = require(\"../util/createHash\");\nconst memoize = require(\"../util/memoize\");\nconst nonNumericOnlyHash = require(\"../util/nonNumericOnlyHash\");\nconst CssExportsGenerator = require(\"./CssExportsGenerator\");\nconst CssGenerator = require(\"./CssGenerator\");\nconst CssParser = require(\"./CssParser\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").CssExperimentOptions} CssExperimentOptions */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nconst getCssLoadingRuntimeModule = memoize(() =>\n\trequire(\"./CssLoadingRuntimeModule\")\n);\n\nconst getSchema = name => {\n\tconst { definitions } = require(\"../../schemas/WebpackOptions.json\");\n\treturn {\n\t\tdefinitions,\n\t\toneOf: [{ $ref: `#/definitions/${name}` }]\n\t};\n};\n\nconst validateGeneratorOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/css/CssGeneratorOptions.check.js\"),\n\t() => getSchema(\"CssGeneratorOptions\"),\n\t{\n\t\tname: \"Css Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\nconst validateParserOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/css/CssParserOptions.check.js\"),\n\t() => getSchema(\"CssParserOptions\"),\n\t{\n\t\tname: \"Css Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\n\nconst escapeCss = (str, omitOptionalUnderscore) => {\n\tconst escaped = `${str}`.replace(\n\t\t// cspell:word uffff\n\t\t/[^a-zA-Z0-9_\\u0081-\\uffff-]/g,\n\t\ts => `\\\\${s}`\n\t);\n\treturn !omitOptionalUnderscore && /^(?!--)[0-9_-]/.test(escaped)\n\t\t? `_${escaped}`\n\t\t: escaped;\n};\n\nconst plugin = \"CssModulesPlugin\";\n\nclass CssModulesPlugin {\n\t/**\n\t * @param {CssExperimentOptions} options options\n\t */\n\tconstructor({ exportsOnly = false }) {\n\t\tthis._exportsOnly = exportsOnly;\n\t}\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tplugin,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst selfFactory = new SelfModuleFactory(compilation.moduleGraph);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssUrlDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssUrlDependency,\n\t\t\t\t\tnew CssUrlDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssLocalIdentifierDependency,\n\t\t\t\t\tnew CssLocalIdentifierDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssSelfLocalIdentifierDependency,\n\t\t\t\t\tselfFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssSelfLocalIdentifierDependency,\n\t\t\t\t\tnew CssSelfLocalIdentifierDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssExportDependency,\n\t\t\t\t\tnew CssExportDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tCssImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tCssImportDependency,\n\t\t\t\t\tnew CssImportDependency.Template()\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tStaticExportsDependency,\n\t\t\t\t\tnew StaticExportsDependency.Template()\n\t\t\t\t);\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"css\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tvalidateParserOptions(parserOptions);\n\t\t\t\t\t\treturn new CssParser();\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"css/global\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tvalidateParserOptions(parserOptions);\n\t\t\t\t\t\treturn new CssParser({\n\t\t\t\t\t\t\tallowPseudoBlocks: false,\n\t\t\t\t\t\t\tallowModeSwitch: false\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"css/module\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tvalidateParserOptions(parserOptions);\n\t\t\t\t\t\treturn new CssParser({\n\t\t\t\t\t\t\tdefaultMode: \"local\"\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"css\")\n\t\t\t\t\t.tap(plugin, generatorOptions => {\n\t\t\t\t\t\tvalidateGeneratorOptions(generatorOptions);\n\t\t\t\t\t\treturn this._exportsOnly\n\t\t\t\t\t\t\t? new CssExportsGenerator()\n\t\t\t\t\t\t\t: new CssGenerator();\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"css/global\")\n\t\t\t\t\t.tap(plugin, generatorOptions => {\n\t\t\t\t\t\tvalidateGeneratorOptions(generatorOptions);\n\t\t\t\t\t\treturn this._exportsOnly\n\t\t\t\t\t\t\t? new CssExportsGenerator()\n\t\t\t\t\t\t\t: new CssGenerator();\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"css/module\")\n\t\t\t\t\t.tap(plugin, generatorOptions => {\n\t\t\t\t\t\tvalidateGeneratorOptions(generatorOptions);\n\t\t\t\t\t\treturn this._exportsOnly\n\t\t\t\t\t\t\t? new CssExportsGenerator()\n\t\t\t\t\t\t\t: new CssGenerator();\n\t\t\t\t\t});\n\t\t\t\tconst orderedCssModulesPerChunk = new WeakMap();\n\t\t\t\tcompilation.hooks.afterCodeGeneration.tap(\"CssModulesPlugin\", () => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (CssModulesPlugin.chunkHasCss(chunk, chunkGraph)) {\n\t\t\t\t\t\t\torderedCssModulesPerChunk.set(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tthis.getOrderedChunkCssModules(chunk, chunkGraph, compilation)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcompilation.hooks.contentHash.tap(\"CssModulesPlugin\", chunk => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\toutputOptions: {\n\t\t\t\t\t\t\thashSalt,\n\t\t\t\t\t\t\thashDigest,\n\t\t\t\t\t\t\thashDigestLength,\n\t\t\t\t\t\t\thashFunction\n\t\t\t\t\t\t}\n\t\t\t\t\t} = compilation;\n\t\t\t\t\tconst modules = orderedCssModulesPerChunk.get(chunk);\n\t\t\t\t\tif (modules === undefined) return;\n\t\t\t\t\tconst hash = createHash(hashFunction);\n\t\t\t\t\tif (hashSalt) hash.update(hashSalt);\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\thash.update(chunkGraph.getModuleHash(module, chunk.runtime));\n\t\t\t\t\t}\n\t\t\t\t\tconst digest = /** @type {string} */ (hash.digest(hashDigest));\n\t\t\t\t\tchunk.contentHash.css = nonNumericOnlyHash(digest, hashDigestLength);\n\t\t\t\t});\n\t\t\t\tcompilation.hooks.renderManifest.tap(plugin, (result, options) => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tconst { hash, chunk, codeGenerationResults } = options;\n\n\t\t\t\t\tif (chunk instanceof HotUpdateChunk) return result;\n\n\t\t\t\t\tconst modules = orderedCssModulesPerChunk.get(chunk);\n\t\t\t\t\tif (modules !== undefined) {\n\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\tthis.renderChunk({\n\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\t\tcodeGenerationResults,\n\t\t\t\t\t\t\t\t\tuniqueName: compilation.outputOptions.uniqueName,\n\t\t\t\t\t\t\t\t\tmodules\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tfilenameTemplate: CssModulesPlugin.getChunkFilenameTemplate(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tcompilation.outputOptions\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\t\truntime: chunk.runtime,\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tcontentHashType: \"css\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tidentifier: `css${chunk.id}`,\n\t\t\t\t\t\t\thash: chunk.contentHash.css\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\t\t\t\tconst enabledChunks = new WeakSet();\n\t\t\t\tconst handler = (chunk, set) => {\n\t\t\t\t\tif (enabledChunks.has(chunk)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tenabledChunks.add(chunk);\n\n\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\tset.add(RuntimeGlobals.getChunkCssFilename);\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\n\t\t\t\t\tset.add(RuntimeGlobals.makeNamespaceObject);\n\n\t\t\t\t\tconst CssLoadingRuntimeModule = getCssLoadingRuntimeModule();\n\t\t\t\t\tcompilation.addRuntimeModule(chunk, new CssLoadingRuntimeModule(set));\n\t\t\t\t};\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hasCssModules)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\n\t\t\t\t\t.tap(plugin, handler);\n\t\t\t}\n\t\t);\n\t}\n\n\tgetModulesInOrder(chunk, modules, compilation) {\n\t\tif (!modules) return [];\n\n\t\tconst modulesList = [...modules];\n\n\t\t// Get ordered list of modules per chunk group\n\t\t// Lists are in reverse order to allow to use Array.pop()\n\t\tconst modulesByChunkGroup = Array.from(chunk.groupsIterable, chunkGroup => {\n\t\t\tconst sortedModules = modulesList\n\t\t\t\t.map(module => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmodule,\n\t\t\t\t\t\tindex: chunkGroup.getModulePostOrderIndex(module)\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t\t.filter(item => item.index !== undefined)\n\t\t\t\t.sort((a, b) => b.index - a.index)\n\t\t\t\t.map(item => item.module);\n\n\t\t\treturn { list: sortedModules, set: new Set(sortedModules) };\n\t\t});\n\n\t\tif (modulesByChunkGroup.length === 1)\n\t\t\treturn modulesByChunkGroup[0].list.reverse();\n\n\t\tconst compareModuleLists = ({ list: a }, { list: b }) => {\n\t\t\tif (a.length === 0) {\n\t\t\t\treturn b.length === 0 ? 0 : 1;\n\t\t\t} else {\n\t\t\t\tif (b.length === 0) return -1;\n\t\t\t\treturn compareModulesByIdentifier(a[a.length - 1], b[b.length - 1]);\n\t\t\t}\n\t\t};\n\n\t\tmodulesByChunkGroup.sort(compareModuleLists);\n\n\t\tconst finalModules = [];\n\n\t\tfor (;;) {\n\t\t\tconst failedModules = new Set();\n\t\t\tconst list = modulesByChunkGroup[0].list;\n\t\t\tif (list.length === 0) {\n\t\t\t\t// done, everything empty\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet selectedModule = list[list.length - 1];\n\t\t\tlet hasFailed = undefined;\n\t\t\touter: for (;;) {\n\t\t\t\tfor (const { list, set } of modulesByChunkGroup) {\n\t\t\t\t\tif (list.length === 0) continue;\n\t\t\t\t\tconst lastModule = list[list.length - 1];\n\t\t\t\t\tif (lastModule === selectedModule) continue;\n\t\t\t\t\tif (!set.has(selectedModule)) continue;\n\t\t\t\t\tfailedModules.add(selectedModule);\n\t\t\t\t\tif (failedModules.has(lastModule)) {\n\t\t\t\t\t\t// There is a conflict, try other alternatives\n\t\t\t\t\t\thasFailed = lastModule;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tselectedModule = lastModule;\n\t\t\t\t\thasFailed = false;\n\t\t\t\t\tcontinue outer; // restart\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (hasFailed) {\n\t\t\t\t// There is a not resolve-able conflict with the selectedModule\n\t\t\t\tif (compilation) {\n\t\t\t\t\t// TODO print better warning\n\t\t\t\t\tcompilation.warnings.push(\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t`chunk ${\n\t\t\t\t\t\t\t\tchunk.name || chunk.id\n\t\t\t\t\t\t\t}\\nConflicting order between ${hasFailed.readableIdentifier(\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)} and ${selectedModule.readableIdentifier(\n\t\t\t\t\t\t\t\tcompilation.requestShortener\n\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tselectedModule = hasFailed;\n\t\t\t}\n\t\t\t// Insert the selected module into the final modules list\n\t\t\tfinalModules.push(selectedModule);\n\t\t\t// Remove the selected module from all lists\n\t\t\tfor (const { list, set } of modulesByChunkGroup) {\n\t\t\t\tconst lastModule = list[list.length - 1];\n\t\t\t\tif (lastModule === selectedModule) list.pop();\n\t\t\t\telse if (hasFailed && set.has(selectedModule)) {\n\t\t\t\t\tconst idx = list.indexOf(selectedModule);\n\t\t\t\t\tif (idx >= 0) list.splice(idx, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmodulesByChunkGroup.sort(compareModuleLists);\n\t\t}\n\t\treturn finalModules;\n\t}\n\n\tgetOrderedChunkCssModules(chunk, chunkGraph, compilation) {\n\t\treturn [\n\t\t\t...this.getModulesInOrder(\n\t\t\t\tchunk,\n\t\t\t\tchunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\tchunk,\n\t\t\t\t\t\"css-import\",\n\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t),\n\t\t\t\tcompilation\n\t\t\t),\n\t\t\t...this.getModulesInOrder(\n\t\t\t\tchunk,\n\t\t\t\tchunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\tchunk,\n\t\t\t\t\t\"css\",\n\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t),\n\t\t\t\tcompilation\n\t\t\t)\n\t\t];\n\t}\n\n\trenderChunk({\n\t\tuniqueName,\n\t\tchunk,\n\t\tchunkGraph,\n\t\tcodeGenerationResults,\n\t\tmodules\n\t}) {\n\t\tconst source = new ConcatSource();\n\t\tconst metaData = [];\n\t\tfor (const module of modules) {\n\t\t\ttry {\n\t\t\t\tconst codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n\n\t\t\t\tconst s =\n\t\t\t\t\tcodeGenResult.sources.get(\"css\") ||\n\t\t\t\t\tcodeGenResult.sources.get(\"css-import\");\n\t\t\t\tif (s) {\n\t\t\t\t\tsource.add(s);\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t}\n\t\t\t\tconst exports =\n\t\t\t\t\tcodeGenResult.data && codeGenResult.data.get(\"css-exports\");\n\t\t\t\tconst moduleId = chunkGraph.getModuleId(module) + \"\";\n\t\t\t\tmetaData.push(\n\t\t\t\t\t`${\n\t\t\t\t\t\texports\n\t\t\t\t\t\t\t? Array.from(exports, ([n, v]) => {\n\t\t\t\t\t\t\t\t\tconst shortcutValue = `${\n\t\t\t\t\t\t\t\t\t\tuniqueName ? uniqueName + \"-\" : \"\"\n\t\t\t\t\t\t\t\t\t}${moduleId}-${n}`;\n\t\t\t\t\t\t\t\t\treturn v === shortcutValue\n\t\t\t\t\t\t\t\t\t\t? `${escapeCss(n)}/`\n\t\t\t\t\t\t\t\t\t\t: v === \"--\" + shortcutValue\n\t\t\t\t\t\t\t\t\t\t? `${escapeCss(n)}%`\n\t\t\t\t\t\t\t\t\t\t: `${escapeCss(n)}(${escapeCss(v)})`;\n\t\t\t\t\t\t\t  }).join(\"\")\n\t\t\t\t\t\t\t: \"\"\n\t\t\t\t\t}${escapeCss(moduleId)}`\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\te.message += `\\nduring rendering of css ${module.identifier()}`;\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t\tsource.add(\n\t\t\t`head{--webpack-${escapeCss(\n\t\t\t\t(uniqueName ? uniqueName + \"-\" : \"\") + chunk.id,\n\t\t\t\ttrue\n\t\t\t)}:${metaData.join(\",\")};}`\n\t\t);\n\t\treturn source;\n\t}\n\n\tstatic getChunkFilenameTemplate(chunk, outputOptions) {\n\t\tif (chunk.cssFilenameTemplate) {\n\t\t\treturn chunk.cssFilenameTemplate;\n\t\t} else if (chunk.canBeInitial()) {\n\t\t\treturn outputOptions.cssFilename;\n\t\t} else {\n\t\t\treturn outputOptions.cssChunkFilename;\n\t\t}\n\t}\n\n\tstatic chunkHasCss(chunk, chunkGraph) {\n\t\treturn (\n\t\t\t!!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css\") ||\n\t\t\t!!chunkGraph.getChunkModulesIterableBySourceType(chunk, \"css-import\")\n\t\t);\n\t}\n}\n\nmodule.exports = CssModulesPlugin;\n"]},"metadata":{},"sourceType":"script"}