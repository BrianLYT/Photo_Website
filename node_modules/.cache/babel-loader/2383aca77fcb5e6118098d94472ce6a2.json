{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/**\n * intersect creates Set containing the intersection of elements between all sets\n * @template T\n * @param {Set<T>[]} sets an array of sets being checked for shared elements\n * @returns {Set<T>} returns a new Set containing the intersecting items\n */\n\nconst intersect = sets => {\n  if (sets.length === 0) return new Set();\n  if (sets.length === 1) return new Set(sets[0]);\n  let minSize = Infinity;\n  let minIndex = -1;\n\n  for (let i = 0; i < sets.length; i++) {\n    const size = sets[i].size;\n\n    if (size < minSize) {\n      minIndex = i;\n      minSize = size;\n    }\n  }\n\n  const current = new Set(sets[minIndex]);\n\n  for (let i = 0; i < sets.length; i++) {\n    if (i === minIndex) continue;\n    const set = sets[i];\n\n    for (const item of current) {\n      if (!set.has(item)) {\n        current.delete(item);\n      }\n    }\n  }\n\n  return current;\n};\n/**\n * Checks if a set is the subset of another set\n * @template T\n * @param {Set<T>} bigSet a Set which contains the original elements to compare against\n * @param {Set<T>} smallSet the set whose elements might be contained inside of bigSet\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\n */\n\n\nconst isSubset = (bigSet, smallSet) => {\n  if (bigSet.size < smallSet.size) return false;\n\n  for (const item of smallSet) {\n    if (!bigSet.has(item)) return false;\n  }\n\n  return true;\n};\n/**\n * @template T\n * @param {Set<T>} set a set\n * @param {function(T): boolean} fn selector function\n * @returns {T | undefined} found item\n */\n\n\nconst find = (set, fn) => {\n  for (const item of set) {\n    if (fn(item)) return item;\n  }\n};\n/**\n * @template T\n * @param {Set<T>} set a set\n * @returns {T | undefined} first item\n */\n\n\nconst first = set => {\n  const entry = set.values().next();\n  return entry.done ? undefined : entry.value;\n};\n/**\n * @template T\n * @param {Set<T>} a first\n * @param {Set<T>} b second\n * @returns {Set<T>} combined set, may be identical to a or b\n */\n\n\nconst combine = (a, b) => {\n  if (b.size === 0) return a;\n  if (a.size === 0) return b;\n  const set = new Set(a);\n\n  for (const item of b) set.add(item);\n\n  return set;\n};\n\nexports.intersect = intersect;\nexports.isSubset = isSubset;\nexports.find = find;\nexports.first = first;\nexports.combine = combine;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/util/SetHelpers.js"],"names":["intersect","sets","length","Set","minSize","Infinity","minIndex","i","size","current","set","item","has","delete","isSubset","bigSet","smallSet","find","fn","first","entry","values","next","done","undefined","value","combine","a","b","add","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,SAAS,GAAGC,IAAI,IAAI;AACzB,MAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB,OAAO,IAAIC,GAAJ,EAAP;AACvB,MAAIF,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB,OAAO,IAAIC,GAAJ,CAAQF,IAAI,CAAC,CAAD,CAAZ,CAAP;AACvB,MAAIG,OAAO,GAAGC,QAAd;AACA,MAAIC,QAAQ,GAAG,CAAC,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACC,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AACrC,UAAMC,IAAI,GAAGP,IAAI,CAACM,CAAD,CAAJ,CAAQC,IAArB;;AACA,QAAIA,IAAI,GAAGJ,OAAX,EAAoB;AACnBE,MAAAA,QAAQ,GAAGC,CAAX;AACAH,MAAAA,OAAO,GAAGI,IAAV;AACA;AACD;;AACD,QAAMC,OAAO,GAAG,IAAIN,GAAJ,CAAQF,IAAI,CAACK,QAAD,CAAZ,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACC,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AACrC,QAAIA,CAAC,KAAKD,QAAV,EAAoB;AACpB,UAAMI,GAAG,GAAGT,IAAI,CAACM,CAAD,CAAhB;;AACA,SAAK,MAAMI,IAAX,IAAmBF,OAAnB,EAA4B;AAC3B,UAAI,CAACC,GAAG,CAACE,GAAJ,CAAQD,IAAR,CAAL,EAAoB;AACnBF,QAAAA,OAAO,CAACI,MAAR,CAAeF,IAAf;AACA;AACD;AACD;;AACD,SAAOF,OAAP;AACA,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,QAAQ,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACtC,MAAID,MAAM,CAACP,IAAP,GAAcQ,QAAQ,CAACR,IAA3B,EAAiC,OAAO,KAAP;;AACjC,OAAK,MAAMG,IAAX,IAAmBK,QAAnB,EAA6B;AAC5B,QAAI,CAACD,MAAM,CAACH,GAAP,CAAWD,IAAX,CAAL,EAAuB,OAAO,KAAP;AACvB;;AACD,SAAO,IAAP;AACA,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,IAAI,GAAG,CAACP,GAAD,EAAMQ,EAAN,KAAa;AACzB,OAAK,MAAMP,IAAX,IAAmBD,GAAnB,EAAwB;AACvB,QAAIQ,EAAE,CAACP,IAAD,CAAN,EAAc,OAAOA,IAAP;AACd;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,KAAK,GAAGT,GAAG,IAAI;AACpB,QAAMU,KAAK,GAAGV,GAAG,CAACW,MAAJ,GAAaC,IAAb,EAAd;AACA,SAAOF,KAAK,CAACG,IAAN,GAAaC,SAAb,GAAyBJ,KAAK,CAACK,KAAtC;AACA,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzB,MAAIA,CAAC,CAACpB,IAAF,KAAW,CAAf,EAAkB,OAAOmB,CAAP;AAClB,MAAIA,CAAC,CAACnB,IAAF,KAAW,CAAf,EAAkB,OAAOoB,CAAP;AAClB,QAAMlB,GAAG,GAAG,IAAIP,GAAJ,CAAQwB,CAAR,CAAZ;;AACA,OAAK,MAAMhB,IAAX,IAAmBiB,CAAnB,EAAsBlB,GAAG,CAACmB,GAAJ,CAAQlB,IAAR;;AACtB,SAAOD,GAAP;AACA,CAND;;AAQAoB,OAAO,CAAC9B,SAAR,GAAoBA,SAApB;AACA8B,OAAO,CAAChB,QAAR,GAAmBA,QAAnB;AACAgB,OAAO,CAACb,IAAR,GAAeA,IAAf;AACAa,OAAO,CAACX,KAAR,GAAgBA,KAAhB;AACAW,OAAO,CAACJ,OAAR,GAAkBA,OAAlB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * intersect creates Set containing the intersection of elements between all sets\n * @template T\n * @param {Set<T>[]} sets an array of sets being checked for shared elements\n * @returns {Set<T>} returns a new Set containing the intersecting items\n */\nconst intersect = sets => {\n\tif (sets.length === 0) return new Set();\n\tif (sets.length === 1) return new Set(sets[0]);\n\tlet minSize = Infinity;\n\tlet minIndex = -1;\n\tfor (let i = 0; i < sets.length; i++) {\n\t\tconst size = sets[i].size;\n\t\tif (size < minSize) {\n\t\t\tminIndex = i;\n\t\t\tminSize = size;\n\t\t}\n\t}\n\tconst current = new Set(sets[minIndex]);\n\tfor (let i = 0; i < sets.length; i++) {\n\t\tif (i === minIndex) continue;\n\t\tconst set = sets[i];\n\t\tfor (const item of current) {\n\t\t\tif (!set.has(item)) {\n\t\t\t\tcurrent.delete(item);\n\t\t\t}\n\t\t}\n\t}\n\treturn current;\n};\n\n/**\n * Checks if a set is the subset of another set\n * @template T\n * @param {Set<T>} bigSet a Set which contains the original elements to compare against\n * @param {Set<T>} smallSet the set whose elements might be contained inside of bigSet\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\n */\nconst isSubset = (bigSet, smallSet) => {\n\tif (bigSet.size < smallSet.size) return false;\n\tfor (const item of smallSet) {\n\t\tif (!bigSet.has(item)) return false;\n\t}\n\treturn true;\n};\n\n/**\n * @template T\n * @param {Set<T>} set a set\n * @param {function(T): boolean} fn selector function\n * @returns {T | undefined} found item\n */\nconst find = (set, fn) => {\n\tfor (const item of set) {\n\t\tif (fn(item)) return item;\n\t}\n};\n\n/**\n * @template T\n * @param {Set<T>} set a set\n * @returns {T | undefined} first item\n */\nconst first = set => {\n\tconst entry = set.values().next();\n\treturn entry.done ? undefined : entry.value;\n};\n\n/**\n * @template T\n * @param {Set<T>} a first\n * @param {Set<T>} b second\n * @returns {Set<T>} combined set, may be identical to a or b\n */\nconst combine = (a, b) => {\n\tif (b.size === 0) return a;\n\tif (a.size === 0) return b;\n\tconst set = new Set(a);\n\tfor (const item of b) set.add(item);\n\treturn set;\n};\n\nexports.intersect = intersect;\nexports.isSubset = isSubset;\nexports.find = find;\nexports.first = first;\nexports.combine = combine;\n"]},"metadata":{},"sourceType":"script"}