{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\n\nconst ExportsInfo = require(\"./ExportsInfo\");\n\nconst ModuleGraphConnection = require(\"./ModuleGraphConnection\");\n\nconst SortableSet = require(\"./util/SortableSet\");\n\nconst WeakTupleMap = require(\"./util/WeakTupleMap\");\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./ExportsInfo\").ExportInfo} ExportInfo */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ModuleProfile\")} ModuleProfile */\n\n/** @typedef {import(\"./RequestShortener\")} RequestShortener */\n\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @callback OptimizationBailoutFunction\n * @param {RequestShortener} requestShortener\n * @returns {string}\n */\n\n\nconst EMPTY_SET = new Set();\n/**\n * @param {SortableSet<ModuleGraphConnection>} set input\n * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} mapped by origin module\n */\n\nconst getConnectionsByOriginModule = set => {\n  const map = new Map();\n  /** @type {Module | 0} */\n\n  let lastModule = 0;\n  /** @type {ModuleGraphConnection[]} */\n\n  let lastList = undefined;\n\n  for (const connection of set) {\n    const {\n      originModule\n    } = connection;\n\n    if (lastModule === originModule) {\n      lastList.push(connection);\n    } else {\n      lastModule = originModule;\n      const list = map.get(originModule);\n\n      if (list !== undefined) {\n        lastList = list;\n        list.push(connection);\n      } else {\n        const list = [connection];\n        lastList = list;\n        map.set(originModule, list);\n      }\n    }\n  }\n\n  return map;\n};\n/**\n * @param {SortableSet<ModuleGraphConnection>} set input\n * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} mapped by module\n */\n\n\nconst getConnectionsByModule = set => {\n  const map = new Map();\n  /** @type {Module | 0} */\n\n  let lastModule = 0;\n  /** @type {ModuleGraphConnection[]} */\n\n  let lastList = undefined;\n\n  for (const connection of set) {\n    const {\n      module\n    } = connection;\n\n    if (lastModule === module) {\n      lastList.push(connection);\n    } else {\n      lastModule = module;\n      const list = map.get(module);\n\n      if (list !== undefined) {\n        lastList = list;\n        list.push(connection);\n      } else {\n        const list = [connection];\n        lastList = list;\n        map.set(module, list);\n      }\n    }\n  }\n\n  return map;\n};\n\nclass ModuleGraphModule {\n  constructor() {\n    /** @type {SortableSet<ModuleGraphConnection>} */\n    this.incomingConnections = new SortableSet();\n    /** @type {SortableSet<ModuleGraphConnection> | undefined} */\n\n    this.outgoingConnections = undefined;\n    /** @type {Module | null} */\n\n    this.issuer = undefined;\n    /** @type {(string | OptimizationBailoutFunction)[]} */\n\n    this.optimizationBailout = [];\n    /** @type {ExportsInfo} */\n\n    this.exports = new ExportsInfo();\n    /** @type {number} */\n\n    this.preOrderIndex = null;\n    /** @type {number} */\n\n    this.postOrderIndex = null;\n    /** @type {number} */\n\n    this.depth = null;\n    /** @type {ModuleProfile} */\n\n    this.profile = undefined;\n    /** @type {boolean} */\n\n    this.async = false;\n    /** @type {ModuleGraphConnection[]} */\n\n    this._unassignedConnections = undefined;\n  }\n\n}\n\nclass ModuleGraph {\n  constructor() {\n    /** @type {WeakMap<Dependency, ModuleGraphConnection>} */\n    this._dependencyMap = new WeakMap();\n    /** @type {Map<Module, ModuleGraphModule>} */\n\n    this._moduleMap = new Map();\n    /** @type {WeakMap<any, Object>} */\n\n    this._metaMap = new WeakMap();\n    /** @type {WeakTupleMap<any[], any>} */\n\n    this._cache = undefined;\n    /** @type {Map<Module, WeakTupleMap<any, any>>} */\n\n    this._moduleMemCaches = undefined;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {ModuleGraphModule} the internal module\n   */\n\n\n  _getModuleGraphModule(module) {\n    let mgm = this._moduleMap.get(module);\n\n    if (mgm === undefined) {\n      mgm = new ModuleGraphModule();\n\n      this._moduleMap.set(module, mgm);\n    }\n\n    return mgm;\n  }\n  /**\n   * @param {Dependency} dependency the dependency\n   * @param {DependenciesBlock} block parent block\n   * @param {Module} module parent module\n   * @param {number=} indexInBlock position in block\n   * @returns {void}\n   */\n\n\n  setParents(dependency, block, module) {\n    let indexInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    dependency._parentDependenciesBlockIndex = indexInBlock;\n    dependency._parentDependenciesBlock = block;\n    dependency._parentModule = module;\n  }\n  /**\n   * @param {Dependency} dependency the dependency\n   * @returns {Module} parent module\n   */\n\n\n  getParentModule(dependency) {\n    return dependency._parentModule;\n  }\n  /**\n   * @param {Dependency} dependency the dependency\n   * @returns {DependenciesBlock} parent block\n   */\n\n\n  getParentBlock(dependency) {\n    return dependency._parentDependenciesBlock;\n  }\n  /**\n   * @param {Dependency} dependency the dependency\n   * @returns {number} index\n   */\n\n\n  getParentBlockIndex(dependency) {\n    return dependency._parentDependenciesBlockIndex;\n  }\n  /**\n   * @param {Module} originModule the referencing module\n   * @param {Dependency} dependency the referencing dependency\n   * @param {Module} module the referenced module\n   * @returns {void}\n   */\n\n\n  setResolvedModule(originModule, dependency, module) {\n    const connection = new ModuleGraphConnection(originModule, dependency, module, undefined, dependency.weak, dependency.getCondition(this));\n\n    const connections = this._getModuleGraphModule(module).incomingConnections;\n\n    connections.add(connection);\n\n    if (originModule) {\n      const mgm = this._getModuleGraphModule(originModule);\n\n      if (mgm._unassignedConnections === undefined) {\n        mgm._unassignedConnections = [];\n      }\n\n      mgm._unassignedConnections.push(connection);\n\n      if (mgm.outgoingConnections === undefined) {\n        mgm.outgoingConnections = new SortableSet();\n      }\n\n      mgm.outgoingConnections.add(connection);\n    } else {\n      this._dependencyMap.set(dependency, connection);\n    }\n  }\n  /**\n   * @param {Dependency} dependency the referencing dependency\n   * @param {Module} module the referenced module\n   * @returns {void}\n   */\n\n\n  updateModule(dependency, module) {\n    const connection = this.getConnection(dependency);\n    if (connection.module === module) return;\n    const newConnection = connection.clone();\n    newConnection.module = module;\n\n    this._dependencyMap.set(dependency, newConnection);\n\n    connection.setActive(false);\n\n    const originMgm = this._getModuleGraphModule(connection.originModule);\n\n    originMgm.outgoingConnections.add(newConnection);\n\n    const targetMgm = this._getModuleGraphModule(module);\n\n    targetMgm.incomingConnections.add(newConnection);\n  }\n  /**\n   * @param {Dependency} dependency the referencing dependency\n   * @returns {void}\n   */\n\n\n  removeConnection(dependency) {\n    const connection = this.getConnection(dependency);\n\n    const targetMgm = this._getModuleGraphModule(connection.module);\n\n    targetMgm.incomingConnections.delete(connection);\n\n    const originMgm = this._getModuleGraphModule(connection.originModule);\n\n    originMgm.outgoingConnections.delete(connection);\n\n    this._dependencyMap.set(dependency, null);\n  }\n  /**\n   * @param {Dependency} dependency the referencing dependency\n   * @param {string} explanation an explanation\n   * @returns {void}\n   */\n\n\n  addExplanation(dependency, explanation) {\n    const connection = this.getConnection(dependency);\n    connection.addExplanation(explanation);\n  }\n  /**\n   * @param {Module} sourceModule the source module\n   * @param {Module} targetModule the target module\n   * @returns {void}\n   */\n\n\n  cloneModuleAttributes(sourceModule, targetModule) {\n    const oldMgm = this._getModuleGraphModule(sourceModule);\n\n    const newMgm = this._getModuleGraphModule(targetModule);\n\n    newMgm.postOrderIndex = oldMgm.postOrderIndex;\n    newMgm.preOrderIndex = oldMgm.preOrderIndex;\n    newMgm.depth = oldMgm.depth;\n    newMgm.exports = oldMgm.exports;\n    newMgm.async = oldMgm.async;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {void}\n   */\n\n\n  removeModuleAttributes(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    mgm.postOrderIndex = null;\n    mgm.preOrderIndex = null;\n    mgm.depth = null;\n    mgm.async = false;\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  removeAllModuleAttributes() {\n    for (const mgm of this._moduleMap.values()) {\n      mgm.postOrderIndex = null;\n      mgm.preOrderIndex = null;\n      mgm.depth = null;\n      mgm.async = false;\n    }\n  }\n  /**\n   * @param {Module} oldModule the old referencing module\n   * @param {Module} newModule the new referencing module\n   * @param {function(ModuleGraphConnection): boolean} filterConnection filter predicate for replacement\n   * @returns {void}\n   */\n\n\n  moveModuleConnections(oldModule, newModule, filterConnection) {\n    if (oldModule === newModule) return;\n\n    const oldMgm = this._getModuleGraphModule(oldModule);\n\n    const newMgm = this._getModuleGraphModule(newModule); // Outgoing connections\n\n\n    const oldConnections = oldMgm.outgoingConnections;\n\n    if (oldConnections !== undefined) {\n      if (newMgm.outgoingConnections === undefined) {\n        newMgm.outgoingConnections = new SortableSet();\n      }\n\n      const newConnections = newMgm.outgoingConnections;\n\n      for (const connection of oldConnections) {\n        if (filterConnection(connection)) {\n          connection.originModule = newModule;\n          newConnections.add(connection);\n          oldConnections.delete(connection);\n        }\n      }\n    } // Incoming connections\n\n\n    const oldConnections2 = oldMgm.incomingConnections;\n    const newConnections2 = newMgm.incomingConnections;\n\n    for (const connection of oldConnections2) {\n      if (filterConnection(connection)) {\n        connection.module = newModule;\n        newConnections2.add(connection);\n        oldConnections2.delete(connection);\n      }\n    }\n  }\n  /**\n   * @param {Module} oldModule the old referencing module\n   * @param {Module} newModule the new referencing module\n   * @param {function(ModuleGraphConnection): boolean} filterConnection filter predicate for replacement\n   * @returns {void}\n   */\n\n\n  copyOutgoingModuleConnections(oldModule, newModule, filterConnection) {\n    if (oldModule === newModule) return;\n\n    const oldMgm = this._getModuleGraphModule(oldModule);\n\n    const newMgm = this._getModuleGraphModule(newModule); // Outgoing connections\n\n\n    const oldConnections = oldMgm.outgoingConnections;\n\n    if (oldConnections !== undefined) {\n      if (newMgm.outgoingConnections === undefined) {\n        newMgm.outgoingConnections = new SortableSet();\n      }\n\n      const newConnections = newMgm.outgoingConnections;\n\n      for (const connection of oldConnections) {\n        if (filterConnection(connection)) {\n          const newConnection = connection.clone();\n          newConnection.originModule = newModule;\n          newConnections.add(newConnection);\n\n          if (newConnection.module !== undefined) {\n            const otherMgm = this._getModuleGraphModule(newConnection.module);\n\n            otherMgm.incomingConnections.add(newConnection);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @param {Module} module the referenced module\n   * @param {string} explanation an explanation why it's referenced\n   * @returns {void}\n   */\n\n\n  addExtraReason(module, explanation) {\n    const connections = this._getModuleGraphModule(module).incomingConnections;\n\n    connections.add(new ModuleGraphConnection(null, null, module, explanation));\n  }\n  /**\n   * @param {Dependency} dependency the dependency to look for a referenced module\n   * @returns {Module} the referenced module\n   */\n\n\n  getResolvedModule(dependency) {\n    const connection = this.getConnection(dependency);\n    return connection !== undefined ? connection.resolvedModule : null;\n  }\n  /**\n   * @param {Dependency} dependency the dependency to look for a referenced module\n   * @returns {ModuleGraphConnection | undefined} the connection\n   */\n\n\n  getConnection(dependency) {\n    const connection = this._dependencyMap.get(dependency);\n\n    if (connection === undefined) {\n      const module = this.getParentModule(dependency);\n\n      if (module !== undefined) {\n        const mgm = this._getModuleGraphModule(module);\n\n        if (mgm._unassignedConnections && mgm._unassignedConnections.length !== 0) {\n          let foundConnection;\n\n          for (const connection of mgm._unassignedConnections) {\n            this._dependencyMap.set(connection.dependency, connection);\n\n            if (connection.dependency === dependency) foundConnection = connection;\n          }\n\n          mgm._unassignedConnections.length = 0;\n\n          if (foundConnection !== undefined) {\n            return foundConnection;\n          }\n        }\n      }\n\n      this._dependencyMap.set(dependency, null);\n\n      return undefined;\n    }\n\n    return connection === null ? undefined : connection;\n  }\n  /**\n   * @param {Dependency} dependency the dependency to look for a referenced module\n   * @returns {Module} the referenced module\n   */\n\n\n  getModule(dependency) {\n    const connection = this.getConnection(dependency);\n    return connection !== undefined ? connection.module : null;\n  }\n  /**\n   * @param {Dependency} dependency the dependency to look for a referencing module\n   * @returns {Module} the referencing module\n   */\n\n\n  getOrigin(dependency) {\n    const connection = this.getConnection(dependency);\n    return connection !== undefined ? connection.originModule : null;\n  }\n  /**\n   * @param {Dependency} dependency the dependency to look for a referencing module\n   * @returns {Module} the original referencing module\n   */\n\n\n  getResolvedOrigin(dependency) {\n    const connection = this.getConnection(dependency);\n    return connection !== undefined ? connection.resolvedOriginModule : null;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {Iterable<ModuleGraphConnection>} reasons why a module is included\n   */\n\n\n  getIncomingConnections(module) {\n    const connections = this._getModuleGraphModule(module).incomingConnections;\n\n    return connections;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {Iterable<ModuleGraphConnection>} list of outgoing connections\n   */\n\n\n  getOutgoingConnections(module) {\n    const connections = this._getModuleGraphModule(module).outgoingConnections;\n\n    return connections === undefined ? EMPTY_SET : connections;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} reasons why a module is included, in a map by source module\n   */\n\n\n  getIncomingConnectionsByOriginModule(module) {\n    const connections = this._getModuleGraphModule(module).incomingConnections;\n\n    return connections.getFromUnorderedCache(getConnectionsByOriginModule);\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]> | undefined} connections to modules, in a map by module\n   */\n\n\n  getOutgoingConnectionsByModule(module) {\n    const connections = this._getModuleGraphModule(module).outgoingConnections;\n\n    return connections === undefined ? undefined : connections.getFromUnorderedCache(getConnectionsByModule);\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {ModuleProfile | null} the module profile\n   */\n\n\n  getProfile(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.profile;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {ModuleProfile | null} profile the module profile\n   * @returns {void}\n   */\n\n\n  setProfile(module, profile) {\n    const mgm = this._getModuleGraphModule(module);\n\n    mgm.profile = profile;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {Module | null} the issuer module\n   */\n\n\n  getIssuer(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.issuer;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {Module | null} issuer the issuer module\n   * @returns {void}\n   */\n\n\n  setIssuer(module, issuer) {\n    const mgm = this._getModuleGraphModule(module);\n\n    mgm.issuer = issuer;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {Module | null} issuer the issuer module\n   * @returns {void}\n   */\n\n\n  setIssuerIfUnset(module, issuer) {\n    const mgm = this._getModuleGraphModule(module);\n\n    if (mgm.issuer === undefined) mgm.issuer = issuer;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {(string | OptimizationBailoutFunction)[]} optimization bailouts\n   */\n\n\n  getOptimizationBailout(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.optimizationBailout;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {true | string[] | null} the provided exports\n   */\n\n\n  getProvidedExports(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.exports.getProvidedExports();\n  }\n  /**\n   * @param {Module} module the module\n   * @param {string | string[]} exportName a name of an export\n   * @returns {boolean | null} true, if the export is provided by the module.\n   * null, if it's unknown.\n   * false, if it's not provided.\n   */\n\n\n  isExportProvided(module, exportName) {\n    const mgm = this._getModuleGraphModule(module);\n\n    const result = mgm.exports.isExportProvided(exportName);\n    return result === undefined ? null : result;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {ExportsInfo} info about the exports\n   */\n\n\n  getExportsInfo(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.exports;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {string} exportName the export\n   * @returns {ExportInfo} info about the export\n   */\n\n\n  getExportInfo(module, exportName) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.exports.getExportInfo(exportName);\n  }\n  /**\n   * @param {Module} module the module\n   * @param {string} exportName the export\n   * @returns {ExportInfo} info about the export (do not modify)\n   */\n\n\n  getReadOnlyExportInfo(module, exportName) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.exports.getReadOnlyExportInfo(exportName);\n  }\n  /**\n   * @param {Module} module the module\n   * @param {RuntimeSpec} runtime the runtime\n   * @returns {false | true | SortableSet<string> | null} the used exports\n   * false: module is not used at all.\n   * true: the module namespace/object export is used.\n   * SortableSet<string>: these export names are used.\n   * empty SortableSet<string>: module is used but no export.\n   * null: unknown, worst case should be assumed.\n   */\n\n\n  getUsedExports(module, runtime) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.exports.getUsedExports(runtime);\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {number} the index of the module\n   */\n\n\n  getPreOrderIndex(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.preOrderIndex;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {number} the index of the module\n   */\n\n\n  getPostOrderIndex(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.postOrderIndex;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {number} index the index of the module\n   * @returns {void}\n   */\n\n\n  setPreOrderIndex(module, index) {\n    const mgm = this._getModuleGraphModule(module);\n\n    mgm.preOrderIndex = index;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {number} index the index of the module\n   * @returns {boolean} true, if the index was set\n   */\n\n\n  setPreOrderIndexIfUnset(module, index) {\n    const mgm = this._getModuleGraphModule(module);\n\n    if (mgm.preOrderIndex === null) {\n      mgm.preOrderIndex = index;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {number} index the index of the module\n   * @returns {void}\n   */\n\n\n  setPostOrderIndex(module, index) {\n    const mgm = this._getModuleGraphModule(module);\n\n    mgm.postOrderIndex = index;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {number} index the index of the module\n   * @returns {boolean} true, if the index was set\n   */\n\n\n  setPostOrderIndexIfUnset(module, index) {\n    const mgm = this._getModuleGraphModule(module);\n\n    if (mgm.postOrderIndex === null) {\n      mgm.postOrderIndex = index;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {number} the depth of the module\n   */\n\n\n  getDepth(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.depth;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {number} depth the depth of the module\n   * @returns {void}\n   */\n\n\n  setDepth(module, depth) {\n    const mgm = this._getModuleGraphModule(module);\n\n    mgm.depth = depth;\n  }\n  /**\n   * @param {Module} module the module\n   * @param {number} depth the depth of the module\n   * @returns {boolean} true, if the depth was set\n   */\n\n\n  setDepthIfLower(module, depth) {\n    const mgm = this._getModuleGraphModule(module);\n\n    if (mgm.depth === null || mgm.depth > depth) {\n      mgm.depth = depth;\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {boolean} true, if the module is async\n   */\n\n\n  isAsync(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    return mgm.async;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {void}\n   */\n\n\n  setAsync(module) {\n    const mgm = this._getModuleGraphModule(module);\n\n    mgm.async = true;\n  }\n  /**\n   * @param {any} thing any thing\n   * @returns {Object} metadata\n   */\n\n\n  getMeta(thing) {\n    let meta = this._metaMap.get(thing);\n\n    if (meta === undefined) {\n      meta = Object.create(null);\n\n      this._metaMap.set(thing, meta);\n    }\n\n    return meta;\n  }\n  /**\n   * @param {any} thing any thing\n   * @returns {Object} metadata\n   */\n\n\n  getMetaIfExisting(thing) {\n    return this._metaMap.get(thing);\n  }\n  /**\n   * @param {string=} cacheStage a persistent stage name for caching\n   */\n\n\n  freeze(cacheStage) {\n    this._cache = new WeakTupleMap();\n    this._cacheStage = cacheStage;\n  }\n\n  unfreeze() {\n    this._cache = undefined;\n    this._cacheStage = undefined;\n  }\n  /**\n   * @template {any[]} T\n   * @template V\n   * @param {(moduleGraph: ModuleGraph, ...args: T) => V} fn computer\n   * @param {T} args arguments\n   * @returns {V} computed value or cached\n   */\n\n\n  cached(fn) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (this._cache === undefined) return fn(this, ...args);\n    return this._cache.provide(fn, ...args, () => fn(this, ...args));\n  }\n  /**\n   * @param {Map<Module, WeakTupleMap<any, any>>} moduleMemCaches mem caches for modules for better caching\n   */\n\n\n  setModuleMemCaches(moduleMemCaches) {\n    this._moduleMemCaches = moduleMemCaches;\n  }\n  /**\n   * @param {Dependency} dependency dependency\n   * @param {...any} args arguments, last argument is a function called with moduleGraph, dependency, ...args\n   * @returns {any} computed value or cached\n   */\n\n\n  dependencyCacheProvide(dependency) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    /** @type {(moduleGraph: ModuleGraph, dependency: Dependency, ...args: any[]) => any} */\n    const fn = args.pop();\n\n    if (this._moduleMemCaches && this._cacheStage) {\n      const memCache = this._moduleMemCaches.get(this.getParentModule(dependency));\n\n      if (memCache !== undefined) {\n        return memCache.provide(dependency, this._cacheStage, ...args, () => fn(this, dependency, ...args));\n      }\n    }\n\n    if (this._cache === undefined) return fn(this, dependency, ...args);\n    return this._cache.provide(dependency, ...args, () => fn(this, dependency, ...args));\n  } // TODO remove in webpack 6\n\n  /**\n   * @param {Module} module the module\n   * @param {string} deprecateMessage message for the deprecation message\n   * @param {string} deprecationCode code for the deprecation\n   * @returns {ModuleGraph} the module graph\n   */\n\n\n  static getModuleGraphForModule(module, deprecateMessage, deprecationCode) {\n    const fn = deprecateMap.get(deprecateMessage);\n    if (fn) return fn(module);\n    const newFn = util.deprecate(\n    /**\n     * @param {Module} module the module\n     * @returns {ModuleGraph} the module graph\n     */\n    module => {\n      const moduleGraph = moduleGraphForModuleMap.get(module);\n      if (!moduleGraph) throw new Error(deprecateMessage + \"There was no ModuleGraph assigned to the Module for backward-compat (Use the new API)\");\n      return moduleGraph;\n    }, deprecateMessage + \": Use new ModuleGraph API\", deprecationCode);\n    deprecateMap.set(deprecateMessage, newFn);\n    return newFn(module);\n  } // TODO remove in webpack 6\n\n  /**\n   * @param {Module} module the module\n   * @param {ModuleGraph} moduleGraph the module graph\n   * @returns {void}\n   */\n\n\n  static setModuleGraphForModule(module, moduleGraph) {\n    moduleGraphForModuleMap.set(module, moduleGraph);\n  } // TODO remove in webpack 6\n\n  /**\n   * @param {Module} module the module\n   * @returns {void}\n   */\n\n\n  static clearModuleGraphForModule(module) {\n    moduleGraphForModuleMap.delete(module);\n  }\n\n} // TODO remove in webpack 6\n\n/** @type {WeakMap<Module, ModuleGraph>} */\n\n\nconst moduleGraphForModuleMap = new WeakMap(); // TODO remove in webpack 6\n\n/** @type {Map<string, (module: Module) => ModuleGraph>} */\n\nconst deprecateMap = new Map();\nmodule.exports = ModuleGraph;\nmodule.exports.ModuleGraphConnection = ModuleGraphConnection;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ModuleGraph.js"],"names":["util","require","ExportsInfo","ModuleGraphConnection","SortableSet","WeakTupleMap","EMPTY_SET","Set","getConnectionsByOriginModule","set","map","Map","lastModule","lastList","undefined","connection","originModule","push","list","get","getConnectionsByModule","module","ModuleGraphModule","constructor","incomingConnections","outgoingConnections","issuer","optimizationBailout","exports","preOrderIndex","postOrderIndex","depth","profile","async","_unassignedConnections","ModuleGraph","_dependencyMap","WeakMap","_moduleMap","_metaMap","_cache","_moduleMemCaches","_getModuleGraphModule","mgm","setParents","dependency","block","indexInBlock","_parentDependenciesBlockIndex","_parentDependenciesBlock","_parentModule","getParentModule","getParentBlock","getParentBlockIndex","setResolvedModule","weak","getCondition","connections","add","updateModule","getConnection","newConnection","clone","setActive","originMgm","targetMgm","removeConnection","delete","addExplanation","explanation","cloneModuleAttributes","sourceModule","targetModule","oldMgm","newMgm","removeModuleAttributes","removeAllModuleAttributes","values","moveModuleConnections","oldModule","newModule","filterConnection","oldConnections","newConnections","oldConnections2","newConnections2","copyOutgoingModuleConnections","otherMgm","addExtraReason","getResolvedModule","resolvedModule","length","foundConnection","getModule","getOrigin","getResolvedOrigin","resolvedOriginModule","getIncomingConnections","getOutgoingConnections","getIncomingConnectionsByOriginModule","getFromUnorderedCache","getOutgoingConnectionsByModule","getProfile","setProfile","getIssuer","setIssuer","setIssuerIfUnset","getOptimizationBailout","getProvidedExports","isExportProvided","exportName","result","getExportsInfo","getExportInfo","getReadOnlyExportInfo","getUsedExports","runtime","getPreOrderIndex","getPostOrderIndex","setPreOrderIndex","index","setPreOrderIndexIfUnset","setPostOrderIndex","setPostOrderIndexIfUnset","getDepth","setDepth","setDepthIfLower","isAsync","setAsync","getMeta","thing","meta","Object","create","getMetaIfExisting","freeze","cacheStage","_cacheStage","unfreeze","cached","fn","args","provide","setModuleMemCaches","moduleMemCaches","dependencyCacheProvide","pop","memCache","getModuleGraphForModule","deprecateMessage","deprecationCode","deprecateMap","newFn","deprecate","moduleGraph","moduleGraphForModuleMap","Error","setModuleGraphForModule","clearModuleGraphForModule"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst ExportsInfo = require(\"./ExportsInfo\");\nconst ModuleGraphConnection = require(\"./ModuleGraphConnection\");\nconst SortableSet = require(\"./util/SortableSet\");\nconst WeakTupleMap = require(\"./util/WeakTupleMap\");\n\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./ExportsInfo\").ExportInfo} ExportInfo */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleProfile\")} ModuleProfile */\n/** @typedef {import(\"./RequestShortener\")} RequestShortener */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @callback OptimizationBailoutFunction\n * @param {RequestShortener} requestShortener\n * @returns {string}\n */\n\nconst EMPTY_SET = new Set();\n\n/**\n * @param {SortableSet<ModuleGraphConnection>} set input\n * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} mapped by origin module\n */\nconst getConnectionsByOriginModule = set => {\n\tconst map = new Map();\n\t/** @type {Module | 0} */\n\tlet lastModule = 0;\n\t/** @type {ModuleGraphConnection[]} */\n\tlet lastList = undefined;\n\tfor (const connection of set) {\n\t\tconst { originModule } = connection;\n\t\tif (lastModule === originModule) {\n\t\t\tlastList.push(connection);\n\t\t} else {\n\t\t\tlastModule = originModule;\n\t\t\tconst list = map.get(originModule);\n\t\t\tif (list !== undefined) {\n\t\t\t\tlastList = list;\n\t\t\t\tlist.push(connection);\n\t\t\t} else {\n\t\t\t\tconst list = [connection];\n\t\t\t\tlastList = list;\n\t\t\t\tmap.set(originModule, list);\n\t\t\t}\n\t\t}\n\t}\n\treturn map;\n};\n\n/**\n * @param {SortableSet<ModuleGraphConnection>} set input\n * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} mapped by module\n */\nconst getConnectionsByModule = set => {\n\tconst map = new Map();\n\t/** @type {Module | 0} */\n\tlet lastModule = 0;\n\t/** @type {ModuleGraphConnection[]} */\n\tlet lastList = undefined;\n\tfor (const connection of set) {\n\t\tconst { module } = connection;\n\t\tif (lastModule === module) {\n\t\t\tlastList.push(connection);\n\t\t} else {\n\t\t\tlastModule = module;\n\t\t\tconst list = map.get(module);\n\t\t\tif (list !== undefined) {\n\t\t\t\tlastList = list;\n\t\t\t\tlist.push(connection);\n\t\t\t} else {\n\t\t\t\tconst list = [connection];\n\t\t\t\tlastList = list;\n\t\t\t\tmap.set(module, list);\n\t\t\t}\n\t\t}\n\t}\n\treturn map;\n};\n\nclass ModuleGraphModule {\n\tconstructor() {\n\t\t/** @type {SortableSet<ModuleGraphConnection>} */\n\t\tthis.incomingConnections = new SortableSet();\n\t\t/** @type {SortableSet<ModuleGraphConnection> | undefined} */\n\t\tthis.outgoingConnections = undefined;\n\t\t/** @type {Module | null} */\n\t\tthis.issuer = undefined;\n\t\t/** @type {(string | OptimizationBailoutFunction)[]} */\n\t\tthis.optimizationBailout = [];\n\t\t/** @type {ExportsInfo} */\n\t\tthis.exports = new ExportsInfo();\n\t\t/** @type {number} */\n\t\tthis.preOrderIndex = null;\n\t\t/** @type {number} */\n\t\tthis.postOrderIndex = null;\n\t\t/** @type {number} */\n\t\tthis.depth = null;\n\t\t/** @type {ModuleProfile} */\n\t\tthis.profile = undefined;\n\t\t/** @type {boolean} */\n\t\tthis.async = false;\n\t\t/** @type {ModuleGraphConnection[]} */\n\t\tthis._unassignedConnections = undefined;\n\t}\n}\n\nclass ModuleGraph {\n\tconstructor() {\n\t\t/** @type {WeakMap<Dependency, ModuleGraphConnection>} */\n\t\tthis._dependencyMap = new WeakMap();\n\t\t/** @type {Map<Module, ModuleGraphModule>} */\n\t\tthis._moduleMap = new Map();\n\t\t/** @type {WeakMap<any, Object>} */\n\t\tthis._metaMap = new WeakMap();\n\n\t\t/** @type {WeakTupleMap<any[], any>} */\n\t\tthis._cache = undefined;\n\n\t\t/** @type {Map<Module, WeakTupleMap<any, any>>} */\n\t\tthis._moduleMemCaches = undefined;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {ModuleGraphModule} the internal module\n\t */\n\t_getModuleGraphModule(module) {\n\t\tlet mgm = this._moduleMap.get(module);\n\t\tif (mgm === undefined) {\n\t\t\tmgm = new ModuleGraphModule();\n\t\t\tthis._moduleMap.set(module, mgm);\n\t\t}\n\t\treturn mgm;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency\n\t * @param {DependenciesBlock} block parent block\n\t * @param {Module} module parent module\n\t * @param {number=} indexInBlock position in block\n\t * @returns {void}\n\t */\n\tsetParents(dependency, block, module, indexInBlock = -1) {\n\t\tdependency._parentDependenciesBlockIndex = indexInBlock;\n\t\tdependency._parentDependenciesBlock = block;\n\t\tdependency._parentModule = module;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency\n\t * @returns {Module} parent module\n\t */\n\tgetParentModule(dependency) {\n\t\treturn dependency._parentModule;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency\n\t * @returns {DependenciesBlock} parent block\n\t */\n\tgetParentBlock(dependency) {\n\t\treturn dependency._parentDependenciesBlock;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency\n\t * @returns {number} index\n\t */\n\tgetParentBlockIndex(dependency) {\n\t\treturn dependency._parentDependenciesBlockIndex;\n\t}\n\n\t/**\n\t * @param {Module} originModule the referencing module\n\t * @param {Dependency} dependency the referencing dependency\n\t * @param {Module} module the referenced module\n\t * @returns {void}\n\t */\n\tsetResolvedModule(originModule, dependency, module) {\n\t\tconst connection = new ModuleGraphConnection(\n\t\t\toriginModule,\n\t\t\tdependency,\n\t\t\tmodule,\n\t\t\tundefined,\n\t\t\tdependency.weak,\n\t\t\tdependency.getCondition(this)\n\t\t);\n\t\tconst connections = this._getModuleGraphModule(module).incomingConnections;\n\t\tconnections.add(connection);\n\t\tif (originModule) {\n\t\t\tconst mgm = this._getModuleGraphModule(originModule);\n\t\t\tif (mgm._unassignedConnections === undefined) {\n\t\t\t\tmgm._unassignedConnections = [];\n\t\t\t}\n\t\t\tmgm._unassignedConnections.push(connection);\n\t\t\tif (mgm.outgoingConnections === undefined) {\n\t\t\t\tmgm.outgoingConnections = new SortableSet();\n\t\t\t}\n\t\t\tmgm.outgoingConnections.add(connection);\n\t\t} else {\n\t\t\tthis._dependencyMap.set(dependency, connection);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the referencing dependency\n\t * @param {Module} module the referenced module\n\t * @returns {void}\n\t */\n\tupdateModule(dependency, module) {\n\t\tconst connection = this.getConnection(dependency);\n\t\tif (connection.module === module) return;\n\t\tconst newConnection = connection.clone();\n\t\tnewConnection.module = module;\n\t\tthis._dependencyMap.set(dependency, newConnection);\n\t\tconnection.setActive(false);\n\t\tconst originMgm = this._getModuleGraphModule(connection.originModule);\n\t\toriginMgm.outgoingConnections.add(newConnection);\n\t\tconst targetMgm = this._getModuleGraphModule(module);\n\t\ttargetMgm.incomingConnections.add(newConnection);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the referencing dependency\n\t * @returns {void}\n\t */\n\tremoveConnection(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\tconst targetMgm = this._getModuleGraphModule(connection.module);\n\t\ttargetMgm.incomingConnections.delete(connection);\n\t\tconst originMgm = this._getModuleGraphModule(connection.originModule);\n\t\toriginMgm.outgoingConnections.delete(connection);\n\t\tthis._dependencyMap.set(dependency, null);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the referencing dependency\n\t * @param {string} explanation an explanation\n\t * @returns {void}\n\t */\n\taddExplanation(dependency, explanation) {\n\t\tconst connection = this.getConnection(dependency);\n\t\tconnection.addExplanation(explanation);\n\t}\n\n\t/**\n\t * @param {Module} sourceModule the source module\n\t * @param {Module} targetModule the target module\n\t * @returns {void}\n\t */\n\tcloneModuleAttributes(sourceModule, targetModule) {\n\t\tconst oldMgm = this._getModuleGraphModule(sourceModule);\n\t\tconst newMgm = this._getModuleGraphModule(targetModule);\n\t\tnewMgm.postOrderIndex = oldMgm.postOrderIndex;\n\t\tnewMgm.preOrderIndex = oldMgm.preOrderIndex;\n\t\tnewMgm.depth = oldMgm.depth;\n\t\tnewMgm.exports = oldMgm.exports;\n\t\tnewMgm.async = oldMgm.async;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {void}\n\t */\n\tremoveModuleAttributes(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.postOrderIndex = null;\n\t\tmgm.preOrderIndex = null;\n\t\tmgm.depth = null;\n\t\tmgm.async = false;\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tremoveAllModuleAttributes() {\n\t\tfor (const mgm of this._moduleMap.values()) {\n\t\t\tmgm.postOrderIndex = null;\n\t\t\tmgm.preOrderIndex = null;\n\t\t\tmgm.depth = null;\n\t\t\tmgm.async = false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} oldModule the old referencing module\n\t * @param {Module} newModule the new referencing module\n\t * @param {function(ModuleGraphConnection): boolean} filterConnection filter predicate for replacement\n\t * @returns {void}\n\t */\n\tmoveModuleConnections(oldModule, newModule, filterConnection) {\n\t\tif (oldModule === newModule) return;\n\t\tconst oldMgm = this._getModuleGraphModule(oldModule);\n\t\tconst newMgm = this._getModuleGraphModule(newModule);\n\t\t// Outgoing connections\n\t\tconst oldConnections = oldMgm.outgoingConnections;\n\t\tif (oldConnections !== undefined) {\n\t\t\tif (newMgm.outgoingConnections === undefined) {\n\t\t\t\tnewMgm.outgoingConnections = new SortableSet();\n\t\t\t}\n\t\t\tconst newConnections = newMgm.outgoingConnections;\n\t\t\tfor (const connection of oldConnections) {\n\t\t\t\tif (filterConnection(connection)) {\n\t\t\t\t\tconnection.originModule = newModule;\n\t\t\t\t\tnewConnections.add(connection);\n\t\t\t\t\toldConnections.delete(connection);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Incoming connections\n\t\tconst oldConnections2 = oldMgm.incomingConnections;\n\t\tconst newConnections2 = newMgm.incomingConnections;\n\t\tfor (const connection of oldConnections2) {\n\t\t\tif (filterConnection(connection)) {\n\t\t\t\tconnection.module = newModule;\n\t\t\t\tnewConnections2.add(connection);\n\t\t\t\toldConnections2.delete(connection);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} oldModule the old referencing module\n\t * @param {Module} newModule the new referencing module\n\t * @param {function(ModuleGraphConnection): boolean} filterConnection filter predicate for replacement\n\t * @returns {void}\n\t */\n\tcopyOutgoingModuleConnections(oldModule, newModule, filterConnection) {\n\t\tif (oldModule === newModule) return;\n\t\tconst oldMgm = this._getModuleGraphModule(oldModule);\n\t\tconst newMgm = this._getModuleGraphModule(newModule);\n\t\t// Outgoing connections\n\t\tconst oldConnections = oldMgm.outgoingConnections;\n\t\tif (oldConnections !== undefined) {\n\t\t\tif (newMgm.outgoingConnections === undefined) {\n\t\t\t\tnewMgm.outgoingConnections = new SortableSet();\n\t\t\t}\n\t\t\tconst newConnections = newMgm.outgoingConnections;\n\t\t\tfor (const connection of oldConnections) {\n\t\t\t\tif (filterConnection(connection)) {\n\t\t\t\t\tconst newConnection = connection.clone();\n\t\t\t\t\tnewConnection.originModule = newModule;\n\t\t\t\t\tnewConnections.add(newConnection);\n\t\t\t\t\tif (newConnection.module !== undefined) {\n\t\t\t\t\t\tconst otherMgm = this._getModuleGraphModule(newConnection.module);\n\t\t\t\t\t\totherMgm.incomingConnections.add(newConnection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} module the referenced module\n\t * @param {string} explanation an explanation why it's referenced\n\t * @returns {void}\n\t */\n\taddExtraReason(module, explanation) {\n\t\tconst connections = this._getModuleGraphModule(module).incomingConnections;\n\t\tconnections.add(new ModuleGraphConnection(null, null, module, explanation));\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referenced module\n\t * @returns {Module} the referenced module\n\t */\n\tgetResolvedModule(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\treturn connection !== undefined ? connection.resolvedModule : null;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referenced module\n\t * @returns {ModuleGraphConnection | undefined} the connection\n\t */\n\tgetConnection(dependency) {\n\t\tconst connection = this._dependencyMap.get(dependency);\n\t\tif (connection === undefined) {\n\t\t\tconst module = this.getParentModule(dependency);\n\t\t\tif (module !== undefined) {\n\t\t\t\tconst mgm = this._getModuleGraphModule(module);\n\t\t\t\tif (\n\t\t\t\t\tmgm._unassignedConnections &&\n\t\t\t\t\tmgm._unassignedConnections.length !== 0\n\t\t\t\t) {\n\t\t\t\t\tlet foundConnection;\n\t\t\t\t\tfor (const connection of mgm._unassignedConnections) {\n\t\t\t\t\t\tthis._dependencyMap.set(connection.dependency, connection);\n\t\t\t\t\t\tif (connection.dependency === dependency)\n\t\t\t\t\t\t\tfoundConnection = connection;\n\t\t\t\t\t}\n\t\t\t\t\tmgm._unassignedConnections.length = 0;\n\t\t\t\t\tif (foundConnection !== undefined) {\n\t\t\t\t\t\treturn foundConnection;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._dependencyMap.set(dependency, null);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn connection === null ? undefined : connection;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referenced module\n\t * @returns {Module} the referenced module\n\t */\n\tgetModule(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\treturn connection !== undefined ? connection.module : null;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referencing module\n\t * @returns {Module} the referencing module\n\t */\n\tgetOrigin(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\treturn connection !== undefined ? connection.originModule : null;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referencing module\n\t * @returns {Module} the original referencing module\n\t */\n\tgetResolvedOrigin(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\treturn connection !== undefined ? connection.resolvedOriginModule : null;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {Iterable<ModuleGraphConnection>} reasons why a module is included\n\t */\n\tgetIncomingConnections(module) {\n\t\tconst connections = this._getModuleGraphModule(module).incomingConnections;\n\t\treturn connections;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {Iterable<ModuleGraphConnection>} list of outgoing connections\n\t */\n\tgetOutgoingConnections(module) {\n\t\tconst connections = this._getModuleGraphModule(module).outgoingConnections;\n\t\treturn connections === undefined ? EMPTY_SET : connections;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} reasons why a module is included, in a map by source module\n\t */\n\tgetIncomingConnectionsByOriginModule(module) {\n\t\tconst connections = this._getModuleGraphModule(module).incomingConnections;\n\t\treturn connections.getFromUnorderedCache(getConnectionsByOriginModule);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]> | undefined} connections to modules, in a map by module\n\t */\n\tgetOutgoingConnectionsByModule(module) {\n\t\tconst connections = this._getModuleGraphModule(module).outgoingConnections;\n\t\treturn connections === undefined\n\t\t\t? undefined\n\t\t\t: connections.getFromUnorderedCache(getConnectionsByModule);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {ModuleProfile | null} the module profile\n\t */\n\tgetProfile(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.profile;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {ModuleProfile | null} profile the module profile\n\t * @returns {void}\n\t */\n\tsetProfile(module, profile) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.profile = profile;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {Module | null} the issuer module\n\t */\n\tgetIssuer(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.issuer;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {Module | null} issuer the issuer module\n\t * @returns {void}\n\t */\n\tsetIssuer(module, issuer) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.issuer = issuer;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {Module | null} issuer the issuer module\n\t * @returns {void}\n\t */\n\tsetIssuerIfUnset(module, issuer) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tif (mgm.issuer === undefined) mgm.issuer = issuer;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {(string | OptimizationBailoutFunction)[]} optimization bailouts\n\t */\n\tgetOptimizationBailout(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.optimizationBailout;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {true | string[] | null} the provided exports\n\t */\n\tgetProvidedExports(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports.getProvidedExports();\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {string | string[]} exportName a name of an export\n\t * @returns {boolean | null} true, if the export is provided by the module.\n\t * null, if it's unknown.\n\t * false, if it's not provided.\n\t */\n\tisExportProvided(module, exportName) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tconst result = mgm.exports.isExportProvided(exportName);\n\t\treturn result === undefined ? null : result;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {ExportsInfo} info about the exports\n\t */\n\tgetExportsInfo(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {string} exportName the export\n\t * @returns {ExportInfo} info about the export\n\t */\n\tgetExportInfo(module, exportName) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports.getExportInfo(exportName);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {string} exportName the export\n\t * @returns {ExportInfo} info about the export (do not modify)\n\t */\n\tgetReadOnlyExportInfo(module, exportName) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports.getReadOnlyExportInfo(exportName);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {RuntimeSpec} runtime the runtime\n\t * @returns {false | true | SortableSet<string> | null} the used exports\n\t * false: module is not used at all.\n\t * true: the module namespace/object export is used.\n\t * SortableSet<string>: these export names are used.\n\t * empty SortableSet<string>: module is used but no export.\n\t * null: unknown, worst case should be assumed.\n\t */\n\tgetUsedExports(module, runtime) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports.getUsedExports(runtime);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {number} the index of the module\n\t */\n\tgetPreOrderIndex(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.preOrderIndex;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {number} the index of the module\n\t */\n\tgetPostOrderIndex(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.postOrderIndex;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} index the index of the module\n\t * @returns {void}\n\t */\n\tsetPreOrderIndex(module, index) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.preOrderIndex = index;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} index the index of the module\n\t * @returns {boolean} true, if the index was set\n\t */\n\tsetPreOrderIndexIfUnset(module, index) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tif (mgm.preOrderIndex === null) {\n\t\t\tmgm.preOrderIndex = index;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} index the index of the module\n\t * @returns {void}\n\t */\n\tsetPostOrderIndex(module, index) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.postOrderIndex = index;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} index the index of the module\n\t * @returns {boolean} true, if the index was set\n\t */\n\tsetPostOrderIndexIfUnset(module, index) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tif (mgm.postOrderIndex === null) {\n\t\t\tmgm.postOrderIndex = index;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {number} the depth of the module\n\t */\n\tgetDepth(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.depth;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} depth the depth of the module\n\t * @returns {void}\n\t */\n\tsetDepth(module, depth) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.depth = depth;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} depth the depth of the module\n\t * @returns {boolean} true, if the depth was set\n\t */\n\tsetDepthIfLower(module, depth) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tif (mgm.depth === null || mgm.depth > depth) {\n\t\t\tmgm.depth = depth;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {boolean} true, if the module is async\n\t */\n\tisAsync(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.async;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {void}\n\t */\n\tsetAsync(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.async = true;\n\t}\n\n\t/**\n\t * @param {any} thing any thing\n\t * @returns {Object} metadata\n\t */\n\tgetMeta(thing) {\n\t\tlet meta = this._metaMap.get(thing);\n\t\tif (meta === undefined) {\n\t\t\tmeta = Object.create(null);\n\t\t\tthis._metaMap.set(thing, meta);\n\t\t}\n\t\treturn meta;\n\t}\n\n\t/**\n\t * @param {any} thing any thing\n\t * @returns {Object} metadata\n\t */\n\tgetMetaIfExisting(thing) {\n\t\treturn this._metaMap.get(thing);\n\t}\n\n\t/**\n\t * @param {string=} cacheStage a persistent stage name for caching\n\t */\n\tfreeze(cacheStage) {\n\t\tthis._cache = new WeakTupleMap();\n\t\tthis._cacheStage = cacheStage;\n\t}\n\n\tunfreeze() {\n\t\tthis._cache = undefined;\n\t\tthis._cacheStage = undefined;\n\t}\n\n\t/**\n\t * @template {any[]} T\n\t * @template V\n\t * @param {(moduleGraph: ModuleGraph, ...args: T) => V} fn computer\n\t * @param {T} args arguments\n\t * @returns {V} computed value or cached\n\t */\n\tcached(fn, ...args) {\n\t\tif (this._cache === undefined) return fn(this, ...args);\n\t\treturn this._cache.provide(fn, ...args, () => fn(this, ...args));\n\t}\n\n\t/**\n\t * @param {Map<Module, WeakTupleMap<any, any>>} moduleMemCaches mem caches for modules for better caching\n\t */\n\tsetModuleMemCaches(moduleMemCaches) {\n\t\tthis._moduleMemCaches = moduleMemCaches;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency\n\t * @param {...any} args arguments, last argument is a function called with moduleGraph, dependency, ...args\n\t * @returns {any} computed value or cached\n\t */\n\tdependencyCacheProvide(dependency, ...args) {\n\t\t/** @type {(moduleGraph: ModuleGraph, dependency: Dependency, ...args: any[]) => any} */\n\t\tconst fn = args.pop();\n\t\tif (this._moduleMemCaches && this._cacheStage) {\n\t\t\tconst memCache = this._moduleMemCaches.get(\n\t\t\t\tthis.getParentModule(dependency)\n\t\t\t);\n\t\t\tif (memCache !== undefined) {\n\t\t\t\treturn memCache.provide(dependency, this._cacheStage, ...args, () =>\n\t\t\t\t\tfn(this, dependency, ...args)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (this._cache === undefined) return fn(this, dependency, ...args);\n\t\treturn this._cache.provide(dependency, ...args, () =>\n\t\t\tfn(this, dependency, ...args)\n\t\t);\n\t}\n\n\t// TODO remove in webpack 6\n\t/**\n\t * @param {Module} module the module\n\t * @param {string} deprecateMessage message for the deprecation message\n\t * @param {string} deprecationCode code for the deprecation\n\t * @returns {ModuleGraph} the module graph\n\t */\n\tstatic getModuleGraphForModule(module, deprecateMessage, deprecationCode) {\n\t\tconst fn = deprecateMap.get(deprecateMessage);\n\t\tif (fn) return fn(module);\n\t\tconst newFn = util.deprecate(\n\t\t\t/**\n\t\t\t * @param {Module} module the module\n\t\t\t * @returns {ModuleGraph} the module graph\n\t\t\t */\n\t\t\tmodule => {\n\t\t\t\tconst moduleGraph = moduleGraphForModuleMap.get(module);\n\t\t\t\tif (!moduleGraph)\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tdeprecateMessage +\n\t\t\t\t\t\t\t\"There was no ModuleGraph assigned to the Module for backward-compat (Use the new API)\"\n\t\t\t\t\t);\n\t\t\t\treturn moduleGraph;\n\t\t\t},\n\t\t\tdeprecateMessage + \": Use new ModuleGraph API\",\n\t\t\tdeprecationCode\n\t\t);\n\t\tdeprecateMap.set(deprecateMessage, newFn);\n\t\treturn newFn(module);\n\t}\n\n\t// TODO remove in webpack 6\n\t/**\n\t * @param {Module} module the module\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {void}\n\t */\n\tstatic setModuleGraphForModule(module, moduleGraph) {\n\t\tmoduleGraphForModuleMap.set(module, moduleGraph);\n\t}\n\n\t// TODO remove in webpack 6\n\t/**\n\t * @param {Module} module the module\n\t * @returns {void}\n\t */\n\tstatic clearModuleGraphForModule(module) {\n\t\tmoduleGraphForModuleMap.delete(module);\n\t}\n}\n\n// TODO remove in webpack 6\n/** @type {WeakMap<Module, ModuleGraph>} */\nconst moduleGraphForModuleMap = new WeakMap();\n\n// TODO remove in webpack 6\n/** @type {Map<string, (module: Module) => ModuleGraph>} */\nconst deprecateMap = new Map();\n\nmodule.exports = ModuleGraph;\nmodule.exports.ModuleGraphConnection = ModuleGraphConnection;\n"]},"metadata":{},"sourceType":"script"}