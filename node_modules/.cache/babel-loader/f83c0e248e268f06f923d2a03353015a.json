{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst memoize = require(\"../util/memoize\");\n\nconst ModuleDependency = require(\"./ModuleDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nconst getRawDataUrlModule = memoize(() => require(\"../asset/RawDataUrlModule\"));\n\nclass CssUrlDependency extends ModuleDependency {\n  /**\n   * @param {string} request request\n   * @param {[number, number]} range range of the argument\n   * @param {string} cssFunctionKind kind of css function, e. g. url(), image()\n   */\n  constructor(request, range, cssFunctionKind) {\n    super(request);\n    this.range = range;\n    this.cssFunctionKind = cssFunctionKind;\n  }\n\n  get type() {\n    return \"css url()\";\n  }\n\n  get category() {\n    return \"url\";\n  }\n  /**\n   * @param {string} context context directory\n   * @returns {Module} a module\n   */\n\n\n  createIgnoredModule(context) {\n    const RawDataUrlModule = getRawDataUrlModule();\n    return new RawDataUrlModule(\"data:,\", `ignored-asset`, `(ignored asset)`);\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.cssFunctionKind);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.cssFunctionKind = read();\n    super.deserialize(context);\n  }\n\n}\n\nconst cssEscapeString = str => {\n  let countWhiteOrBracket = 0;\n  let countQuotation = 0;\n  let countApostrophe = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const cc = str.charCodeAt(i);\n\n    switch (cc) {\n      case 9: // tab\n\n      case 10: // nl\n\n      case 32: // space\n\n      case 40: // (\n\n      case 41:\n        // )\n        countWhiteOrBracket++;\n        break;\n\n      case 34:\n        countQuotation++;\n        break;\n\n      case 39:\n        countApostrophe++;\n        break;\n    }\n  }\n\n  if (countWhiteOrBracket < 2) {\n    return str.replace(/[\\n\\t ()'\"\\\\]/g, m => `\\\\${m}`);\n  } else if (countQuotation <= countApostrophe) {\n    return `\"${str.replace(/[\\n\"\\\\]/g, m => `\\\\${m}`)}\"`;\n  } else {\n    return `'${str.replace(/[\\n'\\\\]/g, m => `\\\\${m}`)}'`;\n  }\n};\n\nCssUrlDependency.Template = class CssUrlDependencyTemplate extends ModuleDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, _ref) {\n    let {\n      runtime,\n      moduleGraph,\n      runtimeTemplate,\n      codeGenerationResults\n    } = _ref;\n    const dep =\n    /** @type {CssUrlDependency} */\n    dependency;\n    source.replace(dep.range[0], dep.range[1] - 1, `${dep.cssFunctionKind}(${cssEscapeString(runtimeTemplate.assetUrl({\n      publicPath: \"\",\n      runtime,\n      module: moduleGraph.getModule(dep),\n      codeGenerationResults\n    }))})`);\n  }\n\n};\nmakeSerializable(CssUrlDependency, \"webpack/lib/dependencies/CssUrlDependency\");\nmodule.exports = CssUrlDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/CssUrlDependency.js"],"names":["makeSerializable","require","memoize","ModuleDependency","getRawDataUrlModule","CssUrlDependency","constructor","request","range","cssFunctionKind","type","category","createIgnoredModule","context","RawDataUrlModule","serialize","write","deserialize","read","cssEscapeString","str","countWhiteOrBracket","countQuotation","countApostrophe","i","length","cc","charCodeAt","replace","m","Template","CssUrlDependencyTemplate","apply","dependency","source","runtime","moduleGraph","runtimeTemplate","codeGenerationResults","dep","assetUrl","publicPath","module","getModule","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMG,mBAAmB,GAAGF,OAAO,CAAC,MAAMD,OAAO,CAAC,2BAAD,CAAd,CAAnC;;AAEA,MAAMI,gBAAN,SAA+BF,gBAA/B,CAAgD;AAC/C;AACD;AACA;AACA;AACA;AACCG,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiBC,eAAjB,EAAkC;AAC5C,UAAMF,OAAN;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA;;AAEO,MAAJC,IAAI,GAAG;AACV,WAAO,WAAP;AACA;;AAEW,MAARC,QAAQ,GAAG;AACd,WAAO,KAAP;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC5B,UAAMC,gBAAgB,GAAGV,mBAAmB,EAA5C;AACA,WAAO,IAAIU,gBAAJ,CAAqB,QAArB,EAAgC,eAAhC,EAAiD,iBAAjD,CAAP;AACA;;AAEDC,EAAAA,SAAS,CAACF,OAAD,EAAU;AAClB,UAAM;AAAEG,MAAAA;AAAF,QAAYH,OAAlB;AACAG,IAAAA,KAAK,CAAC,KAAKP,eAAN,CAAL;AACA,UAAMM,SAAN,CAAgBF,OAAhB;AACA;;AAEDI,EAAAA,WAAW,CAACJ,OAAD,EAAU;AACpB,UAAM;AAAEK,MAAAA;AAAF,QAAWL,OAAjB;AACA,SAAKJ,eAAL,GAAuBS,IAAI,EAA3B;AACA,UAAMD,WAAN,CAAkBJ,OAAlB;AACA;;AAvC8C;;AA0ChD,MAAMM,eAAe,GAAGC,GAAG,IAAI;AAC9B,MAAIC,mBAAmB,GAAG,CAA1B;AACA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,eAAe,GAAG,CAAtB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACpC,UAAME,EAAE,GAAGN,GAAG,CAACO,UAAJ,CAAeH,CAAf,CAAX;;AACA,YAAQE,EAAR;AACC,WAAK,CAAL,CADD,CACS;;AACR,WAAK,EAAL,CAFD,CAEU;;AACT,WAAK,EAAL,CAHD,CAGU;;AACT,WAAK,EAAL,CAJD,CAIU;;AACT,WAAK,EAAL;AAAS;AACRL,QAAAA,mBAAmB;AACnB;;AACD,WAAK,EAAL;AACCC,QAAAA,cAAc;AACd;;AACD,WAAK,EAAL;AACCC,QAAAA,eAAe;AACf;AAbF;AAeA;;AACD,MAAIF,mBAAmB,GAAG,CAA1B,EAA6B;AAC5B,WAAOD,GAAG,CAACQ,OAAJ,CAAY,gBAAZ,EAA8BC,CAAC,IAAK,KAAIA,CAAE,EAA1C,CAAP;AACA,GAFD,MAEO,IAAIP,cAAc,IAAIC,eAAtB,EAAuC;AAC7C,WAAQ,IAAGH,GAAG,CAACQ,OAAJ,CAAY,UAAZ,EAAwBC,CAAC,IAAK,KAAIA,CAAE,EAApC,CAAuC,GAAlD;AACA,GAFM,MAEA;AACN,WAAQ,IAAGT,GAAG,CAACQ,OAAJ,CAAY,UAAZ,EAAwBC,CAAC,IAAK,KAAIA,CAAE,EAApC,CAAuC,GAAlD;AACA;AACD,CA7BD;;AA+BAxB,gBAAgB,CAACyB,QAAjB,GAA4B,MAAMC,wBAAN,SAC3B5B,gBAAgB,CAAC2B,QADU,CAE1B;AACD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,KAAK,CACJC,UADI,EAEJC,MAFI,QAIH;AAAA,QADD;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,WAAX;AAAwBC,MAAAA,eAAxB;AAAyCC,MAAAA;AAAzC,KACC;AACD,UAAMC,GAAG;AAAG;AAAiCN,IAAAA,UAA7C;AAEAC,IAAAA,MAAM,CAACN,OAAP,CACCW,GAAG,CAAC/B,KAAJ,CAAU,CAAV,CADD,EAEC+B,GAAG,CAAC/B,KAAJ,CAAU,CAAV,IAAe,CAFhB,EAGE,GAAE+B,GAAG,CAAC9B,eAAgB,IAAGU,eAAe,CACxCkB,eAAe,CAACG,QAAhB,CAAyB;AACxBC,MAAAA,UAAU,EAAE,EADY;AAExBN,MAAAA,OAFwB;AAGxBO,MAAAA,MAAM,EAAEN,WAAW,CAACO,SAAZ,CAAsBJ,GAAtB,CAHgB;AAIxBD,MAAAA;AAJwB,KAAzB,CADwC,CAOvC,GAVH;AAYA;;AA1BA,CAFF;AA+BAtC,gBAAgB,CAACK,gBAAD,EAAmB,2CAAnB,CAAhB;AAEAqC,MAAM,CAACE,OAAP,GAAiBvC,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst memoize = require(\"../util/memoize\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nconst getRawDataUrlModule = memoize(() => require(\"../asset/RawDataUrlModule\"));\n\nclass CssUrlDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request request\n\t * @param {[number, number]} range range of the argument\n\t * @param {string} cssFunctionKind kind of css function, e. g. url(), image()\n\t */\n\tconstructor(request, range, cssFunctionKind) {\n\t\tsuper(request);\n\t\tthis.range = range;\n\t\tthis.cssFunctionKind = cssFunctionKind;\n\t}\n\n\tget type() {\n\t\treturn \"css url()\";\n\t}\n\n\tget category() {\n\t\treturn \"url\";\n\t}\n\n\t/**\n\t * @param {string} context context directory\n\t * @returns {Module} a module\n\t */\n\tcreateIgnoredModule(context) {\n\t\tconst RawDataUrlModule = getRawDataUrlModule();\n\t\treturn new RawDataUrlModule(\"data:,\", `ignored-asset`, `(ignored asset)`);\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.cssFunctionKind);\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.cssFunctionKind = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nconst cssEscapeString = str => {\n\tlet countWhiteOrBracket = 0;\n\tlet countQuotation = 0;\n\tlet countApostrophe = 0;\n\tfor (let i = 0; i < str.length; i++) {\n\t\tconst cc = str.charCodeAt(i);\n\t\tswitch (cc) {\n\t\t\tcase 9: // tab\n\t\t\tcase 10: // nl\n\t\t\tcase 32: // space\n\t\t\tcase 40: // (\n\t\t\tcase 41: // )\n\t\t\t\tcountWhiteOrBracket++;\n\t\t\t\tbreak;\n\t\t\tcase 34:\n\t\t\t\tcountQuotation++;\n\t\t\t\tbreak;\n\t\t\tcase 39:\n\t\t\t\tcountApostrophe++;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tif (countWhiteOrBracket < 2) {\n\t\treturn str.replace(/[\\n\\t ()'\"\\\\]/g, m => `\\\\${m}`);\n\t} else if (countQuotation <= countApostrophe) {\n\t\treturn `\"${str.replace(/[\\n\"\\\\]/g, m => `\\\\${m}`)}\"`;\n\t} else {\n\t\treturn `'${str.replace(/[\\n'\\\\]/g, m => `\\\\${m}`)}'`;\n\t}\n};\n\nCssUrlDependency.Template = class CssUrlDependencyTemplate extends (\n\tModuleDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(\n\t\tdependency,\n\t\tsource,\n\t\t{ runtime, moduleGraph, runtimeTemplate, codeGenerationResults }\n\t) {\n\t\tconst dep = /** @type {CssUrlDependency} */ (dependency);\n\n\t\tsource.replace(\n\t\t\tdep.range[0],\n\t\t\tdep.range[1] - 1,\n\t\t\t`${dep.cssFunctionKind}(${cssEscapeString(\n\t\t\t\truntimeTemplate.assetUrl({\n\t\t\t\t\tpublicPath: \"\",\n\t\t\t\t\truntime,\n\t\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\t\tcodeGenerationResults\n\t\t\t\t})\n\t\t\t)})`\n\t\t);\n\t}\n};\n\nmakeSerializable(CssUrlDependency, \"webpack/lib/dependencies/CssUrlDependency\");\n\nmodule.exports = CssUrlDependency;\n"]},"metadata":{},"sourceType":"script"}