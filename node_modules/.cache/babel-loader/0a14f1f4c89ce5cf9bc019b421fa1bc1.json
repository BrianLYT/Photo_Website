{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst {\n  SourceMapConsumer\n} = require(\"source-map\");\n\nconst {\n  validate\n} = require(\"schema-utils\");\n\nconst serialize = require(\"serialize-javascript\");\n\nconst {\n  Worker\n} = require(\"jest-worker\");\n\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\n\nconst schema = require(\"./options.json\");\n\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {RawSourceMap} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {RawSourceMap | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify =\n      /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions =\n      /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  static isSourceMap(input) {\n    // All required options for `new SourceMapConsumer(...options)`\n    // https://github.com/mozilla/source-map#new-sourcemapconsumerrawsourcemap\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {SourceMapConsumer} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.line) {\n      const original = sourceMap && sourceMap.originalPositionFor({\n        line: error.line,\n        column: error.col\n      });\n\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n\n      if ( // Skip double minimize assets from child compilation\n      info.minimized || // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n\n      if (!output) {\n        numberOfAssets += 1;\n      }\n\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n\n    let initializedWorker;\n    /** @type {undefined | number} */\n\n    let numberOfWorkers;\n\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        initializedWorker =\n        /** @type {MinimizerWorker<T>} */\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n        const workerStdout = initializedWorker.getStdout();\n\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n\n        const workerStderr = initializedWorker.getStderr();\n\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n\n        return initializedWorker;\n      };\n    }\n\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n\n        if (!output) {\n          let input;\n          /** @type {RawSourceMap | undefined} */\n\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push(\n              /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap =\n              /** @type {RawSourceMap} */\n              map;\n            }\n          }\n\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n          /**\n           * @type {InternalOptions<T>}\n           */\n\n\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: { ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n\n          try {\n            output = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            TerserPlugin.buildError(error, name, hasSourceMap ? new SourceMapConsumer(\n            /** @type {RawSourceMap} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new SourceMapConsumer(\n            /** @type {RawSourceMap} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n\n          let shebang;\n\n          if (\n          /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input,\n            /** @type {RawSourceMap} */\n            inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename =\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.substr(querySplit);\n              filename = filename.substr(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner; // Add a banner to the original file\n\n            if (\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner =\n              /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push(\n            /** @type {WebpackError} */\n            warning);\n          }\n        }\n\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            error);\n          }\n        }\n        /** @type {Record<string, any>} */\n\n\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output; // Write extracted comments to commentsFilename\n\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n\n    const limit = getWorker && numberOfAssets > 0 ?\n    /** @type {number} */\n    numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, _ref) => {\n      let [from, value] = _ref;\n      const previous =\n      /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([...\n          /** @type {string}*/\n          prevSource.source().split(\"\\n\\n\"), ...\n          /** @type {string}*/\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n\n      const existingAsset = compilation.getAsset(commentsFilename);\n\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    },\n    /** @type {Promise<unknown>} */\n    Promise.resolve());\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, _ref2) => {\n          let {\n            green,\n            formatFlag\n          } = _ref2;\n          return minimized ?\n          /** @type {Function} */\n          green(\n          /** @type {Function} */\n          formatFlag(\"minimized\")) : \"\";\n        });\n      });\n    });\n  }\n\n}\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/terser-webpack-plugin/dist/index.js"],"names":["path","require","os","SourceMapConsumer","validate","serialize","Worker","throttleAll","terserMinify","uglifyJsMinify","swcMinify","esbuildMinify","schema","minify","TerserPlugin","constructor","options","name","baseDataPath","terserOptions","test","extractComments","parallel","include","exclude","minimizer","implementation","isSourceMap","input","Boolean","version","sources","Array","isArray","mappings","buildWarning","warning","file","builtWarning","Error","toString","hideStack","buildError","error","sourceMap","requestShortener","builtError","line","original","originalPositionFor","column","col","source","message","shorten","stack","split","slice","join","getAvailableNumberOfCores","cpus","length","Math","min","Number","optimize","compiler","compilation","assets","optimizeOptions","cache","getCache","numberOfAssets","assetsForMinify","Promise","all","Object","keys","filter","info","getAsset","minimized","extractedComments","webpack","ModuleFilenameHelpers","matchObject","bind","undefined","map","eTag","getLazyHashedEtag","cacheItem","getItemCache","output","getPromise","inputSource","getWorker","initializedWorker","numberOfWorkers","availableNumberOfCores","resolve","numWorkers","enableWorkerThreads","workerStdout","getStdout","on","chunk","process","stdout","write","workerStderr","getStderr","stderr","SourceMapSource","ConcatSource","RawSource","allExtractedComments","Map","scheduledTasks","asset","push","inputSourceMap","sourceFromInputSource","sourceAndMap","warnings","Buffer","isBuffer","module","javascriptModule","ecma","getEcmaVersion","environment","transform","hasSourceMap","errors","code","item","shebang","banner","startsWith","firstNewlinePosition","indexOf","substring","commentsFilename","filename","query","querySplit","substr","lastSlashIndex","lastIndexOf","basename","data","getPath","relative","dirname","replace","extractedCommentsString","sort","extractedCommentsSource","storePromise","newInfo","related","license","set","updateAsset","limit","end","from","reduce","previousPromise","value","previous","previousFrom","prevSource","mergedName","previousValue","currentValue","mergeEtags","Set","existingAsset","emitAsset","arrowFunction","const","destructuring","forOf","bigIntLiteral","dynamicImport","apply","pluginName","hooks","tap","javascript","JavascriptModulesPlugin","getCompilationHooks","getMinimizerVersion","chunkHash","hash","update","processAssets","tapPromise","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","additionalAssets","statsPrinter","stats","print","for","green","formatFlag","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\n\nconst os = require(\"os\");\n\nconst {\n  SourceMapConsumer\n} = require(\"source-map\");\n\nconst {\n  validate\n} = require(\"schema-utils\");\n\nconst serialize = require(\"serialize-javascript\");\n\nconst {\n  Worker\n} = require(\"jest-worker\");\n\nconst {\n  throttleAll,\n  terserMinify,\n  uglifyJsMinify,\n  swcMinify,\n  esbuildMinify\n} = require(\"./utils\");\n\nconst schema = require(\"./options.json\");\n\nconst {\n  minify\n} = require(\"./minify\");\n/** @typedef {import(\"schema-utils/declarations/validate\").Schema} Schema */\n\n/** @typedef {import(\"webpack\").Compiler} Compiler */\n\n/** @typedef {import(\"webpack\").Compilation} Compilation */\n\n/** @typedef {import(\"webpack\").WebpackError} WebpackError */\n\n/** @typedef {import(\"webpack\").Asset} Asset */\n\n/** @typedef {import(\"./utils.js\").TerserECMA} TerserECMA */\n\n/** @typedef {import(\"./utils.js\").TerserOptions} TerserOptions */\n\n/** @typedef {import(\"jest-worker\").Worker} JestWorker */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {RegExp | string} Rule */\n\n/** @typedef {Rule[] | Rule} Rules */\n\n/**\n * @callback ExtractCommentsFunction\n * @param {any} astNode\n * @param {{ value: string, type: 'comment1' | 'comment2' | 'comment3' | 'comment4', pos: number, line: number, col: number }} comment\n * @returns {boolean}\n */\n\n/**\n * @typedef {boolean | 'all' | 'some' | RegExp | ExtractCommentsFunction} ExtractCommentsCondition\n */\n\n/**\n * @typedef {string | ((fileData: any) => string)} ExtractCommentsFilename\n */\n\n/**\n * @typedef {boolean | string | ((commentsFile: string) => string)} ExtractCommentsBanner\n */\n\n/**\n * @typedef {Object} ExtractCommentsObject\n * @property {ExtractCommentsCondition} [condition]\n * @property {ExtractCommentsFilename} [filename]\n * @property {ExtractCommentsBanner} [banner]\n */\n\n/**\n * @typedef {ExtractCommentsCondition | ExtractCommentsObject} ExtractCommentsOptions\n */\n\n/**\n * @typedef {Object} MinimizedResult\n * @property {string} code\n * @property {RawSourceMap} [map]\n * @property {Array<Error | string>} [errors]\n * @property {Array<Error | string>} [warnings]\n * @property {Array<string>} [extractedComments]\n */\n\n/**\n * @typedef {{ [file: string]: string }} Input\n */\n\n/**\n * @typedef {{ [key: string]: any }} CustomOptions\n */\n\n/**\n * @template T\n * @typedef {T extends infer U ? U : CustomOptions} InferDefaultType\n */\n\n/**\n * @typedef {Object} PredefinedOptions\n * @property {boolean} [module]\n * @property {TerserECMA} [ecma]\n */\n\n/**\n * @template T\n * @typedef {PredefinedOptions & InferDefaultType<T>} MinimizerOptions\n */\n\n/**\n * @template T\n * @callback BasicMinimizerImplementation\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {MinimizerOptions<T>} minifyOptions\n * @param {ExtractCommentsOptions | undefined} extractComments\n * @returns {Promise<MinimizedResult>}\n */\n\n/**\n * @typedef {object} MinimizeFunctionHelpers\n * @property {() => string | undefined} [getMinimizerVersion]\n */\n\n/**\n * @template T\n * @typedef {BasicMinimizerImplementation<T> & MinimizeFunctionHelpers} MinimizerImplementation\n */\n\n/**\n * @template T\n * @typedef {Object} InternalOptions\n * @property {string} name\n * @property {string} input\n * @property {RawSourceMap | undefined} inputSourceMap\n * @property {ExtractCommentsOptions | undefined} extractComments\n * @property {{ implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> }} minimizer\n */\n\n/**\n * @template T\n * @typedef {JestWorker & { transform: (options: string) => MinimizedResult, minify: (options: InternalOptions<T>) => MinimizedResult }} MinimizerWorker\n */\n\n/**\n * @typedef {undefined | boolean | number} Parallel\n */\n\n/**\n * @typedef {Object} BasePluginOptions\n * @property {Rules} [test]\n * @property {Rules} [include]\n * @property {Rules} [exclude]\n * @property {ExtractCommentsOptions} [extractComments]\n * @property {Parallel} [parallel]\n */\n\n/**\n * @template T\n * @typedef {T extends TerserOptions ? { minify?: MinimizerImplementation<T> | undefined, terserOptions?: MinimizerOptions<T> | undefined } : { minify: MinimizerImplementation<T>, terserOptions?: MinimizerOptions<T> | undefined }} DefinedDefaultMinimizerAndOptions\n */\n\n/**\n * @template T\n * @typedef {BasePluginOptions & { minimizer: { implementation: MinimizerImplementation<T>, options: MinimizerOptions<T> } }} InternalPluginOptions\n */\n\n/**\n * @template [T=TerserOptions]\n */\n\n\nclass TerserPlugin {\n  /**\n   * @param {BasePluginOptions & DefinedDefaultMinimizerAndOptions<T>} [options]\n   */\n  constructor(options) {\n    validate(\n    /** @type {Schema} */\n    schema, options || {}, {\n      name: \"Terser Plugin\",\n      baseDataPath: \"options\"\n    }); // TODO make `minimizer` option instead `minify` and `terserOptions` in the next major release, also rename `terserMinify` to `terserMinimize`\n\n    const {\n      minify =\n      /** @type {MinimizerImplementation<T>} */\n      terserMinify,\n      terserOptions =\n      /** @type {MinimizerOptions<T>} */\n      {},\n      test = /\\.[cm]?js(\\?.*)?$/i,\n      extractComments = true,\n      parallel = true,\n      include,\n      exclude\n    } = options || {};\n    /**\n     * @private\n     * @type {InternalPluginOptions<T>}\n     */\n\n    this.options = {\n      test,\n      extractComments,\n      parallel,\n      include,\n      exclude,\n      minimizer: {\n        implementation: minify,\n        options: terserOptions\n      }\n    };\n  }\n  /**\n   * @private\n   * @param {any} input\n   * @returns {boolean}\n   */\n\n\n  static isSourceMap(input) {\n    // All required options for `new SourceMapConsumer(...options)`\n    // https://github.com/mozilla/source-map#new-sourcemapconsumerrawsourcemap\n    return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === \"string\");\n  }\n  /**\n   * @private\n   * @param {unknown} warning\n   * @param {string} file\n   * @returns {Error}\n   */\n\n\n  static buildWarning(warning, file) {\n    /**\n     * @type {Error & { hideStack: true, file: string }}\n     */\n    // @ts-ignore\n    const builtWarning = new Error(warning.toString());\n    builtWarning.name = \"Warning\";\n    builtWarning.hideStack = true;\n    builtWarning.file = file;\n    return builtWarning;\n  }\n  /**\n   * @private\n   * @param {any} error\n   * @param {string} file\n   * @param {SourceMapConsumer} [sourceMap]\n   * @param {Compilation[\"requestShortener\"]} [requestShortener]\n   * @returns {Error}\n   */\n\n\n  static buildError(error, file, sourceMap, requestShortener) {\n    /**\n     * @type {Error & { file?: string }}\n     */\n    let builtError;\n\n    if (typeof error === \"string\") {\n      builtError = new Error(`${file} from Terser plugin\\n${error}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.line) {\n      const original = sourceMap && sourceMap.originalPositionFor({\n        line: error.line,\n        column: error.col\n      });\n\n      if (original && original.source && requestShortener) {\n        builtError = new Error(`${file} from Terser plugin\\n${error.message} [${requestShortener.shorten(original.source)}:${original.line},${original.column}][${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n        builtError.file = file;\n        return builtError;\n      }\n\n      builtError = new Error(`${file} from Terser plugin\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split(\"\\n\").slice(1).join(\"\\n\")}` : \"\"}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    if (error.stack) {\n      builtError = new Error(`${file} from Terser plugin\\n${typeof error.message !== \"undefined\" ? error.message : \"\"}\\n${error.stack}`);\n      builtError.file = file;\n      return builtError;\n    }\n\n    builtError = new Error(`${file} from Terser plugin\\n${error.message}`);\n    builtError.file = file;\n    return builtError;\n  }\n  /**\n   * @private\n   * @param {Parallel} parallel\n   * @returns {number}\n   */\n\n\n  static getAvailableNumberOfCores(parallel) {\n    // In some cases cpus() returns undefined\n    // https://github.com/nodejs/node/issues/19022\n    const cpus = os.cpus() || {\n      length: 1\n    };\n    return parallel === true ? cpus.length - 1 : Math.min(Number(parallel) || 0, cpus.length - 1);\n  }\n  /**\n   * @private\n   * @param {Compiler} compiler\n   * @param {Compilation} compilation\n   * @param {Record<string, import(\"webpack\").sources.Source>} assets\n   * @param {{availableNumberOfCores: number}} optimizeOptions\n   * @returns {Promise<void>}\n   */\n\n\n  async optimize(compiler, compilation, assets, optimizeOptions) {\n    const cache = compilation.getCache(\"TerserWebpackPlugin\");\n    let numberOfAssets = 0;\n    const assetsForMinify = await Promise.all(Object.keys(assets).filter(name => {\n      const {\n        info\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n\n      if ( // Skip double minimize assets from child compilation\n      info.minimized || // Skip minimizing for extracted comments assets\n      info.extractedComments) {\n        return false;\n      }\n\n      if (!compiler.webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n      undefined, this.options)(name)) {\n        return false;\n      }\n\n      return true;\n    }).map(async name => {\n      const {\n        info,\n        source\n      } =\n      /** @type {Asset} */\n      compilation.getAsset(name);\n      const eTag = cache.getLazyHashedEtag(source);\n      const cacheItem = cache.getItemCache(name, eTag);\n      const output = await cacheItem.getPromise();\n\n      if (!output) {\n        numberOfAssets += 1;\n      }\n\n      return {\n        name,\n        info,\n        inputSource: source,\n        output,\n        cacheItem\n      };\n    }));\n\n    if (assetsForMinify.length === 0) {\n      return;\n    }\n    /** @type {undefined | (() => MinimizerWorker<T>)} */\n\n\n    let getWorker;\n    /** @type {undefined | MinimizerWorker<T>} */\n\n    let initializedWorker;\n    /** @type {undefined | number} */\n\n    let numberOfWorkers;\n\n    if (optimizeOptions.availableNumberOfCores > 0) {\n      // Do not create unnecessary workers when the number of files is less than the available cores, it saves memory\n      numberOfWorkers = Math.min(numberOfAssets, optimizeOptions.availableNumberOfCores); // eslint-disable-next-line consistent-return\n\n      getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        initializedWorker =\n        /** @type {MinimizerWorker<T>} */\n        new Worker(require.resolve(\"./minify\"), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        }); // https://github.com/facebook/jest/issues/8872#issuecomment-524822081\n\n        const workerStdout = initializedWorker.getStdout();\n\n        if (workerStdout) {\n          workerStdout.on(\"data\", chunk => process.stdout.write(chunk));\n        }\n\n        const workerStderr = initializedWorker.getStderr();\n\n        if (workerStderr) {\n          workerStderr.on(\"data\", chunk => process.stderr.write(chunk));\n        }\n\n        return initializedWorker;\n      };\n    }\n\n    const {\n      SourceMapSource,\n      ConcatSource,\n      RawSource\n    } = compiler.webpack.sources;\n    /** @typedef {{ extractedCommentsSource : import(\"webpack\").sources.RawSource, commentsFilename: string }} ExtractedCommentsInfo */\n\n    /** @type {Map<string, ExtractedCommentsInfo>} */\n\n    const allExtractedComments = new Map();\n    const scheduledTasks = [];\n\n    for (const asset of assetsForMinify) {\n      scheduledTasks.push(async () => {\n        const {\n          name,\n          inputSource,\n          info,\n          cacheItem\n        } = asset;\n        let {\n          output\n        } = asset;\n\n        if (!output) {\n          let input;\n          /** @type {RawSourceMap | undefined} */\n\n          let inputSourceMap;\n          const {\n            source: sourceFromInputSource,\n            map\n          } = inputSource.sourceAndMap();\n          input = sourceFromInputSource;\n\n          if (map) {\n            if (!TerserPlugin.isSourceMap(map)) {\n              compilation.warnings.push(\n              /** @type {WebpackError} */\n              new Error(`${name} contains invalid source map`));\n            } else {\n              inputSourceMap =\n              /** @type {RawSourceMap} */\n              map;\n            }\n          }\n\n          if (Buffer.isBuffer(input)) {\n            input = input.toString();\n          }\n          /**\n           * @type {InternalOptions<T>}\n           */\n\n\n          const options = {\n            name,\n            input,\n            inputSourceMap,\n            minimizer: {\n              implementation: this.options.minimizer.implementation,\n              // @ts-ignore https://github.com/Microsoft/TypeScript/issues/10727\n              options: { ...this.options.minimizer.options\n              }\n            },\n            extractComments: this.options.extractComments\n          };\n\n          if (typeof options.minimizer.options.module === \"undefined\") {\n            if (typeof info.javascriptModule !== \"undefined\") {\n              options.minimizer.options.module = info.javascriptModule;\n            } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = true;\n            } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n              options.minimizer.options.module = false;\n            }\n          }\n\n          if (typeof options.minimizer.options.ecma === \"undefined\") {\n            options.minimizer.options.ecma = TerserPlugin.getEcmaVersion(compiler.options.output.environment || {});\n          }\n\n          try {\n            output = await (getWorker ? getWorker().transform(serialize(options)) : minify(options));\n          } catch (error) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            TerserPlugin.buildError(error, name, hasSourceMap ? new SourceMapConsumer(\n            /** @type {RawSourceMap} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n            return;\n          }\n\n          if (typeof output.code === \"undefined\") {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            new Error(`${name} from Terser plugin\\nMinimizer doesn't return result`));\n            return;\n          }\n\n          if (output.warnings && output.warnings.length > 0) {\n            output.warnings = output.warnings.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildWarning(item, name));\n          }\n\n          if (output.errors && output.errors.length > 0) {\n            const hasSourceMap = inputSourceMap && TerserPlugin.isSourceMap(inputSourceMap);\n            output.errors = output.errors.map(\n            /**\n             * @param {Error | string} item\n             */\n            item => TerserPlugin.buildError(item, name, hasSourceMap ? new SourceMapConsumer(\n            /** @type {RawSourceMap} */\n            inputSourceMap) : // eslint-disable-next-line no-undefined\n            undefined, // eslint-disable-next-line no-undefined\n            hasSourceMap ? compilation.requestShortener : undefined));\n          }\n\n          let shebang;\n\n          if (\n          /** @type {ExtractCommentsObject} */\n          this.options.extractComments.banner !== false && output.extractedComments && output.extractedComments.length > 0 && output.code.startsWith(\"#!\")) {\n            const firstNewlinePosition = output.code.indexOf(\"\\n\");\n            shebang = output.code.substring(0, firstNewlinePosition);\n            output.code = output.code.substring(firstNewlinePosition + 1);\n          }\n\n          if (output.map) {\n            output.source = new SourceMapSource(output.code, name, output.map, input,\n            /** @type {RawSourceMap} */\n            inputSourceMap, true);\n          } else {\n            output.source = new RawSource(output.code);\n          }\n\n          if (output.extractedComments && output.extractedComments.length > 0) {\n            const commentsFilename =\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.filename || \"[file].LICENSE.txt[query]\";\n            let query = \"\";\n            let filename = name;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.substr(querySplit);\n              filename = filename.substr(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n            const basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);\n            const data = {\n              filename,\n              basename,\n              query\n            };\n            output.commentsFilename = compilation.getPath(commentsFilename, data);\n            let banner; // Add a banner to the original file\n\n            if (\n            /** @type {ExtractCommentsObject} */\n            this.options.extractComments.banner !== false) {\n              banner =\n              /** @type {ExtractCommentsObject} */\n              this.options.extractComments.banner || `For license information please see ${path.relative(path.dirname(name), output.commentsFilename).replace(/\\\\/g, \"/\")}`;\n\n              if (typeof banner === \"function\") {\n                banner = banner(output.commentsFilename);\n              }\n\n              if (banner) {\n                output.source = new ConcatSource(shebang ? `${shebang}\\n` : \"\", `/*! ${banner} */\\n`, output.source);\n              }\n            }\n\n            const extractedCommentsString = output.extractedComments.sort().join(\"\\n\\n\");\n            output.extractedCommentsSource = new RawSource(`${extractedCommentsString}\\n`);\n          }\n\n          await cacheItem.storePromise({\n            source: output.source,\n            errors: output.errors,\n            warnings: output.warnings,\n            commentsFilename: output.commentsFilename,\n            extractedCommentsSource: output.extractedCommentsSource\n          });\n        }\n\n        if (output.warnings && output.warnings.length > 0) {\n          for (const warning of output.warnings) {\n            compilation.warnings.push(\n            /** @type {WebpackError} */\n            warning);\n          }\n        }\n\n        if (output.errors && output.errors.length > 0) {\n          for (const error of output.errors) {\n            compilation.errors.push(\n            /** @type {WebpackError} */\n            error);\n          }\n        }\n        /** @type {Record<string, any>} */\n\n\n        const newInfo = {\n          minimized: true\n        };\n        const {\n          source,\n          extractedCommentsSource\n        } = output; // Write extracted comments to commentsFilename\n\n        if (extractedCommentsSource) {\n          const {\n            commentsFilename\n          } = output;\n          newInfo.related = {\n            license: commentsFilename\n          };\n          allExtractedComments.set(name, {\n            extractedCommentsSource,\n            commentsFilename\n          });\n        }\n\n        compilation.updateAsset(name, source, newInfo);\n      });\n    }\n\n    const limit = getWorker && numberOfAssets > 0 ?\n    /** @type {number} */\n    numberOfWorkers : scheduledTasks.length;\n    await throttleAll(limit, scheduledTasks);\n\n    if (initializedWorker) {\n      await initializedWorker.end();\n    }\n    /** @typedef {{ source: import(\"webpack\").sources.Source, commentsFilename: string, from: string }} ExtractedCommentsInfoWIthFrom */\n\n\n    await Array.from(allExtractedComments).sort().reduce(\n    /**\n     * @param {Promise<unknown>} previousPromise\n     * @param {[string, ExtractedCommentsInfo]} extractedComments\n     * @returns {Promise<ExtractedCommentsInfoWIthFrom>}\n     */\n    async (previousPromise, [from, value]) => {\n      const previous =\n      /** @type {ExtractedCommentsInfoWIthFrom | undefined} **/\n      await previousPromise;\n      const {\n        commentsFilename,\n        extractedCommentsSource\n      } = value;\n\n      if (previous && previous.commentsFilename === commentsFilename) {\n        const {\n          from: previousFrom,\n          source: prevSource\n        } = previous;\n        const mergedName = `${previousFrom}|${from}`;\n        const name = `${commentsFilename}|${mergedName}`;\n        const eTag = [prevSource, extractedCommentsSource].map(item => cache.getLazyHashedEtag(item)).reduce((previousValue, currentValue) => cache.mergeEtags(previousValue, currentValue));\n        let source = await cache.getPromise(name, eTag);\n\n        if (!source) {\n          source = new ConcatSource(Array.from(new Set([...\n          /** @type {string}*/\n          prevSource.source().split(\"\\n\\n\"), ...\n          /** @type {string}*/\n          extractedCommentsSource.source().split(\"\\n\\n\")])).join(\"\\n\\n\"));\n          await cache.storePromise(name, eTag, source);\n        }\n\n        compilation.updateAsset(commentsFilename, source);\n        return {\n          source,\n          commentsFilename,\n          from: mergedName\n        };\n      }\n\n      const existingAsset = compilation.getAsset(commentsFilename);\n\n      if (existingAsset) {\n        return {\n          source: existingAsset.source,\n          commentsFilename,\n          from: commentsFilename\n        };\n      }\n\n      compilation.emitAsset(commentsFilename, extractedCommentsSource, {\n        extractedComments: true\n      });\n      return {\n        source: extractedCommentsSource,\n        commentsFilename,\n        from\n      };\n    },\n    /** @type {Promise<unknown>} */\n    Promise.resolve());\n  }\n  /**\n   * @private\n   * @param {any} environment\n   * @returns {TerserECMA}\n   */\n\n\n  static getEcmaVersion(environment) {\n    // ES 6th\n    if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n      return 2015;\n    } // ES 11th\n\n\n    if (environment.bigIntLiteral || environment.dynamicImport) {\n      return 2020;\n    }\n\n    return 5;\n  }\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = TerserPlugin.getAvailableNumberOfCores(this.options.parallel);\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      const hooks = compiler.webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n      const data = serialize({\n        minimizer: typeof this.options.minimizer.implementation.getMinimizerVersion !== \"undefined\" ? this.options.minimizer.implementation.getMinimizerVersion() || \"0.0.0\" : \"0.0.0\",\n        options: this.options.minimizer.options\n      });\n      hooks.chunkHash.tap(pluginName, (chunk, hash) => {\n        hash.update(\"TerserPlugin\");\n        hash.update(data);\n      });\n      compilation.hooks.processAssets.tapPromise({\n        name: pluginName,\n        stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n        additionalAssets: true\n      }, assets => this.optimize(compiler, compilation, assets, {\n        availableNumberOfCores\n      }));\n      compilation.hooks.statsPrinter.tap(pluginName, stats => {\n        stats.hooks.print.for(\"asset.info.minimized\").tap(\"terser-webpack-plugin\", (minimized, {\n          green,\n          formatFlag\n        }) => minimized ?\n        /** @type {Function} */\n        green(\n        /** @type {Function} */\n        formatFlag(\"minimized\")) : \"\");\n      });\n    });\n  }\n\n}\n\nTerserPlugin.terserMinify = terserMinify;\nTerserPlugin.uglifyJsMinify = uglifyJsMinify;\nTerserPlugin.swcMinify = swcMinify;\nTerserPlugin.esbuildMinify = esbuildMinify;\nmodule.exports = TerserPlugin;"]},"metadata":{},"sourceType":"script"}