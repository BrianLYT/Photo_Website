{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\n\nconst CURRENT_METHOD_REGEXP = /at ([a-zA-Z0-9_.]*)/;\n/**\n * @param {string=} method method name\n * @returns {string} message\n */\n\nfunction createMessage(method) {\n  return `Abstract method${method ? \" \" + method : \"\"}. Must be overridden.`;\n}\n/**\n * @constructor\n */\n\n\nfunction Message() {\n  /** @type {string} */\n  this.stack = undefined;\n  Error.captureStackTrace(this);\n  /** @type {RegExpMatchArray} */\n\n  const match = this.stack.split(\"\\n\")[3].match(CURRENT_METHOD_REGEXP);\n  this.message = match && match[1] ? createMessage(match[1]) : createMessage();\n}\n/**\n * Error for abstract method\n * @example\n * class FooClass {\n *     abstractMethod() {\n *         throw new AbstractMethodError(); // error message: Abstract method FooClass.abstractMethod. Must be overridden.\n *     }\n * }\n *\n */\n\n\nclass AbstractMethodError extends WebpackError {\n  constructor() {\n    super(new Message().message);\n    this.name = \"AbstractMethodError\";\n  }\n\n}\n\nmodule.exports = AbstractMethodError;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/AbstractMethodError.js"],"names":["WebpackError","require","CURRENT_METHOD_REGEXP","createMessage","method","Message","stack","undefined","Error","captureStackTrace","match","split","message","AbstractMethodError","constructor","name","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMC,qBAAqB,GAAG,qBAA9B;AAEA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC9B,SAAQ,kBAAiBA,MAAM,GAAG,MAAMA,MAAT,GAAkB,EAAG,uBAApD;AACA;AAED;AACA;AACA;;;AACA,SAASC,OAAT,GAAmB;AAClB;AACA,OAAKC,KAAL,GAAaC,SAAb;AACAC,EAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB;AACA;;AACA,QAAMC,KAAK,GAAG,KAAKJ,KAAL,CAAWK,KAAX,CAAiB,IAAjB,EAAuB,CAAvB,EAA0BD,KAA1B,CAAgCR,qBAAhC,CAAd;AAEA,OAAKU,OAAL,GAAeF,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAd,GAAoBP,aAAa,CAACO,KAAK,CAAC,CAAD,CAAN,CAAjC,GAA8CP,aAAa,EAA1E;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMU,mBAAN,SAAkCb,YAAlC,CAA+C;AAC9Cc,EAAAA,WAAW,GAAG;AACb,UAAM,IAAIT,OAAJ,GAAcO,OAApB;AACA,SAAKG,IAAL,GAAY,qBAAZ;AACA;;AAJ6C;;AAO/CC,MAAM,CAACC,OAAP,GAAiBJ,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\nconst CURRENT_METHOD_REGEXP = /at ([a-zA-Z0-9_.]*)/;\n\n/**\n * @param {string=} method method name\n * @returns {string} message\n */\nfunction createMessage(method) {\n\treturn `Abstract method${method ? \" \" + method : \"\"}. Must be overridden.`;\n}\n\n/**\n * @constructor\n */\nfunction Message() {\n\t/** @type {string} */\n\tthis.stack = undefined;\n\tError.captureStackTrace(this);\n\t/** @type {RegExpMatchArray} */\n\tconst match = this.stack.split(\"\\n\")[3].match(CURRENT_METHOD_REGEXP);\n\n\tthis.message = match && match[1] ? createMessage(match[1]) : createMessage();\n}\n\n/**\n * Error for abstract method\n * @example\n * class FooClass {\n *     abstractMethod() {\n *         throw new AbstractMethodError(); // error message: Abstract method FooClass.abstractMethod. Must be overridden.\n *     }\n * }\n *\n */\nclass AbstractMethodError extends WebpackError {\n\tconstructor() {\n\t\tsuper(new Message().message);\n\t\tthis.name = \"AbstractMethodError\";\n\t}\n}\n\nmodule.exports = AbstractMethodError;\n"]},"metadata":{},"sourceType":"script"}