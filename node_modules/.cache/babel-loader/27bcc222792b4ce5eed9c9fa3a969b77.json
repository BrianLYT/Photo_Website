{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst ModuleDependency = require(\"./ModuleDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nclass ImportDependency extends ModuleDependency {\n  /**\n   * @param {string} request the request\n   * @param {[number, number]} range expression range\n   * @param {string[][]=} referencedExports list of referenced exports\n   */\n  constructor(request, range, referencedExports) {\n    super(request);\n    this.range = range;\n    this.referencedExports = referencedExports;\n  }\n\n  get type() {\n    return \"import()\";\n  }\n\n  get category() {\n    return \"esm\";\n  }\n  /**\n   * Returns list of exports referenced by this dependency\n   * @param {ModuleGraph} moduleGraph module graph\n   * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n   * @returns {(string[] | ReferencedExport)[]} referenced exports\n   */\n\n\n  getReferencedExports(moduleGraph, runtime) {\n    return this.referencedExports ? this.referencedExports.map(e => ({\n      name: e,\n      canMangle: false\n    })) : Dependency.EXPORTS_OBJECT_REFERENCED;\n  }\n\n  serialize(context) {\n    context.write(this.range);\n    context.write(this.referencedExports);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    this.range = context.read();\n    this.referencedExports = context.read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(ImportDependency, \"webpack/lib/dependencies/ImportDependency\");\nImportDependency.Template = class ImportDependencyTemplate extends ModuleDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, _ref) {\n    let {\n      runtimeTemplate,\n      module,\n      moduleGraph,\n      chunkGraph,\n      runtimeRequirements\n    } = _ref;\n    const dep =\n    /** @type {ImportDependency} */\n    dependency;\n    const block =\n    /** @type {AsyncDependenciesBlock} */\n    moduleGraph.getParentBlock(dep);\n    const content = runtimeTemplate.moduleNamespacePromise({\n      chunkGraph,\n      block: block,\n      module: moduleGraph.getModule(dep),\n      request: dep.request,\n      strict: module.buildMeta.strictHarmonyModule,\n      message: \"import()\",\n      runtimeRequirements\n    });\n    source.replace(dep.range[0], dep.range[1] - 1, content);\n  }\n\n};\nmodule.exports = ImportDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/ImportDependency.js"],"names":["Dependency","require","makeSerializable","ModuleDependency","ImportDependency","constructor","request","range","referencedExports","type","category","getReferencedExports","moduleGraph","runtime","map","e","name","canMangle","EXPORTS_OBJECT_REFERENCED","serialize","context","write","deserialize","read","Template","ImportDependencyTemplate","apply","dependency","source","runtimeTemplate","module","chunkGraph","runtimeRequirements","dep","block","getParentBlock","content","moduleNamespacePromise","getModule","strict","buildMeta","strictHarmonyModule","message","replace","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAAhC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMG,gBAAN,SAA+BD,gBAA/B,CAAgD;AAC/C;AACD;AACA;AACA;AACA;AACCE,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiBC,iBAAjB,EAAoC;AAC9C,UAAMF,OAAN;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA;;AAEO,MAAJC,IAAI,GAAG;AACV,WAAO,UAAP;AACA;;AAEW,MAARC,QAAQ,GAAG;AACd,WAAO,KAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,oBAAoB,CAACC,WAAD,EAAcC,OAAd,EAAuB;AAC1C,WAAO,KAAKL,iBAAL,GACJ,KAAKA,iBAAL,CAAuBM,GAAvB,CAA2BC,CAAC,KAAK;AACjCC,MAAAA,IAAI,EAAED,CAD2B;AAEjCE,MAAAA,SAAS,EAAE;AAFsB,KAAL,CAA5B,CADI,GAKJjB,UAAU,CAACkB,yBALd;AAMA;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAU;AAClBA,IAAAA,OAAO,CAACC,KAAR,CAAc,KAAKd,KAAnB;AACAa,IAAAA,OAAO,CAACC,KAAR,CAAc,KAAKb,iBAAnB;AACA,UAAMW,SAAN,CAAgBC,OAAhB;AACA;;AAEDE,EAAAA,WAAW,CAACF,OAAD,EAAU;AACpB,SAAKb,KAAL,GAAaa,OAAO,CAACG,IAAR,EAAb;AACA,SAAKf,iBAAL,GAAyBY,OAAO,CAACG,IAAR,EAAzB;AACA,UAAMD,WAAN,CAAkBF,OAAlB;AACA;;AA7C8C;;AAgDhDlB,gBAAgB,CAACE,gBAAD,EAAmB,2CAAnB,CAAhB;AAEAA,gBAAgB,CAACoB,QAAjB,GAA4B,MAAMC,wBAAN,SAC3BtB,gBAAgB,CAACqB,QADU,CAE1B;AACD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,KAAK,CACJC,UADI,EAEJC,MAFI,QAIH;AAAA,QADD;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA,MAAnB;AAA2BlB,MAAAA,WAA3B;AAAwCmB,MAAAA,UAAxC;AAAoDC,MAAAA;AAApD,KACC;AACD,UAAMC,GAAG;AAAG;AAAiCN,IAAAA,UAA7C;AACA,UAAMO,KAAK;AAAG;AACbtB,IAAAA,WAAW,CAACuB,cAAZ,CAA2BF,GAA3B,CADD;AAGA,UAAMG,OAAO,GAAGP,eAAe,CAACQ,sBAAhB,CAAuC;AACtDN,MAAAA,UADsD;AAEtDG,MAAAA,KAAK,EAAEA,KAF+C;AAGtDJ,MAAAA,MAAM,EAAElB,WAAW,CAAC0B,SAAZ,CAAsBL,GAAtB,CAH8C;AAItD3B,MAAAA,OAAO,EAAE2B,GAAG,CAAC3B,OAJyC;AAKtDiC,MAAAA,MAAM,EAAET,MAAM,CAACU,SAAP,CAAiBC,mBAL6B;AAMtDC,MAAAA,OAAO,EAAE,UAN6C;AAOtDV,MAAAA;AAPsD,KAAvC,CAAhB;AAUAJ,IAAAA,MAAM,CAACe,OAAP,CAAeV,GAAG,CAAC1B,KAAJ,CAAU,CAAV,CAAf,EAA6B0B,GAAG,CAAC1B,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+C6B,OAA/C;AACA;;AA3BA,CAFF;AAgCAN,MAAM,CAACc,OAAP,GAAiBxC,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"../Dependency\").ReferencedExport} ReferencedExport */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nclass ImportDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request the request\n\t * @param {[number, number]} range expression range\n\t * @param {string[][]=} referencedExports list of referenced exports\n\t */\n\tconstructor(request, range, referencedExports) {\n\t\tsuper(request);\n\t\tthis.range = range;\n\t\tthis.referencedExports = referencedExports;\n\t}\n\n\tget type() {\n\t\treturn \"import()\";\n\t}\n\n\tget category() {\n\t\treturn \"esm\";\n\t}\n\n\t/**\n\t * Returns list of exports referenced by this dependency\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @param {RuntimeSpec} runtime the runtime for which the module is analysed\n\t * @returns {(string[] | ReferencedExport)[]} referenced exports\n\t */\n\tgetReferencedExports(moduleGraph, runtime) {\n\t\treturn this.referencedExports\n\t\t\t? this.referencedExports.map(e => ({\n\t\t\t\t\tname: e,\n\t\t\t\t\tcanMangle: false\n\t\t\t  }))\n\t\t\t: Dependency.EXPORTS_OBJECT_REFERENCED;\n\t}\n\n\tserialize(context) {\n\t\tcontext.write(this.range);\n\t\tcontext.write(this.referencedExports);\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tthis.range = context.read();\n\t\tthis.referencedExports = context.read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(ImportDependency, \"webpack/lib/dependencies/ImportDependency\");\n\nImportDependency.Template = class ImportDependencyTemplate extends (\n\tModuleDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(\n\t\tdependency,\n\t\tsource,\n\t\t{ runtimeTemplate, module, moduleGraph, chunkGraph, runtimeRequirements }\n\t) {\n\t\tconst dep = /** @type {ImportDependency} */ (dependency);\n\t\tconst block = /** @type {AsyncDependenciesBlock} */ (\n\t\t\tmoduleGraph.getParentBlock(dep)\n\t\t);\n\t\tconst content = runtimeTemplate.moduleNamespacePromise({\n\t\t\tchunkGraph,\n\t\t\tblock: block,\n\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\trequest: dep.request,\n\t\t\tstrict: module.buildMeta.strictHarmonyModule,\n\t\t\tmessage: \"import()\",\n\t\t\truntimeRequirements\n\t\t});\n\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, content);\n\t}\n};\n\nmodule.exports = ImportDependency;\n"]},"metadata":{},"sourceType":"script"}