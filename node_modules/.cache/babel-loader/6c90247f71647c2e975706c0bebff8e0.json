{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\n\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} JsonpLibraryPluginOptions\n * @property {LibraryType} type\n */\n\n/**\n * @typedef {Object} JsonpLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {JsonpLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<JsonpLibraryPluginParsed>}\n */\n\n\nclass JsonpLibraryPlugin extends AbstractLibraryPlugin {\n  /**\n   * @param {JsonpLibraryPluginOptions} options the plugin options\n   */\n  constructor(options) {\n    super({\n      pluginName: \"JsonpLibraryPlugin\",\n      type: options.type\n    });\n  }\n  /**\n   * @param {LibraryOptions} library normalized library option\n   * @returns {T | false} preprocess as needed by overriding\n   */\n\n\n  parseOptions(library) {\n    const {\n      name\n    } = library;\n\n    if (typeof name !== \"string\") {\n      throw new Error(`Jsonp library name must be a simple string. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`);\n    }\n\n    return {\n      name:\n      /** @type {string} */\n      name\n    };\n  }\n  /**\n   * @param {Source} source source\n   * @param {RenderContext} renderContext render context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {Source} source with library export\n   */\n\n\n  render(source, _ref, _ref2) {\n    let {\n      chunk\n    } = _ref;\n    let {\n      options,\n      compilation\n    } = _ref2;\n    const name = compilation.getPath(options.name, {\n      chunk\n    });\n    return new ConcatSource(`${name}(`, source, \")\");\n  }\n  /**\n   * @param {Chunk} chunk the chunk\n   * @param {Hash} hash hash\n   * @param {ChunkHashContext} chunkHashContext chunk hash context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {void}\n   */\n\n\n  chunkHash(chunk, hash, chunkHashContext, _ref3) {\n    let {\n      options,\n      compilation\n    } = _ref3;\n    hash.update(\"JsonpLibraryPlugin\");\n    hash.update(compilation.getPath(options.name, {\n      chunk\n    }));\n  }\n\n}\n\nmodule.exports = JsonpLibraryPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/library/JsonpLibraryPlugin.js"],"names":["ConcatSource","require","AbstractLibraryPlugin","JsonpLibraryPlugin","constructor","options","pluginName","type","parseOptions","library","name","Error","COMMON_LIBRARY_NAME_MESSAGE","render","source","chunk","compilation","getPath","chunkHash","hash","chunkHashContext","update","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,iBAAD,CAAhC;;AACA,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAArC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAME,kBAAN,SAAiCD,qBAAjC,CAAuD;AACtD;AACD;AACA;AACCE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,UAAM;AACLC,MAAAA,UAAU,EAAE,oBADP;AAELC,MAAAA,IAAI,EAAEF,OAAO,CAACE;AAFT,KAAN;AAIA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,YAAY,CAACC,OAAD,EAAU;AACrB,UAAM;AAAEC,MAAAA;AAAF,QAAWD,OAAjB;;AACA,QAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC7B,YAAM,IAAIC,KAAJ,CACJ,+CAA8CT,qBAAqB,CAACU,2BAA4B,EAD5F,CAAN;AAGA;;AACD,WAAO;AACNF,MAAAA,IAAI;AAAE;AAAuBA,MAAAA;AADvB,KAAP;AAGA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,MAAM,CAACC,MAAD,eAA8C;AAAA,QAArC;AAAEC,MAAAA;AAAF,KAAqC;AAAA,QAA1B;AAAEV,MAAAA,OAAF;AAAWW,MAAAA;AAAX,KAA0B;AACnD,UAAMN,IAAI,GAAGM,WAAW,CAACC,OAAZ,CAAoBZ,OAAO,CAACK,IAA5B,EAAkC;AAC9CK,MAAAA;AAD8C,KAAlC,CAAb;AAGA,WAAO,IAAIf,YAAJ,CAAkB,GAAEU,IAAK,GAAzB,EAA6BI,MAA7B,EAAqC,GAArC,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCI,EAAAA,SAAS,CAACH,KAAD,EAAQI,IAAR,EAAcC,gBAAd,SAA0D;AAAA,QAA1B;AAAEf,MAAAA,OAAF;AAAWW,MAAAA;AAAX,KAA0B;AAClEG,IAAAA,IAAI,CAACE,MAAL,CAAY,oBAAZ;AACAF,IAAAA,IAAI,CAACE,MAAL,CAAYL,WAAW,CAACC,OAAZ,CAAoBZ,OAAO,CAACK,IAA5B,EAAkC;AAAEK,MAAAA;AAAF,KAAlC,CAAZ;AACA;;AAlDqD;;AAqDvDO,MAAM,CAACC,OAAP,GAAiBpB,kBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\n * @typedef {Object} JsonpLibraryPluginOptions\n * @property {LibraryType} type\n */\n\n/**\n * @typedef {Object} JsonpLibraryPluginParsed\n * @property {string} name\n */\n\n/**\n * @typedef {JsonpLibraryPluginParsed} T\n * @extends {AbstractLibraryPlugin<JsonpLibraryPluginParsed>}\n */\nclass JsonpLibraryPlugin extends AbstractLibraryPlugin {\n\t/**\n\t * @param {JsonpLibraryPluginOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tsuper({\n\t\t\tpluginName: \"JsonpLibraryPlugin\",\n\t\t\ttype: options.type\n\t\t});\n\t}\n\n\t/**\n\t * @param {LibraryOptions} library normalized library option\n\t * @returns {T | false} preprocess as needed by overriding\n\t */\n\tparseOptions(library) {\n\t\tconst { name } = library;\n\t\tif (typeof name !== \"string\") {\n\t\t\tthrow new Error(\n\t\t\t\t`Jsonp library name must be a simple string. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\n\t\t\t);\n\t\t}\n\t\treturn {\n\t\t\tname: /** @type {string} */ (name)\n\t\t};\n\t}\n\n\t/**\n\t * @param {Source} source source\n\t * @param {RenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {Source} source with library export\n\t */\n\trender(source, { chunk }, { options, compilation }) {\n\t\tconst name = compilation.getPath(options.name, {\n\t\t\tchunk\n\t\t});\n\t\treturn new ConcatSource(`${name}(`, source, \")\");\n\t}\n\n\t/**\n\t * @param {Chunk} chunk the chunk\n\t * @param {Hash} hash hash\n\t * @param {ChunkHashContext} chunkHashContext chunk hash context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {void}\n\t */\n\tchunkHash(chunk, hash, chunkHashContext, { options, compilation }) {\n\t\thash.update(\"JsonpLibraryPlugin\");\n\t\thash.update(compilation.getPath(options.name, { chunk }));\n\t}\n}\n\nmodule.exports = JsonpLibraryPlugin;\n"]},"metadata":{},"sourceType":"script"}