{"ast":null,"code":"const dotenv = require('dotenv');\n/**\n * Merges two objects.\n * @param {Object} apply - The overwriter\n * @param {Object} defaults - The defaults to be overwritten\n * @returns {Object} The merged results.\n */\n\n\nconst merge = function () {\n  let apply = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.assign({}, defaults, apply);\n};\n/**\n * Parses objects like before, but with defaults!\n * @param {String} src - The original src.\n * @param {String} [defaultSrc=''] - The new-and-improved default source.\n * @returns {Object} The parsed results.\n */\n\n\nconst parse = function (src) {\n  let defaultSrc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const parsedSrc = dotenv.parse(src);\n  const parsedDefault = dotenv.parse(defaultSrc);\n  return merge(parsedSrc, parsedDefault);\n};\n/**\n * Runs the configurations and applies it to process.env.\n * @param {Object} [options={}] - The options to determnie how this goes\n * @returns {Object} The parsed results.\n */\n\n\nconst config = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const src = dotenv.config(options); // we run this second so it doesn't override things set from src\n\n  const defaults = dotenv.config(Object.assign({}, options, {\n    path: options.defaults || '.env.defaults'\n  }));\n  return {\n    parsed: merge(src.parsed, defaults.parsed)\n  };\n};\n\nmodule.exports = {\n  parse,\n  config\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/dotenv-defaults/src/index.js"],"names":["dotenv","require","merge","apply","defaults","Object","assign","parse","src","defaultSrc","parsedSrc","parsedDefault","config","options","path","parsed","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,KAAK,GAAG;AAAA,MAACC,KAAD,uEAAS,EAAT;AAAA,MAAaC,QAAb,uEAAwB,EAAxB;AAAA,SAA+BC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,QAAlB,EAA4BD,KAA5B,CAA/B;AAAA,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,KAAK,GAAG,UAACC,GAAD,EAA0B;AAAA,MAApBC,UAAoB,uEAAP,EAAO;AACtC,QAAMC,SAAS,GAAGV,MAAM,CAACO,KAAP,CAAaC,GAAb,CAAlB;AACA,QAAMG,aAAa,GAAGX,MAAM,CAACO,KAAP,CAAaE,UAAb,CAAtB;AAEA,SAAOP,KAAK,CAACQ,SAAD,EAAYC,aAAZ,CAAZ;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAG,YAAkB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAC/B,QAAML,GAAG,GAAGR,MAAM,CAACY,MAAP,CAAcC,OAAd,CAAZ,CAD+B,CAE/B;;AACA,QAAMT,QAAQ,GAAGJ,MAAM,CAACY,MAAP,CAAcP,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBO,OAAlB,EAA2B;AACxDC,IAAAA,IAAI,EAAED,OAAO,CAACT,QAAR,IAAoB;AAD8B,GAA3B,CAAd,CAAjB;AAIA,SAAO;AACLW,IAAAA,MAAM,EAAEb,KAAK,CAACM,GAAG,CAACO,MAAL,EAAaX,QAAQ,CAACW,MAAtB;AADR,GAAP;AAGD,CAVD;;AAYAC,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,KADe;AAEfK,EAAAA;AAFe,CAAjB","sourcesContent":["const dotenv = require('dotenv')\n\n/**\n * Merges two objects.\n * @param {Object} apply - The overwriter\n * @param {Object} defaults - The defaults to be overwritten\n * @returns {Object} The merged results.\n */\nconst merge = (apply = {}, defaults = {}) => Object.assign({}, defaults, apply)\n\n/**\n * Parses objects like before, but with defaults!\n * @param {String} src - The original src.\n * @param {String} [defaultSrc=''] - The new-and-improved default source.\n * @returns {Object} The parsed results.\n */\nconst parse = (src, defaultSrc = '') => {\n  const parsedSrc = dotenv.parse(src)\n  const parsedDefault = dotenv.parse(defaultSrc)\n\n  return merge(parsedSrc, parsedDefault)\n}\n\n/**\n * Runs the configurations and applies it to process.env.\n * @param {Object} [options={}] - The options to determnie how this goes\n * @returns {Object} The parsed results.\n */\nconst config = (options = {}) => {\n  const src = dotenv.config(options)\n  // we run this second so it doesn't override things set from src\n  const defaults = dotenv.config(Object.assign({}, options, {\n    path: options.defaults || '.env.defaults'\n  }))\n\n  return {\n    parsed: merge(src.parsed, defaults.parsed)\n  }\n}\n\nmodule.exports = {\n  parse,\n  config\n}\n"]},"metadata":{},"sourceType":"script"}