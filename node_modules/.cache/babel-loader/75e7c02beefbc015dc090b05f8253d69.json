{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst identifierUtils = require(\"./util/identifier\");\n/** @typedef {import(\"../declarations/WebpackOptions\").StatsOptions} StatsOptions */\n\n/** @typedef {import(\"./Stats\")} Stats */\n\n/** @typedef {import(\"./stats/DefaultStatsFactoryPlugin\").KnownStatsCompilation} KnownStatsCompilation */\n\n/** @typedef {import(\"./stats/DefaultStatsFactoryPlugin\").StatsCompilation} StatsCompilation */\n\n\nconst indent = (str, prefix) => {\n  const rem = str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n  return prefix + rem;\n};\n\nclass MultiStats {\n  /**\n   * @param {Stats[]} stats the child stats\n   */\n  constructor(stats) {\n    this.stats = stats;\n  }\n\n  get hash() {\n    return this.stats.map(stat => stat.hash).join(\"\");\n  }\n  /**\n   * @returns {boolean} true if a child compilation encountered an error\n   */\n\n\n  hasErrors() {\n    return this.stats.some(stat => stat.hasErrors());\n  }\n  /**\n   * @returns {boolean} true if a child compilation had a warning\n   */\n\n\n  hasWarnings() {\n    return this.stats.some(stat => stat.hasWarnings());\n  }\n\n  _createChildOptions(options, context) {\n    if (!options) {\n      options = {};\n    }\n\n    const {\n      children: childrenOptions = undefined,\n      ...baseOptions\n    } = typeof options === \"string\" ? {\n      preset: options\n    } : options;\n    const children = this.stats.map((stat, idx) => {\n      const childOptions = Array.isArray(childrenOptions) ? childrenOptions[idx] : childrenOptions;\n      return stat.compilation.createStatsOptions({ ...baseOptions,\n        ...(typeof childOptions === \"string\" ? {\n          preset: childOptions\n        } : childOptions && typeof childOptions === \"object\" ? childOptions : undefined)\n      }, context);\n    });\n    return {\n      version: children.every(o => o.version),\n      hash: children.every(o => o.hash),\n      errorsCount: children.every(o => o.errorsCount),\n      warningsCount: children.every(o => o.warningsCount),\n      errors: children.every(o => o.errors),\n      warnings: children.every(o => o.warnings),\n      children\n    };\n  }\n  /**\n   * @param {any} options stats options\n   * @returns {StatsCompilation} json output\n   */\n\n\n  toJson(options) {\n    options = this._createChildOptions(options, {\n      forToString: false\n    });\n    /** @type {KnownStatsCompilation} */\n\n    const obj = {};\n    obj.children = this.stats.map((stat, idx) => {\n      const obj = stat.toJson(options.children[idx]);\n      const compilationName = stat.compilation.name;\n      const name = compilationName && identifierUtils.makePathsRelative(options.context, compilationName, stat.compilation.compiler.root);\n      obj.name = name;\n      return obj;\n    });\n\n    if (options.version) {\n      obj.version = obj.children[0].version;\n    }\n\n    if (options.hash) {\n      obj.hash = obj.children.map(j => j.hash).join(\"\");\n    }\n\n    const mapError = (j, obj) => {\n      return { ...obj,\n        compilerPath: obj.compilerPath ? `${j.name}.${obj.compilerPath}` : j.name\n      };\n    };\n\n    if (options.errors) {\n      obj.errors = [];\n\n      for (const j of obj.children) {\n        for (const i of j.errors) {\n          obj.errors.push(mapError(j, i));\n        }\n      }\n    }\n\n    if (options.warnings) {\n      obj.warnings = [];\n\n      for (const j of obj.children) {\n        for (const i of j.warnings) {\n          obj.warnings.push(mapError(j, i));\n        }\n      }\n    }\n\n    if (options.errorsCount) {\n      obj.errorsCount = 0;\n\n      for (const j of obj.children) {\n        obj.errorsCount += j.errorsCount;\n      }\n    }\n\n    if (options.warningsCount) {\n      obj.warningsCount = 0;\n\n      for (const j of obj.children) {\n        obj.warningsCount += j.warningsCount;\n      }\n    }\n\n    return obj;\n  }\n\n  toString(options) {\n    options = this._createChildOptions(options, {\n      forToString: true\n    });\n    const results = this.stats.map((stat, idx) => {\n      const str = stat.toString(options.children[idx]);\n      const compilationName = stat.compilation.name;\n      const name = compilationName && identifierUtils.makePathsRelative(options.context, compilationName, stat.compilation.compiler.root).replace(/\\|/g, \" \");\n      if (!str) return str;\n      return name ? `${name}:\\n${indent(str, \"  \")}` : str;\n    });\n    return results.filter(Boolean).join(\"\\n\\n\");\n  }\n\n}\n\nmodule.exports = MultiStats;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/MultiStats.js"],"names":["identifierUtils","require","indent","str","prefix","rem","replace","MultiStats","constructor","stats","hash","map","stat","join","hasErrors","some","hasWarnings","_createChildOptions","options","context","children","childrenOptions","undefined","baseOptions","preset","idx","childOptions","Array","isArray","compilation","createStatsOptions","version","every","o","errorsCount","warningsCount","errors","warnings","toJson","forToString","obj","compilationName","name","makePathsRelative","compiler","root","j","mapError","compilerPath","i","push","toString","results","filter","Boolean","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst identifierUtils = require(\"./util/identifier\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").StatsOptions} StatsOptions */\n/** @typedef {import(\"./Stats\")} Stats */\n/** @typedef {import(\"./stats/DefaultStatsFactoryPlugin\").KnownStatsCompilation} KnownStatsCompilation */\n/** @typedef {import(\"./stats/DefaultStatsFactoryPlugin\").StatsCompilation} StatsCompilation */\n\nconst indent = (str, prefix) => {\n\tconst rem = str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n\treturn prefix + rem;\n};\n\nclass MultiStats {\n\t/**\n\t * @param {Stats[]} stats the child stats\n\t */\n\tconstructor(stats) {\n\t\tthis.stats = stats;\n\t}\n\n\tget hash() {\n\t\treturn this.stats.map(stat => stat.hash).join(\"\");\n\t}\n\n\t/**\n\t * @returns {boolean} true if a child compilation encountered an error\n\t */\n\thasErrors() {\n\t\treturn this.stats.some(stat => stat.hasErrors());\n\t}\n\n\t/**\n\t * @returns {boolean} true if a child compilation had a warning\n\t */\n\thasWarnings() {\n\t\treturn this.stats.some(stat => stat.hasWarnings());\n\t}\n\n\t_createChildOptions(options, context) {\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\tconst { children: childrenOptions = undefined, ...baseOptions } =\n\t\t\ttypeof options === \"string\" ? { preset: options } : options;\n\t\tconst children = this.stats.map((stat, idx) => {\n\t\t\tconst childOptions = Array.isArray(childrenOptions)\n\t\t\t\t? childrenOptions[idx]\n\t\t\t\t: childrenOptions;\n\t\t\treturn stat.compilation.createStatsOptions(\n\t\t\t\t{\n\t\t\t\t\t...baseOptions,\n\t\t\t\t\t...(typeof childOptions === \"string\"\n\t\t\t\t\t\t? { preset: childOptions }\n\t\t\t\t\t\t: childOptions && typeof childOptions === \"object\"\n\t\t\t\t\t\t? childOptions\n\t\t\t\t\t\t: undefined)\n\t\t\t\t},\n\t\t\t\tcontext\n\t\t\t);\n\t\t});\n\t\treturn {\n\t\t\tversion: children.every(o => o.version),\n\t\t\thash: children.every(o => o.hash),\n\t\t\terrorsCount: children.every(o => o.errorsCount),\n\t\t\twarningsCount: children.every(o => o.warningsCount),\n\t\t\terrors: children.every(o => o.errors),\n\t\t\twarnings: children.every(o => o.warnings),\n\t\t\tchildren\n\t\t};\n\t}\n\n\t/**\n\t * @param {any} options stats options\n\t * @returns {StatsCompilation} json output\n\t */\n\ttoJson(options) {\n\t\toptions = this._createChildOptions(options, { forToString: false });\n\t\t/** @type {KnownStatsCompilation} */\n\t\tconst obj = {};\n\t\tobj.children = this.stats.map((stat, idx) => {\n\t\t\tconst obj = stat.toJson(options.children[idx]);\n\t\t\tconst compilationName = stat.compilation.name;\n\t\t\tconst name =\n\t\t\t\tcompilationName &&\n\t\t\t\tidentifierUtils.makePathsRelative(\n\t\t\t\t\toptions.context,\n\t\t\t\t\tcompilationName,\n\t\t\t\t\tstat.compilation.compiler.root\n\t\t\t\t);\n\t\t\tobj.name = name;\n\t\t\treturn obj;\n\t\t});\n\t\tif (options.version) {\n\t\t\tobj.version = obj.children[0].version;\n\t\t}\n\t\tif (options.hash) {\n\t\t\tobj.hash = obj.children.map(j => j.hash).join(\"\");\n\t\t}\n\t\tconst mapError = (j, obj) => {\n\t\t\treturn {\n\t\t\t\t...obj,\n\t\t\t\tcompilerPath: obj.compilerPath\n\t\t\t\t\t? `${j.name}.${obj.compilerPath}`\n\t\t\t\t\t: j.name\n\t\t\t};\n\t\t};\n\t\tif (options.errors) {\n\t\t\tobj.errors = [];\n\t\t\tfor (const j of obj.children) {\n\t\t\t\tfor (const i of j.errors) {\n\t\t\t\t\tobj.errors.push(mapError(j, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (options.warnings) {\n\t\t\tobj.warnings = [];\n\t\t\tfor (const j of obj.children) {\n\t\t\t\tfor (const i of j.warnings) {\n\t\t\t\t\tobj.warnings.push(mapError(j, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (options.errorsCount) {\n\t\t\tobj.errorsCount = 0;\n\t\t\tfor (const j of obj.children) {\n\t\t\t\tobj.errorsCount += j.errorsCount;\n\t\t\t}\n\t\t}\n\t\tif (options.warningsCount) {\n\t\t\tobj.warningsCount = 0;\n\t\t\tfor (const j of obj.children) {\n\t\t\t\tobj.warningsCount += j.warningsCount;\n\t\t\t}\n\t\t}\n\t\treturn obj;\n\t}\n\n\ttoString(options) {\n\t\toptions = this._createChildOptions(options, { forToString: true });\n\t\tconst results = this.stats.map((stat, idx) => {\n\t\t\tconst str = stat.toString(options.children[idx]);\n\t\t\tconst compilationName = stat.compilation.name;\n\t\t\tconst name =\n\t\t\t\tcompilationName &&\n\t\t\t\tidentifierUtils\n\t\t\t\t\t.makePathsRelative(\n\t\t\t\t\t\toptions.context,\n\t\t\t\t\t\tcompilationName,\n\t\t\t\t\t\tstat.compilation.compiler.root\n\t\t\t\t\t)\n\t\t\t\t\t.replace(/\\|/g, \" \");\n\t\t\tif (!str) return str;\n\t\t\treturn name ? `${name}:\\n${indent(str, \"  \")}` : str;\n\t\t});\n\t\treturn results.filter(Boolean).join(\"\\n\\n\");\n\t}\n}\n\nmodule.exports = MultiStats;\n"]},"metadata":{},"sourceType":"script"}