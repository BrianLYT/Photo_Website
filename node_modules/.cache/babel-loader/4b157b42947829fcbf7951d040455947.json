{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst basename = require(\"./getPaths\").basename;\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n\nmodule.exports = class CloneBasenamePlugin {\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"CloneBasenamePlugin\", (request, resolveContext, callback) => {\n      const filename = basename(request.path);\n      const filePath = resolver.join(request.path, filename);\n      const obj = { ...request,\n        path: filePath,\n        relativePath: request.relativePath && resolver.join(request.relativePath, filename)\n      };\n      resolver.doResolve(target, obj, \"using path: \" + filePath, resolveContext, callback);\n    });\n  }\n\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/enhanced-resolve/lib/CloneBasenamePlugin.js"],"names":["basename","require","module","exports","CloneBasenamePlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","filename","path","filePath","join","obj","relativePath","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,QAAvC;AAEA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,mBAAN,CAA0B;AAC1CC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACAE,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,qBAFX,EAEkC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACvE,YAAMC,QAAQ,GAAGhB,QAAQ,CAACa,OAAO,CAACI,IAAT,CAAzB;AACA,YAAMC,QAAQ,GAAGT,QAAQ,CAACU,IAAT,CAAcN,OAAO,CAACI,IAAtB,EAA4BD,QAA5B,CAAjB;AACA,YAAMI,GAAG,GAAG,EACX,GAAGP,OADQ;AAEXI,QAAAA,IAAI,EAAEC,QAFK;AAGXG,QAAAA,YAAY,EACXR,OAAO,CAACQ,YAAR,IACAZ,QAAQ,CAACU,IAAT,CAAcN,OAAO,CAACQ,YAAtB,EAAoCL,QAApC;AALU,OAAZ;AAOAP,MAAAA,QAAQ,CAACa,SAAT,CACCf,MADD,EAECa,GAFD,EAGC,iBAAiBF,QAHlB,EAICJ,cAJD,EAKCC,QALD;AAOA,KAnBF;AAoBA;;AAhCyC,CAA3C","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst basename = require(\"./getPaths\").basename;\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n\nmodule.exports = class CloneBasenamePlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"CloneBasenamePlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst filename = basename(request.path);\n\t\t\t\tconst filePath = resolver.join(request.path, filename);\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: filePath,\n\t\t\t\t\trelativePath:\n\t\t\t\t\t\trequest.relativePath &&\n\t\t\t\t\t\tresolver.join(request.relativePath, filename)\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"using path: \" + filePath,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}