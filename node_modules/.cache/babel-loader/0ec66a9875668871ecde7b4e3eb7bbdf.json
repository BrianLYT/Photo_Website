{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra and Zackary Jackson @ScriptedAlchemy\n*/\n\"use strict\";\n\nconst {\n  parseOptions\n} = require(\"../container/options\");\n\nconst ConsumeSharedPlugin = require(\"./ConsumeSharedPlugin\");\n\nconst ProvideSharedPlugin = require(\"./ProvideSharedPlugin\");\n\nconst {\n  isRequiredVersion\n} = require(\"./utils\");\n/** @typedef {import(\"../../declarations/plugins/sharing/ConsumeSharedPlugin\").ConsumeSharedPluginOptions} ConsumeSharedPluginOptions */\n\n/** @typedef {import(\"../../declarations/plugins/sharing/ConsumeSharedPlugin\").ConsumesConfig} ConsumesConfig */\n\n/** @typedef {import(\"../../declarations/plugins/sharing/ProvideSharedPlugin\").ProvideSharedPluginOptions} ProvideSharedPluginOptions */\n\n/** @typedef {import(\"../../declarations/plugins/sharing/ProvideSharedPlugin\").ProvidesConfig} ProvidesConfig */\n\n/** @typedef {import(\"../../declarations/plugins/sharing/SharePlugin\").SharePluginOptions} SharePluginOptions */\n\n/** @typedef {import(\"../../declarations/plugins/sharing/SharePlugin\").SharedConfig} SharedConfig */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass SharePlugin {\n  /**\n   * @param {SharePluginOptions} options options\n   */\n  constructor(options) {\n    /** @type {[string, SharedConfig][]} */\n    const sharedOptions = parseOptions(options.shared, (item, key) => {\n      if (typeof item !== \"string\") throw new Error(\"Unexpected array in shared\");\n      /** @type {SharedConfig} */\n\n      const config = item === key || !isRequiredVersion(item) ? {\n        import: item\n      } : {\n        import: key,\n        requiredVersion: item\n      };\n      return config;\n    }, item => item);\n    /** @type {Record<string, ConsumesConfig>[]} */\n\n    const consumes = sharedOptions.map(_ref => {\n      let [key, options] = _ref;\n      return {\n        [key]: {\n          import: options.import,\n          shareKey: options.shareKey || key,\n          shareScope: options.shareScope,\n          requiredVersion: options.requiredVersion,\n          strictVersion: options.strictVersion,\n          singleton: options.singleton,\n          packageName: options.packageName,\n          eager: options.eager\n        }\n      };\n    });\n    /** @type {Record<string, ProvidesConfig>[]} */\n\n    const provides = sharedOptions.filter(_ref2 => {\n      let [, options] = _ref2;\n      return options.import !== false;\n    }).map(_ref3 => {\n      let [key, options] = _ref3;\n      return {\n        [options.import || key]: {\n          shareKey: options.shareKey || key,\n          shareScope: options.shareScope,\n          version: options.version,\n          eager: options.eager\n        }\n      };\n    });\n    this._shareScope = options.shareScope;\n    this._consumes = consumes;\n    this._provides = provides;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    new ConsumeSharedPlugin({\n      shareScope: this._shareScope,\n      consumes: this._consumes\n    }).apply(compiler);\n    new ProvideSharedPlugin({\n      shareScope: this._shareScope,\n      provides: this._provides\n    }).apply(compiler);\n  }\n\n}\n\nmodule.exports = SharePlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/sharing/SharePlugin.js"],"names":["parseOptions","require","ConsumeSharedPlugin","ProvideSharedPlugin","isRequiredVersion","SharePlugin","constructor","options","sharedOptions","shared","item","key","Error","config","import","requiredVersion","consumes","map","shareKey","shareScope","strictVersion","singleton","packageName","eager","provides","filter","version","_shareScope","_consumes","_provides","apply","compiler","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra and Zackary Jackson @ScriptedAlchemy\n*/\n\n\"use strict\";\n\nconst { parseOptions } = require(\"../container/options\");\nconst ConsumeSharedPlugin = require(\"./ConsumeSharedPlugin\");\nconst ProvideSharedPlugin = require(\"./ProvideSharedPlugin\");\nconst { isRequiredVersion } = require(\"./utils\");\n\n/** @typedef {import(\"../../declarations/plugins/sharing/ConsumeSharedPlugin\").ConsumeSharedPluginOptions} ConsumeSharedPluginOptions */\n/** @typedef {import(\"../../declarations/plugins/sharing/ConsumeSharedPlugin\").ConsumesConfig} ConsumesConfig */\n/** @typedef {import(\"../../declarations/plugins/sharing/ProvideSharedPlugin\").ProvideSharedPluginOptions} ProvideSharedPluginOptions */\n/** @typedef {import(\"../../declarations/plugins/sharing/ProvideSharedPlugin\").ProvidesConfig} ProvidesConfig */\n/** @typedef {import(\"../../declarations/plugins/sharing/SharePlugin\").SharePluginOptions} SharePluginOptions */\n/** @typedef {import(\"../../declarations/plugins/sharing/SharePlugin\").SharedConfig} SharedConfig */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass SharePlugin {\n\t/**\n\t * @param {SharePluginOptions} options options\n\t */\n\tconstructor(options) {\n\t\t/** @type {[string, SharedConfig][]} */\n\t\tconst sharedOptions = parseOptions(\n\t\t\toptions.shared,\n\t\t\t(item, key) => {\n\t\t\t\tif (typeof item !== \"string\")\n\t\t\t\t\tthrow new Error(\"Unexpected array in shared\");\n\t\t\t\t/** @type {SharedConfig} */\n\t\t\t\tconst config =\n\t\t\t\t\titem === key || !isRequiredVersion(item)\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\timport: item\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\timport: key,\n\t\t\t\t\t\t\t\trequiredVersion: item\n\t\t\t\t\t\t  };\n\t\t\t\treturn config;\n\t\t\t},\n\t\t\titem => item\n\t\t);\n\t\t/** @type {Record<string, ConsumesConfig>[]} */\n\t\tconst consumes = sharedOptions.map(([key, options]) => ({\n\t\t\t[key]: {\n\t\t\t\timport: options.import,\n\t\t\t\tshareKey: options.shareKey || key,\n\t\t\t\tshareScope: options.shareScope,\n\t\t\t\trequiredVersion: options.requiredVersion,\n\t\t\t\tstrictVersion: options.strictVersion,\n\t\t\t\tsingleton: options.singleton,\n\t\t\t\tpackageName: options.packageName,\n\t\t\t\teager: options.eager\n\t\t\t}\n\t\t}));\n\t\t/** @type {Record<string, ProvidesConfig>[]} */\n\t\tconst provides = sharedOptions\n\t\t\t.filter(([, options]) => options.import !== false)\n\t\t\t.map(([key, options]) => ({\n\t\t\t\t[options.import || key]: {\n\t\t\t\t\tshareKey: options.shareKey || key,\n\t\t\t\t\tshareScope: options.shareScope,\n\t\t\t\t\tversion: options.version,\n\t\t\t\t\teager: options.eager\n\t\t\t\t}\n\t\t\t}));\n\t\tthis._shareScope = options.shareScope;\n\t\tthis._consumes = consumes;\n\t\tthis._provides = provides;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tnew ConsumeSharedPlugin({\n\t\t\tshareScope: this._shareScope,\n\t\t\tconsumes: this._consumes\n\t\t}).apply(compiler);\n\t\tnew ProvideSharedPlugin({\n\t\t\tshareScope: this._shareScope,\n\t\t\tprovides: this._provides\n\t\t}).apply(compiler);\n\t}\n}\n\nmodule.exports = SharePlugin;\n"]},"metadata":{},"sourceType":"script"}