{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst {\n  getDependencyUsedByExportsCondition\n} = require(\"../optimize/InnerGraph\");\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst memoize = require(\"../util/memoize\");\n\nconst ModuleDependency = require(\"./ModuleDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nconst getRawDataUrlModule = memoize(() => require(\"../asset/RawDataUrlModule\"));\n\nclass URLDependency extends ModuleDependency {\n  /**\n   * @param {string} request request\n   * @param {[number, number]} range range of the arguments of new URL( |> ... <| )\n   * @param {[number, number]} outerRange range of the full |> new URL(...) <|\n   * @param {boolean=} relative use relative urls instead of absolute with base uri\n   */\n  constructor(request, range, outerRange, relative) {\n    super(request);\n    this.range = range;\n    this.outerRange = outerRange;\n    this.relative = relative || false;\n    /** @type {Set<string> | boolean} */\n\n    this.usedByExports = undefined;\n  }\n\n  get type() {\n    return \"new URL()\";\n  }\n\n  get category() {\n    return \"url\";\n  }\n  /**\n   * @param {ModuleGraph} moduleGraph module graph\n   * @returns {null | false | function(ModuleGraphConnection, RuntimeSpec): ConnectionState} function to determine if the connection is active\n   */\n\n\n  getCondition(moduleGraph) {\n    return getDependencyUsedByExportsCondition(this, this.usedByExports, moduleGraph);\n  }\n  /**\n   * @param {string} context context directory\n   * @returns {Module} a module\n   */\n\n\n  createIgnoredModule(context) {\n    const RawDataUrlModule = getRawDataUrlModule();\n    return new RawDataUrlModule(\"data:,\", `ignored-asset`, `(ignored asset)`);\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.outerRange);\n    write(this.relative);\n    write(this.usedByExports);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.outerRange = read();\n    this.relative = read();\n    this.usedByExports = read();\n    super.deserialize(context);\n  }\n\n}\n\nURLDependency.Template = class URLDependencyTemplate extends ModuleDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const {\n      chunkGraph,\n      moduleGraph,\n      runtimeRequirements,\n      runtimeTemplate,\n      runtime\n    } = templateContext;\n    const dep =\n    /** @type {URLDependency} */\n    dependency;\n    const connection = moduleGraph.getConnection(dep); // Skip rendering depending when dependency is conditional\n\n    if (connection && !connection.isTargetActive(runtime)) {\n      source.replace(dep.outerRange[0], dep.outerRange[1] - 1, \"/* unused asset import */ undefined\");\n      return;\n    }\n\n    runtimeRequirements.add(RuntimeGlobals.require);\n\n    if (dep.relative) {\n      runtimeRequirements.add(RuntimeGlobals.relativeUrl);\n      source.replace(dep.outerRange[0], dep.outerRange[1] - 1, `/* asset import */ new ${RuntimeGlobals.relativeUrl}(${runtimeTemplate.moduleRaw({\n        chunkGraph,\n        module: moduleGraph.getModule(dep),\n        request: dep.request,\n        runtimeRequirements,\n        weak: false\n      })})`);\n    } else {\n      runtimeRequirements.add(RuntimeGlobals.baseURI);\n      source.replace(dep.range[0], dep.range[1] - 1, `/* asset import */ ${runtimeTemplate.moduleRaw({\n        chunkGraph,\n        module: moduleGraph.getModule(dep),\n        request: dep.request,\n        runtimeRequirements,\n        weak: false\n      })}, ${RuntimeGlobals.baseURI}`);\n    }\n  }\n\n};\nmakeSerializable(URLDependency, \"webpack/lib/dependencies/URLDependency\");\nmodule.exports = URLDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/URLDependency.js"],"names":["RuntimeGlobals","require","getDependencyUsedByExportsCondition","makeSerializable","memoize","ModuleDependency","getRawDataUrlModule","URLDependency","constructor","request","range","outerRange","relative","usedByExports","undefined","type","category","getCondition","moduleGraph","createIgnoredModule","context","RawDataUrlModule","serialize","write","deserialize","read","Template","URLDependencyTemplate","apply","dependency","source","templateContext","chunkGraph","runtimeRequirements","runtimeTemplate","runtime","dep","connection","getConnection","isTargetActive","replace","add","relativeUrl","moduleRaw","module","getModule","weak","baseURI","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst {\n\tgetDependencyUsedByExportsCondition\n} = require(\"../optimize/InnerGraph\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst memoize = require(\"../util/memoize\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nconst getRawDataUrlModule = memoize(() => require(\"../asset/RawDataUrlModule\"));\n\nclass URLDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request request\n\t * @param {[number, number]} range range of the arguments of new URL( |> ... <| )\n\t * @param {[number, number]} outerRange range of the full |> new URL(...) <|\n\t * @param {boolean=} relative use relative urls instead of absolute with base uri\n\t */\n\tconstructor(request, range, outerRange, relative) {\n\t\tsuper(request);\n\t\tthis.range = range;\n\t\tthis.outerRange = outerRange;\n\t\tthis.relative = relative || false;\n\t\t/** @type {Set<string> | boolean} */\n\t\tthis.usedByExports = undefined;\n\t}\n\n\tget type() {\n\t\treturn \"new URL()\";\n\t}\n\n\tget category() {\n\t\treturn \"url\";\n\t}\n\n\t/**\n\t * @param {ModuleGraph} moduleGraph module graph\n\t * @returns {null | false | function(ModuleGraphConnection, RuntimeSpec): ConnectionState} function to determine if the connection is active\n\t */\n\tgetCondition(moduleGraph) {\n\t\treturn getDependencyUsedByExportsCondition(\n\t\t\tthis,\n\t\t\tthis.usedByExports,\n\t\t\tmoduleGraph\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} context context directory\n\t * @returns {Module} a module\n\t */\n\tcreateIgnoredModule(context) {\n\t\tconst RawDataUrlModule = getRawDataUrlModule();\n\t\treturn new RawDataUrlModule(\"data:,\", `ignored-asset`, `(ignored asset)`);\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.outerRange);\n\t\twrite(this.relative);\n\t\twrite(this.usedByExports);\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.outerRange = read();\n\t\tthis.relative = read();\n\t\tthis.usedByExports = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nURLDependency.Template = class URLDependencyTemplate extends (\n\tModuleDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst {\n\t\t\tchunkGraph,\n\t\t\tmoduleGraph,\n\t\t\truntimeRequirements,\n\t\t\truntimeTemplate,\n\t\t\truntime\n\t\t} = templateContext;\n\t\tconst dep = /** @type {URLDependency} */ (dependency);\n\t\tconst connection = moduleGraph.getConnection(dep);\n\t\t// Skip rendering depending when dependency is conditional\n\t\tif (connection && !connection.isTargetActive(runtime)) {\n\t\t\tsource.replace(\n\t\t\t\tdep.outerRange[0],\n\t\t\t\tdep.outerRange[1] - 1,\n\t\t\t\t\"/* unused asset import */ undefined\"\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\truntimeRequirements.add(RuntimeGlobals.require);\n\n\t\tif (dep.relative) {\n\t\t\truntimeRequirements.add(RuntimeGlobals.relativeUrl);\n\t\t\tsource.replace(\n\t\t\t\tdep.outerRange[0],\n\t\t\t\tdep.outerRange[1] - 1,\n\t\t\t\t`/* asset import */ new ${\n\t\t\t\t\tRuntimeGlobals.relativeUrl\n\t\t\t\t}(${runtimeTemplate.moduleRaw({\n\t\t\t\t\tchunkGraph,\n\t\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\t\trequest: dep.request,\n\t\t\t\t\truntimeRequirements,\n\t\t\t\t\tweak: false\n\t\t\t\t})})`\n\t\t\t);\n\t\t} else {\n\t\t\truntimeRequirements.add(RuntimeGlobals.baseURI);\n\n\t\t\tsource.replace(\n\t\t\t\tdep.range[0],\n\t\t\t\tdep.range[1] - 1,\n\t\t\t\t`/* asset import */ ${runtimeTemplate.moduleRaw({\n\t\t\t\t\tchunkGraph,\n\t\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\t\trequest: dep.request,\n\t\t\t\t\truntimeRequirements,\n\t\t\t\t\tweak: false\n\t\t\t\t})}, ${RuntimeGlobals.baseURI}`\n\t\t\t);\n\t\t}\n\t}\n};\n\nmakeSerializable(URLDependency, \"webpack/lib/dependencies/URLDependency\");\n\nmodule.exports = URLDependency;\n"]},"metadata":{},"sourceType":"script"}