{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n\nclass ChunkPrefetchFunctionRuntimeModule extends RuntimeModule {\n  /**\n   * @param {string} childType TODO\n   * @param {string} runtimeFunction TODO\n   * @param {string} runtimeHandlers TODO\n   */\n  constructor(childType, runtimeFunction, runtimeHandlers) {\n    super(`chunk ${childType} function`);\n    this.childType = childType;\n    this.runtimeFunction = runtimeFunction;\n    this.runtimeHandlers = runtimeHandlers;\n  }\n  /**\n   * @returns {string} runtime code\n   */\n\n\n  generate() {\n    const {\n      runtimeFunction,\n      runtimeHandlers\n    } = this;\n    const {\n      runtimeTemplate\n    } = this.compilation;\n    return Template.asString([`${runtimeHandlers} = {};`, `${runtimeFunction} = ${runtimeTemplate.basicFunction(\"chunkId\", [// map is shorter than forEach\n    `Object.keys(${runtimeHandlers}).map(${runtimeTemplate.basicFunction(\"key\", `${runtimeHandlers}[key](chunkId);`)});`])}`]);\n  }\n\n}\n\nmodule.exports = ChunkPrefetchFunctionRuntimeModule;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/prefetch/ChunkPrefetchFunctionRuntimeModule.js"],"names":["RuntimeModule","require","Template","ChunkPrefetchFunctionRuntimeModule","constructor","childType","runtimeFunction","runtimeHandlers","generate","runtimeTemplate","compilation","asString","basicFunction","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAxB;AAEA;;;AAEA,MAAME,kCAAN,SAAiDH,aAAjD,CAA+D;AAC9D;AACD;AACA;AACA;AACA;AACCI,EAAAA,WAAW,CAACC,SAAD,EAAYC,eAAZ,EAA6BC,eAA7B,EAA8C;AACxD,UAAO,SAAQF,SAAU,WAAzB;AACA,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,QAAQ,GAAG;AACV,UAAM;AAAEF,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,QAAuC,IAA7C;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAsB,KAAKC,WAAjC;AACA,WAAOR,QAAQ,CAACS,QAAT,CAAkB,CACvB,GAAEJ,eAAgB,QADK,EAEvB,GAAED,eAAgB,MAAKG,eAAe,CAACG,aAAhB,CAA8B,SAA9B,EAAyC,CAChE;AACC,mBAAcL,eAAgB,SAAQE,eAAe,CAACG,aAAhB,CACtC,KADsC,EAErC,GAAEL,eAAgB,iBAFmB,CAGrC,IAL8D,CAAzC,CAMrB,EARqB,CAAlB,CAAP;AAUA;;AA7B6D;;AAgC/DM,MAAM,CAACC,OAAP,GAAiBX,kCAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\nclass ChunkPrefetchFunctionRuntimeModule extends RuntimeModule {\n\t/**\n\t * @param {string} childType TODO\n\t * @param {string} runtimeFunction TODO\n\t * @param {string} runtimeHandlers TODO\n\t */\n\tconstructor(childType, runtimeFunction, runtimeHandlers) {\n\t\tsuper(`chunk ${childType} function`);\n\t\tthis.childType = childType;\n\t\tthis.runtimeFunction = runtimeFunction;\n\t\tthis.runtimeHandlers = runtimeHandlers;\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { runtimeFunction, runtimeHandlers } = this;\n\t\tconst { runtimeTemplate } = this.compilation;\n\t\treturn Template.asString([\n\t\t\t`${runtimeHandlers} = {};`,\n\t\t\t`${runtimeFunction} = ${runtimeTemplate.basicFunction(\"chunkId\", [\n\t\t\t\t// map is shorter than forEach\n\t\t\t\t`Object.keys(${runtimeHandlers}).map(${runtimeTemplate.basicFunction(\n\t\t\t\t\t\"key\",\n\t\t\t\t\t`${runtimeHandlers}[key](chunkId);`\n\t\t\t\t)});`\n\t\t\t])}`\n\t\t]);\n\t}\n}\n\nmodule.exports = ChunkPrefetchFunctionRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}