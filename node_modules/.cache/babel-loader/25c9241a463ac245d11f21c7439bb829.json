{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst StartupChunkDependenciesRuntimeModule = require(\"./StartupChunkDependenciesRuntimeModule\");\n\nconst StartupEntrypointRuntimeModule = require(\"./StartupEntrypointRuntimeModule\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass StartupChunkDependenciesPlugin {\n  constructor(options) {\n    this.chunkLoading = options.chunkLoading;\n    this.asyncChunkLoading = typeof options.asyncChunkLoading === \"boolean\" ? options.asyncChunkLoading : true;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"StartupChunkDependenciesPlugin\", compilation => {\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === this.chunkLoading;\n      };\n\n      compilation.hooks.additionalTreeRuntimeRequirements.tap(\"StartupChunkDependenciesPlugin\", (chunk, set, _ref) => {\n        let {\n          chunkGraph\n        } = _ref;\n        if (!isEnabledForChunk(chunk)) return;\n\n        if (chunkGraph.hasChunkEntryDependentChunks(chunk)) {\n          set.add(RuntimeGlobals.startup);\n          set.add(RuntimeGlobals.ensureChunk);\n          set.add(RuntimeGlobals.ensureChunkIncludeEntries);\n          compilation.addRuntimeModule(chunk, new StartupChunkDependenciesRuntimeModule(this.asyncChunkLoading));\n        }\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.startupEntrypoint).tap(\"StartupChunkDependenciesPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.require);\n        set.add(RuntimeGlobals.ensureChunk);\n        set.add(RuntimeGlobals.ensureChunkIncludeEntries);\n        compilation.addRuntimeModule(chunk, new StartupEntrypointRuntimeModule(this.asyncChunkLoading));\n      });\n    });\n  }\n\n}\n\nmodule.exports = StartupChunkDependenciesPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/runtime/StartupChunkDependenciesPlugin.js"],"names":["RuntimeGlobals","require","StartupChunkDependenciesRuntimeModule","StartupEntrypointRuntimeModule","StartupChunkDependenciesPlugin","constructor","options","chunkLoading","asyncChunkLoading","apply","compiler","hooks","thisCompilation","tap","compilation","globalChunkLoading","outputOptions","isEnabledForChunk","chunk","getEntryOptions","undefined","additionalTreeRuntimeRequirements","set","chunkGraph","hasChunkEntryDependentChunks","add","startup","ensureChunk","ensureChunkIncludeEntries","addRuntimeModule","runtimeRequirementInTree","for","startupEntrypoint","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,qCAAqC,GAAGD,OAAO,CAAC,yCAAD,CAArD;;AACA,MAAME,8BAA8B,GAAGF,OAAO,CAAC,kCAAD,CAA9C;AAEA;;;AAEA,MAAMG,8BAAN,CAAqC;AACpCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,SAAKC,YAAL,GAAoBD,OAAO,CAACC,YAA5B;AACA,SAAKC,iBAAL,GACC,OAAOF,OAAO,CAACE,iBAAf,KAAqC,SAArC,GACGF,OAAO,CAACE,iBADX,GAEG,IAHJ;AAIA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,gCADD,EAECC,WAAW,IAAI;AACd,YAAMC,kBAAkB,GAAGD,WAAW,CAACE,aAAZ,CAA0BT,YAArD;;AACA,YAAMU,iBAAiB,GAAGC,KAAK,IAAI;AAClC,cAAMZ,OAAO,GAAGY,KAAK,CAACC,eAAN,EAAhB;AACA,cAAMZ,YAAY,GACjBD,OAAO,IAAIA,OAAO,CAACC,YAAR,KAAyBa,SAApC,GACGd,OAAO,CAACC,YADX,GAEGQ,kBAHJ;AAIA,eAAOR,YAAY,KAAK,KAAKA,YAA7B;AACA,OAPD;;AAQAO,MAAAA,WAAW,CAACH,KAAZ,CAAkBU,iCAAlB,CAAoDR,GAApD,CACC,gCADD,EAEC,CAACK,KAAD,EAAQI,GAAR,WAAgC;AAAA,YAAnB;AAAEC,UAAAA;AAAF,SAAmB;AAC/B,YAAI,CAACN,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;;AAC/B,YAAIK,UAAU,CAACC,4BAAX,CAAwCN,KAAxC,CAAJ,EAAoD;AACnDI,UAAAA,GAAG,CAACG,GAAJ,CAAQzB,cAAc,CAAC0B,OAAvB;AACAJ,UAAAA,GAAG,CAACG,GAAJ,CAAQzB,cAAc,CAAC2B,WAAvB;AACAL,UAAAA,GAAG,CAACG,GAAJ,CAAQzB,cAAc,CAAC4B,yBAAvB;AACAd,UAAAA,WAAW,CAACe,gBAAZ,CACCX,KADD,EAEC,IAAIhB,qCAAJ,CACC,KAAKM,iBADN,CAFD;AAMA;AACD,OAfF;AAiBAM,MAAAA,WAAW,CAACH,KAAZ,CAAkBmB,wBAAlB,CACEC,GADF,CACM/B,cAAc,CAACgC,iBADrB,EAEEnB,GAFF,CAEM,gCAFN,EAEwC,CAACK,KAAD,EAAQI,GAAR,KAAgB;AACtD,YAAI,CAACL,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;AAC/BI,QAAAA,GAAG,CAACG,GAAJ,CAAQzB,cAAc,CAACC,OAAvB;AACAqB,QAAAA,GAAG,CAACG,GAAJ,CAAQzB,cAAc,CAAC2B,WAAvB;AACAL,QAAAA,GAAG,CAACG,GAAJ,CAAQzB,cAAc,CAAC4B,yBAAvB;AACAd,QAAAA,WAAW,CAACe,gBAAZ,CACCX,KADD,EAEC,IAAIf,8BAAJ,CAAmC,KAAKK,iBAAxC,CAFD;AAIA,OAXF;AAYA,KAzCF;AA2CA;;AA1DmC;;AA6DrCyB,MAAM,CAACC,OAAP,GAAiB9B,8BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesRuntimeModule = require(\"./StartupChunkDependenciesRuntimeModule\");\nconst StartupEntrypointRuntimeModule = require(\"./StartupEntrypointRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass StartupChunkDependenciesPlugin {\n\tconstructor(options) {\n\t\tthis.chunkLoading = options.chunkLoading;\n\t\tthis.asyncChunkLoading =\n\t\t\ttypeof options.asyncChunkLoading === \"boolean\"\n\t\t\t\t? options.asyncChunkLoading\n\t\t\t\t: true;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"StartupChunkDependenciesPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst chunkLoading =\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\n\t\t\t\t\t\t\t? options.chunkLoading\n\t\t\t\t\t\t\t: globalChunkLoading;\n\t\t\t\t\treturn chunkLoading === this.chunkLoading;\n\t\t\t\t};\n\t\t\t\tcompilation.hooks.additionalTreeRuntimeRequirements.tap(\n\t\t\t\t\t\"StartupChunkDependenciesPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tif (chunkGraph.hasChunkEntryDependentChunks(chunk)) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.startup);\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.ensureChunk);\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.ensureChunkIncludeEntries);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew StartupChunkDependenciesRuntimeModule(\n\t\t\t\t\t\t\t\t\tthis.asyncChunkLoading\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.startupEntrypoint)\n\t\t\t\t\t.tap(\"StartupChunkDependenciesPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tset.add(RuntimeGlobals.require);\n\t\t\t\t\t\tset.add(RuntimeGlobals.ensureChunk);\n\t\t\t\t\t\tset.add(RuntimeGlobals.ensureChunkIncludeEntries);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew StartupEntrypointRuntimeModule(this.asyncChunkLoading)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = StartupChunkDependenciesPlugin;\n"]},"metadata":{},"sourceType":"script"}