{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst EnableLibraryPlugin = require(\"./library/EnableLibraryPlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").AuxiliaryComment} AuxiliaryComment */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryExport} LibraryExport */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryName} LibraryName */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryType} LibraryType */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").UmdNamedDefine} UmdNamedDefine */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n// TODO webpack 6 remove\n\n\nclass LibraryTemplatePlugin {\n  /**\n   * @param {LibraryName} name name of library\n   * @param {LibraryType} target type of library\n   * @param {UmdNamedDefine} umdNamedDefine setting this to true will name the UMD module\n   * @param {AuxiliaryComment} auxiliaryComment comment in the UMD wrapper\n   * @param {LibraryExport} exportProperty which export should be exposed as library\n   */\n  constructor(name, target, umdNamedDefine, auxiliaryComment, exportProperty) {\n    this.library = {\n      type: target || \"var\",\n      name,\n      umdNamedDefine,\n      auxiliaryComment,\n      export: exportProperty\n    };\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const {\n      output\n    } = compiler.options;\n    output.library = this.library;\n    new EnableLibraryPlugin(this.library.type).apply(compiler);\n  }\n\n}\n\nmodule.exports = LibraryTemplatePlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/LibraryTemplatePlugin.js"],"names":["EnableLibraryPlugin","require","LibraryTemplatePlugin","constructor","name","target","umdNamedDefine","auxiliaryComment","exportProperty","library","type","export","apply","compiler","output","options","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,+BAAD,CAAnC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;AAEA;;;AACA,MAAMC,qBAAN,CAA4B;AAC3B;AACD;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAeC,cAAf,EAA+BC,gBAA/B,EAAiDC,cAAjD,EAAiE;AAC3E,SAAKC,OAAL,GAAe;AACdC,MAAAA,IAAI,EAAEL,MAAM,IAAI,KADF;AAEdD,MAAAA,IAFc;AAGdE,MAAAA,cAHc;AAIdC,MAAAA,gBAJc;AAKdI,MAAAA,MAAM,EAAEH;AALM,KAAf;AAOA;AAED;AACD;AACA;AACA;AACA;;;AACCI,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAM;AAAEC,MAAAA;AAAF,QAAaD,QAAQ,CAACE,OAA5B;AACAD,IAAAA,MAAM,CAACL,OAAP,GAAiB,KAAKA,OAAtB;AACA,QAAIT,mBAAJ,CAAwB,KAAKS,OAAL,CAAaC,IAArC,EAA2CE,KAA3C,CAAiDC,QAAjD;AACA;;AA3B0B;;AA8B5BG,MAAM,CAACC,OAAP,GAAiBf,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst EnableLibraryPlugin = require(\"./library/EnableLibraryPlugin\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").AuxiliaryComment} AuxiliaryComment */\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryExport} LibraryExport */\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryName} LibraryName */\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../declarations/WebpackOptions\").UmdNamedDefine} UmdNamedDefine */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n// TODO webpack 6 remove\nclass LibraryTemplatePlugin {\n\t/**\n\t * @param {LibraryName} name name of library\n\t * @param {LibraryType} target type of library\n\t * @param {UmdNamedDefine} umdNamedDefine setting this to true will name the UMD module\n\t * @param {AuxiliaryComment} auxiliaryComment comment in the UMD wrapper\n\t * @param {LibraryExport} exportProperty which export should be exposed as library\n\t */\n\tconstructor(name, target, umdNamedDefine, auxiliaryComment, exportProperty) {\n\t\tthis.library = {\n\t\t\ttype: target || \"var\",\n\t\t\tname,\n\t\t\tumdNamedDefine,\n\t\t\tauxiliaryComment,\n\t\t\texport: exportProperty\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { output } = compiler.options;\n\t\toutput.library = this.library;\n\t\tnew EnableLibraryPlugin(this.library.type).apply(compiler);\n\t}\n}\n\nmodule.exports = LibraryTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}