{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\n\nconst Parser = require(\"../Parser\");\n\nconst JsonExportsDependency = require(\"../dependencies/JsonExportsDependency\");\n\nconst JsonData = require(\"./JsonData\");\n/** @typedef {import(\"../../declarations/plugins/JsonModulesPluginParser\").JsonModulesPluginParserOptions} JsonModulesPluginParserOptions */\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\n\nclass JsonParser extends Parser {\n  /**\n   * @param {JsonModulesPluginParserOptions} options parser options\n   */\n  constructor(options) {\n    super();\n    this.options = options || {};\n  }\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n\n\n  parse(source, state) {\n    if (Buffer.isBuffer(source)) {\n      source = source.toString(\"utf-8\");\n    }\n    /** @type {JsonModulesPluginParserOptions[\"parse\"]} */\n\n\n    const parseFn = typeof this.options.parse === \"function\" ? this.options.parse : parseJson;\n    const data = typeof source === \"object\" ? source : parseFn(source[0] === \"\\ufeff\" ? source.slice(1) : source);\n    state.module.buildInfo.jsonData = new JsonData(data);\n    state.module.buildInfo.strict = true;\n    state.module.buildMeta.exportsType = \"default\";\n    state.module.buildMeta.defaultObject = typeof data === \"object\" ? \"redirect-warn\" : false;\n    state.module.addDependency(new JsonExportsDependency(JsonExportsDependency.getExportsFromData(data)));\n    return state;\n  }\n\n}\n\nmodule.exports = JsonParser;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/json/JsonParser.js"],"names":["parseJson","require","Parser","JsonExportsDependency","JsonData","JsonParser","constructor","options","parse","source","state","Buffer","isBuffer","toString","parseFn","data","slice","module","buildInfo","jsonData","strict","buildMeta","exportsType","defaultObject","addDependency","getExportsFromData","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,0BAAD,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,qBAAqB,GAAGF,OAAO,CAAC,uCAAD,CAArC;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;AAEA;;AACA;;AACA;;;AAEA,MAAMI,UAAN,SAAyBH,MAAzB,CAAgC;AAC/B;AACD;AACA;AACCI,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB;AACA,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgB;AACpB,QAAIC,MAAM,CAACC,QAAP,CAAgBH,MAAhB,CAAJ,EAA6B;AAC5BA,MAAAA,MAAM,GAAGA,MAAM,CAACI,QAAP,CAAgB,OAAhB,CAAT;AACA;AAED;;;AACA,UAAMC,OAAO,GACZ,OAAO,KAAKP,OAAL,CAAaC,KAApB,KAA8B,UAA9B,GAA2C,KAAKD,OAAL,CAAaC,KAAxD,GAAgER,SADjE;AAGA,UAAMe,IAAI,GACT,OAAON,MAAP,KAAkB,QAAlB,GACGA,MADH,GAEGK,OAAO,CAACL,MAAM,CAAC,CAAD,CAAN,KAAc,QAAd,GAAyBA,MAAM,CAACO,KAAP,CAAa,CAAb,CAAzB,GAA2CP,MAA5C,CAHX;AAKAC,IAAAA,KAAK,CAACO,MAAN,CAAaC,SAAb,CAAuBC,QAAvB,GAAkC,IAAIf,QAAJ,CAAaW,IAAb,CAAlC;AACAL,IAAAA,KAAK,CAACO,MAAN,CAAaC,SAAb,CAAuBE,MAAvB,GAAgC,IAAhC;AACAV,IAAAA,KAAK,CAACO,MAAN,CAAaI,SAAb,CAAuBC,WAAvB,GAAqC,SAArC;AACAZ,IAAAA,KAAK,CAACO,MAAN,CAAaI,SAAb,CAAuBE,aAAvB,GACC,OAAOR,IAAP,KAAgB,QAAhB,GAA2B,eAA3B,GAA6C,KAD9C;AAEAL,IAAAA,KAAK,CAACO,MAAN,CAAaO,aAAb,CACC,IAAIrB,qBAAJ,CAA0BA,qBAAqB,CAACsB,kBAAtB,CAAyCV,IAAzC,CAA1B,CADD;AAGA,WAAOL,KAAP;AACA;;AArC8B;;AAwChCO,MAAM,CAACS,OAAP,GAAiBrB,UAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst Parser = require(\"../Parser\");\nconst JsonExportsDependency = require(\"../dependencies/JsonExportsDependency\");\nconst JsonData = require(\"./JsonData\");\n\n/** @typedef {import(\"../../declarations/plugins/JsonModulesPluginParser\").JsonModulesPluginParserOptions} JsonModulesPluginParserOptions */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nclass JsonParser extends Parser {\n\t/**\n\t * @param {JsonModulesPluginParserOptions} options parser options\n\t */\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tif (Buffer.isBuffer(source)) {\n\t\t\tsource = source.toString(\"utf-8\");\n\t\t}\n\n\t\t/** @type {JsonModulesPluginParserOptions[\"parse\"]} */\n\t\tconst parseFn =\n\t\t\ttypeof this.options.parse === \"function\" ? this.options.parse : parseJson;\n\n\t\tconst data =\n\t\t\ttypeof source === \"object\"\n\t\t\t\t? source\n\t\t\t\t: parseFn(source[0] === \"\\ufeff\" ? source.slice(1) : source);\n\n\t\tstate.module.buildInfo.jsonData = new JsonData(data);\n\t\tstate.module.buildInfo.strict = true;\n\t\tstate.module.buildMeta.exportsType = \"default\";\n\t\tstate.module.buildMeta.defaultObject =\n\t\t\ttypeof data === \"object\" ? \"redirect-warn\" : false;\n\t\tstate.module.addDependency(\n\t\t\tnew JsonExportsDependency(JsonExportsDependency.getExportsFromData(data))\n\t\t);\n\t\treturn state;\n\t}\n}\n\nmodule.exports = JsonParser;\n"]},"metadata":{},"sourceType":"script"}