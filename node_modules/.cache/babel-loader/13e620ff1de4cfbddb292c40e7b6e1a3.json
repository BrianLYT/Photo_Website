{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass FetchCompileAsyncWasmPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"FetchCompileAsyncWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === \"fetch\";\n      };\n\n      const generateLoadBinaryCode = path => `fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.instantiateWasm).tap(\"FetchCompileAsyncWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === \"webassembly/async\")) {\n          return;\n        }\n\n        set.add(RuntimeGlobals.publicPath);\n        compilation.addRuntimeModule(chunk, new AsyncWasmLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: true\n        }));\n      });\n    });\n  }\n\n}\n\nmodule.exports = FetchCompileAsyncWasmPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/web/FetchCompileAsyncWasmPlugin.js"],"names":["RuntimeGlobals","require","AsyncWasmLoadingRuntimeModule","FetchCompileAsyncWasmPlugin","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","options","getEntryOptions","undefined","generateLoadBinaryCode","path","publicPath","runtimeRequirementInTree","for","instantiateWasm","set","chunkGraph","hasModuleInGraph","m","type","add","addRuntimeModule","supportsStreaming","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,6BAA6B,GAAGD,OAAO,CAAC,6CAAD,CAA7C;AAEA;;;AAEA,MAAME,2BAAN,CAAkC;AACjC;AACD;AACA;AACA;AACA;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,6BADD,EAECC,WAAW,IAAI;AACd,YAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAZ,CAA0BC,WAApD;;AACA,YAAMC,iBAAiB,GAAGC,KAAK,IAAI;AAClC,cAAMC,OAAO,GAAGD,KAAK,CAACE,eAAN,EAAhB;AACA,cAAMJ,WAAW,GAChBG,OAAO,IAAIA,OAAO,CAACH,WAAR,KAAwBK,SAAnC,GACGF,OAAO,CAACH,WADX,GAEGF,iBAHJ;AAIA,eAAOE,WAAW,KAAK,OAAvB;AACA,OAPD;;AAQA,YAAMM,sBAAsB,GAAGC,IAAI,IACjC,SAAQnB,cAAc,CAACoB,UAAW,MAAKD,IAAK,GAD9C;;AAGAV,MAAAA,WAAW,CAACH,KAAZ,CAAkBe,wBAAlB,CACEC,GADF,CACMtB,cAAc,CAACuB,eADrB,EAEEf,GAFF,CAEM,6BAFN,EAEqC,CAACM,KAAD,EAAQU,GAAR,KAAgB;AACnD,YAAI,CAACX,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;AAC/B,cAAMW,UAAU,GAAGhB,WAAW,CAACgB,UAA/B;;AACA,YACC,CAACA,UAAU,CAACC,gBAAX,CACAZ,KADA,EAEAa,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,mBAFhB,CADF,EAKE;AACD;AACA;;AACDJ,QAAAA,GAAG,CAACK,GAAJ,CAAQ7B,cAAc,CAACoB,UAAvB;AACAX,QAAAA,WAAW,CAACqB,gBAAZ,CACChB,KADD,EAEC,IAAIZ,6BAAJ,CAAkC;AACjCgB,UAAAA,sBADiC;AAEjCa,UAAAA,iBAAiB,EAAE;AAFc,SAAlC,CAFD;AAOA,OArBF;AAsBA,KArCF;AAuCA;;AA9CgC;;AAiDlCC,MAAM,CAACC,OAAP,GAAiB9B,2BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass FetchCompileAsyncWasmPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"FetchCompileAsyncWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === \"fetch\";\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\t`fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.instantiateWasm)\n\t\t\t\t\t.tap(\"FetchCompileAsyncWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/async\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew AsyncWasmLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: true\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FetchCompileAsyncWasmPlugin;\n"]},"metadata":{},"sourceType":"script"}