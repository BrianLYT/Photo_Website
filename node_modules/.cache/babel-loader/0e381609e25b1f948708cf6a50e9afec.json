{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\nclass FlagIncludedChunksPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", compilation => {\n      compilation.hooks.optimizeChunkIds.tap(\"FlagIncludedChunksPlugin\", chunks => {\n        const chunkGraph = compilation.chunkGraph; // prepare two bit integers for each module\n        // 2^31 is the max number represented as SMI in v8\n        // we want the bits distributed this way:\n        // the bit 2^31 is pretty rar and only one module should get it\n        // so it has a probability of 1 / modulesCount\n        // the first bit (2^0) is the easiest and every module could get it\n        // if it doesn't get a better bit\n        // from bit 2^n to 2^(n+1) there is a probability of p\n        // so 1 / modulesCount == p^31\n        // <=> p = sqrt31(1 / modulesCount)\n        // so we use a modulo of 1 / sqrt31(1 / modulesCount)\n\n        /** @type {WeakMap<Module, number>} */\n\n        const moduleBits = new WeakMap();\n        const modulesCount = compilation.modules.size; // precalculate the modulo values for each bit\n\n        const modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n        const modulos = Array.from({\n          length: 31\n        }, (x, i) => Math.pow(modulo, i) | 0); // iterate all modules to generate bit values\n\n        let i = 0;\n\n        for (const module of compilation.modules) {\n          let bit = 30;\n\n          while (i % modulos[bit] !== 0) {\n            bit--;\n          }\n\n          moduleBits.set(module, 1 << bit);\n          i++;\n        } // iterate all chunks to generate bitmaps\n\n        /** @type {WeakMap<Chunk, number>} */\n\n\n        const chunkModulesHash = new WeakMap();\n\n        for (const chunk of chunks) {\n          let hash = 0;\n\n          for (const module of chunkGraph.getChunkModulesIterable(chunk)) {\n            hash |= moduleBits.get(module);\n          }\n\n          chunkModulesHash.set(chunk, hash);\n        }\n\n        for (const chunkA of chunks) {\n          const chunkAHash = chunkModulesHash.get(chunkA);\n          const chunkAModulesCount = chunkGraph.getNumberOfChunkModules(chunkA);\n          if (chunkAModulesCount === 0) continue;\n          let bestModule = undefined;\n\n          for (const module of chunkGraph.getChunkModulesIterable(chunkA)) {\n            if (bestModule === undefined || chunkGraph.getNumberOfModuleChunks(bestModule) > chunkGraph.getNumberOfModuleChunks(module)) bestModule = module;\n          }\n\n          loopB: for (const chunkB of chunkGraph.getModuleChunksIterable(bestModule)) {\n            // as we iterate the same iterables twice\n            // skip if we find ourselves\n            if (chunkA === chunkB) continue;\n            const chunkBModulesCount = chunkGraph.getNumberOfChunkModules(chunkB); // ids for empty chunks are not included\n\n            if (chunkBModulesCount === 0) continue; // instead of swapping A and B just bail\n            // as we loop twice the current A will be B and B then A\n\n            if (chunkAModulesCount > chunkBModulesCount) continue; // is chunkA in chunkB?\n            // we do a cheap check for the hash value\n\n            const chunkBHash = chunkModulesHash.get(chunkB);\n            if ((chunkBHash & chunkAHash) !== chunkAHash) continue; // compare all modules\n\n            for (const m of chunkGraph.getChunkModulesIterable(chunkA)) {\n              if (!chunkGraph.isModuleInChunk(m, chunkB)) continue loopB;\n            }\n\n            chunkB.ids.push(chunkA.id);\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = FlagIncludedChunksPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/optimize/FlagIncludedChunksPlugin.js"],"names":["FlagIncludedChunksPlugin","apply","compiler","hooks","compilation","tap","optimizeChunkIds","chunks","chunkGraph","moduleBits","WeakMap","modulesCount","modules","size","modulo","Math","pow","modulos","Array","from","length","x","i","module","bit","set","chunkModulesHash","chunk","hash","getChunkModulesIterable","get","chunkA","chunkAHash","chunkAModulesCount","getNumberOfChunkModules","bestModule","undefined","getNumberOfModuleChunks","loopB","chunkB","getModuleChunksIterable","chunkBModulesCount","chunkBHash","m","isModuleInChunk","ids","push","id","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass FlagIncludedChunksPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunkIds.tap(\n\t\t\t\t\"FlagIncludedChunksPlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\n\t\t\t\t\t// prepare two bit integers for each module\n\t\t\t\t\t// 2^31 is the max number represented as SMI in v8\n\t\t\t\t\t// we want the bits distributed this way:\n\t\t\t\t\t// the bit 2^31 is pretty rar and only one module should get it\n\t\t\t\t\t// so it has a probability of 1 / modulesCount\n\t\t\t\t\t// the first bit (2^0) is the easiest and every module could get it\n\t\t\t\t\t// if it doesn't get a better bit\n\t\t\t\t\t// from bit 2^n to 2^(n+1) there is a probability of p\n\t\t\t\t\t// so 1 / modulesCount == p^31\n\t\t\t\t\t// <=> p = sqrt31(1 / modulesCount)\n\t\t\t\t\t// so we use a modulo of 1 / sqrt31(1 / modulesCount)\n\t\t\t\t\t/** @type {WeakMap<Module, number>} */\n\t\t\t\t\tconst moduleBits = new WeakMap();\n\t\t\t\t\tconst modulesCount = compilation.modules.size;\n\n\t\t\t\t\t// precalculate the modulo values for each bit\n\t\t\t\t\tconst modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n\t\t\t\t\tconst modulos = Array.from(\n\t\t\t\t\t\t{ length: 31 },\n\t\t\t\t\t\t(x, i) => Math.pow(modulo, i) | 0\n\t\t\t\t\t);\n\n\t\t\t\t\t// iterate all modules to generate bit values\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const module of compilation.modules) {\n\t\t\t\t\t\tlet bit = 30;\n\t\t\t\t\t\twhile (i % modulos[bit] !== 0) {\n\t\t\t\t\t\t\tbit--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmoduleBits.set(module, 1 << bit);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\n\t\t\t\t\t// iterate all chunks to generate bitmaps\n\t\t\t\t\t/** @type {WeakMap<Chunk, number>} */\n\t\t\t\t\tconst chunkModulesHash = new WeakMap();\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tlet hash = 0;\n\t\t\t\t\t\tfor (const module of chunkGraph.getChunkModulesIterable(chunk)) {\n\t\t\t\t\t\t\thash |= moduleBits.get(module);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchunkModulesHash.set(chunk, hash);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const chunkA of chunks) {\n\t\t\t\t\t\tconst chunkAHash = chunkModulesHash.get(chunkA);\n\t\t\t\t\t\tconst chunkAModulesCount =\n\t\t\t\t\t\t\tchunkGraph.getNumberOfChunkModules(chunkA);\n\t\t\t\t\t\tif (chunkAModulesCount === 0) continue;\n\t\t\t\t\t\tlet bestModule = undefined;\n\t\t\t\t\t\tfor (const module of chunkGraph.getChunkModulesIterable(chunkA)) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tbestModule === undefined ||\n\t\t\t\t\t\t\t\tchunkGraph.getNumberOfModuleChunks(bestModule) >\n\t\t\t\t\t\t\t\t\tchunkGraph.getNumberOfModuleChunks(module)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tbestModule = module;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloopB: for (const chunkB of chunkGraph.getModuleChunksIterable(\n\t\t\t\t\t\t\tbestModule\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t// as we iterate the same iterables twice\n\t\t\t\t\t\t\t// skip if we find ourselves\n\t\t\t\t\t\t\tif (chunkA === chunkB) continue;\n\n\t\t\t\t\t\t\tconst chunkBModulesCount =\n\t\t\t\t\t\t\t\tchunkGraph.getNumberOfChunkModules(chunkB);\n\n\t\t\t\t\t\t\t// ids for empty chunks are not included\n\t\t\t\t\t\t\tif (chunkBModulesCount === 0) continue;\n\n\t\t\t\t\t\t\t// instead of swapping A and B just bail\n\t\t\t\t\t\t\t// as we loop twice the current A will be B and B then A\n\t\t\t\t\t\t\tif (chunkAModulesCount > chunkBModulesCount) continue;\n\n\t\t\t\t\t\t\t// is chunkA in chunkB?\n\n\t\t\t\t\t\t\t// we do a cheap check for the hash value\n\t\t\t\t\t\t\tconst chunkBHash = chunkModulesHash.get(chunkB);\n\t\t\t\t\t\t\tif ((chunkBHash & chunkAHash) !== chunkAHash) continue;\n\n\t\t\t\t\t\t\t// compare all modules\n\t\t\t\t\t\t\tfor (const m of chunkGraph.getChunkModulesIterable(chunkA)) {\n\t\t\t\t\t\t\t\tif (!chunkGraph.isModuleInChunk(m, chunkB)) continue loopB;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchunkB.ids.push(chunkA.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = FlagIncludedChunksPlugin;\n"]},"metadata":{},"sourceType":"script"}