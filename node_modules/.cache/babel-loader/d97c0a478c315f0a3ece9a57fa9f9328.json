{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class FileExistsPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const fs = resolver.fileSystem;\n    resolver.getHook(this.source).tapAsync(\"FileExistsPlugin\", (request, resolveContext, callback) => {\n      const file = request.path;\n      if (!file) return callback();\n      fs.stat(file, (err, stat) => {\n        if (err || !stat) {\n          if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(file);\n          if (resolveContext.log) resolveContext.log(file + \" doesn't exist\");\n          return callback();\n        }\n\n        if (!stat.isFile()) {\n          if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(file);\n          if (resolveContext.log) resolveContext.log(file + \" is not a file\");\n          return callback();\n        }\n\n        if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(file);\n        resolver.doResolve(target, request, \"existing file: \" + file, resolveContext, callback);\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/enhanced-resolve/lib/FileExistsPlugin.js"],"names":["module","exports","FileExistsPlugin","constructor","source","target","apply","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","file","path","stat","err","missingDependencies","add","log","isFile","fileDependencies","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,gBAAN,CAAuB;AACvC;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACA,UAAMI,EAAE,GAAGF,QAAQ,CAACG,UAApB;AACAH,IAAAA,QAAQ,CACNI,OADF,CACU,KAAKP,MADf,EAEEQ,QAFF,CAEW,kBAFX,EAE+B,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACpE,YAAMC,IAAI,GAAGH,OAAO,CAACI,IAArB;AACA,UAAI,CAACD,IAAL,EAAW,OAAOD,QAAQ,EAAf;AACXN,MAAAA,EAAE,CAACS,IAAH,CAAQF,IAAR,EAAc,CAACG,GAAD,EAAMD,IAAN,KAAe;AAC5B,YAAIC,GAAG,IAAI,CAACD,IAAZ,EAAkB;AACjB,cAAIJ,cAAc,CAACM,mBAAnB,EACCN,cAAc,CAACM,mBAAf,CAAmCC,GAAnC,CAAuCL,IAAvC;AACD,cAAIF,cAAc,CAACQ,GAAnB,EAAwBR,cAAc,CAACQ,GAAf,CAAmBN,IAAI,GAAG,gBAA1B;AACxB,iBAAOD,QAAQ,EAAf;AACA;;AACD,YAAI,CAACG,IAAI,CAACK,MAAL,EAAL,EAAoB;AACnB,cAAIT,cAAc,CAACM,mBAAnB,EACCN,cAAc,CAACM,mBAAf,CAAmCC,GAAnC,CAAuCL,IAAvC;AACD,cAAIF,cAAc,CAACQ,GAAnB,EAAwBR,cAAc,CAACQ,GAAf,CAAmBN,IAAI,GAAG,gBAA1B;AACxB,iBAAOD,QAAQ,EAAf;AACA;;AACD,YAAID,cAAc,CAACU,gBAAnB,EACCV,cAAc,CAACU,gBAAf,CAAgCH,GAAhC,CAAoCL,IAApC;AACDT,QAAAA,QAAQ,CAACkB,SAAT,CACCpB,MADD,EAECQ,OAFD,EAGC,oBAAoBG,IAHrB,EAICF,cAJD,EAKCC,QALD;AAOA,OAtBD;AAuBA,KA5BF;AA6BA;;AA9CsC,CAAxC","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class FileExistsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"FileExistsPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst file = request.path;\n\t\t\t\tif (!file) return callback();\n\t\t\t\tfs.stat(file, (err, stat) => {\n\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\tresolveContext.missingDependencies.add(file);\n\t\t\t\t\t\tif (resolveContext.log) resolveContext.log(file + \" doesn't exist\");\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tif (!stat.isFile()) {\n\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\tresolveContext.missingDependencies.add(file);\n\t\t\t\t\t\tif (resolveContext.log) resolveContext.log(file + \" is not a file\");\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\tresolveContext.fileDependencies.add(file);\n\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\"existing file: \" + file,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}