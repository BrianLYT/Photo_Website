{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createMappingsSerializer = require(\"./createMappingsSerializer\");\n\nexports.getSourceAndMap = (inputSource, options) => {\n  let code = \"\";\n  let mappings = \"\";\n  let sources = [];\n  let sourcesContent = [];\n  let names = [];\n  const addMapping = createMappingsSerializer(options);\n  const {\n    source\n  } = inputSource.streamChunks(Object.assign({}, options, {\n    finalSource: true\n  }), (chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) => {\n    if (chunk !== undefined) code += chunk;\n    mappings += addMapping(generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex);\n  }, (sourceIndex, source, sourceContent) => {\n    while (sources.length < sourceIndex) {\n      sources.push(null);\n    }\n\n    sources[sourceIndex] = source;\n\n    if (sourceContent !== undefined) {\n      while (sourcesContent.length < sourceIndex) {\n        sourcesContent.push(null);\n      }\n\n      sourcesContent[sourceIndex] = sourceContent;\n    }\n  }, (nameIndex, name) => {\n    while (names.length < nameIndex) {\n      names.push(null);\n    }\n\n    names[nameIndex] = name;\n  });\n  return {\n    source: source !== undefined ? source : code,\n    map: mappings.length > 0 ? {\n      version: 3,\n      file: \"x\",\n      mappings,\n      sources,\n      sourcesContent: sourcesContent.length > 0 ? sourcesContent : undefined,\n      names\n    } : null\n  };\n};\n\nexports.getMap = (source, options) => {\n  let mappings = \"\";\n  let sources = [];\n  let sourcesContent = [];\n  let names = [];\n  const addMapping = createMappingsSerializer(options);\n  source.streamChunks(Object.assign({}, options, {\n    source: false,\n    finalSource: true\n  }), (chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) => {\n    mappings += addMapping(generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex);\n  }, (sourceIndex, source, sourceContent) => {\n    while (sources.length < sourceIndex) {\n      sources.push(null);\n    }\n\n    sources[sourceIndex] = source;\n\n    if (sourceContent !== undefined) {\n      while (sourcesContent.length < sourceIndex) {\n        sourcesContent.push(null);\n      }\n\n      sourcesContent[sourceIndex] = sourceContent;\n    }\n  }, (nameIndex, name) => {\n    while (names.length < nameIndex) {\n      names.push(null);\n    }\n\n    names[nameIndex] = name;\n  });\n  return mappings.length > 0 ? {\n    version: 3,\n    file: \"x\",\n    mappings,\n    sources,\n    sourcesContent: sourcesContent.length > 0 ? sourcesContent : undefined,\n    names\n  } : null;\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack-sources/lib/helpers/getFromStreamChunks.js"],"names":["createMappingsSerializer","require","exports","getSourceAndMap","inputSource","options","code","mappings","sources","sourcesContent","names","addMapping","source","streamChunks","Object","assign","finalSource","chunk","generatedLine","generatedColumn","sourceIndex","originalLine","originalColumn","nameIndex","undefined","sourceContent","length","push","name","map","version","file","getMap"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst createMappingsSerializer = require(\"./createMappingsSerializer\");\n\nexports.getSourceAndMap = (inputSource, options) => {\n\tlet code = \"\";\n\tlet mappings = \"\";\n\tlet sources = [];\n\tlet sourcesContent = [];\n\tlet names = [];\n\tconst addMapping = createMappingsSerializer(options);\n\tconst { source } = inputSource.streamChunks(\n\t\tObject.assign({}, options, { finalSource: true }),\n\t\t(\n\t\t\tchunk,\n\t\t\tgeneratedLine,\n\t\t\tgeneratedColumn,\n\t\t\tsourceIndex,\n\t\t\toriginalLine,\n\t\t\toriginalColumn,\n\t\t\tnameIndex\n\t\t) => {\n\t\t\tif (chunk !== undefined) code += chunk;\n\t\t\tmappings += addMapping(\n\t\t\t\tgeneratedLine,\n\t\t\t\tgeneratedColumn,\n\t\t\t\tsourceIndex,\n\t\t\t\toriginalLine,\n\t\t\t\toriginalColumn,\n\t\t\t\tnameIndex\n\t\t\t);\n\t\t},\n\t\t(sourceIndex, source, sourceContent) => {\n\t\t\twhile (sources.length < sourceIndex) {\n\t\t\t\tsources.push(null);\n\t\t\t}\n\t\t\tsources[sourceIndex] = source;\n\t\t\tif (sourceContent !== undefined) {\n\t\t\t\twhile (sourcesContent.length < sourceIndex) {\n\t\t\t\t\tsourcesContent.push(null);\n\t\t\t\t}\n\t\t\t\tsourcesContent[sourceIndex] = sourceContent;\n\t\t\t}\n\t\t},\n\t\t(nameIndex, name) => {\n\t\t\twhile (names.length < nameIndex) {\n\t\t\t\tnames.push(null);\n\t\t\t}\n\t\t\tnames[nameIndex] = name;\n\t\t}\n\t);\n\treturn {\n\t\tsource: source !== undefined ? source : code,\n\t\tmap:\n\t\t\tmappings.length > 0\n\t\t\t\t? {\n\t\t\t\t\t\tversion: 3,\n\t\t\t\t\t\tfile: \"x\",\n\t\t\t\t\t\tmappings,\n\t\t\t\t\t\tsources,\n\t\t\t\t\t\tsourcesContent:\n\t\t\t\t\t\t\tsourcesContent.length > 0 ? sourcesContent : undefined,\n\t\t\t\t\t\tnames\n\t\t\t\t  }\n\t\t\t\t: null\n\t};\n};\n\nexports.getMap = (source, options) => {\n\tlet mappings = \"\";\n\tlet sources = [];\n\tlet sourcesContent = [];\n\tlet names = [];\n\tconst addMapping = createMappingsSerializer(options);\n\tsource.streamChunks(\n\t\tObject.assign({}, options, { source: false, finalSource: true }),\n\t\t(\n\t\t\tchunk,\n\t\t\tgeneratedLine,\n\t\t\tgeneratedColumn,\n\t\t\tsourceIndex,\n\t\t\toriginalLine,\n\t\t\toriginalColumn,\n\t\t\tnameIndex\n\t\t) => {\n\t\t\tmappings += addMapping(\n\t\t\t\tgeneratedLine,\n\t\t\t\tgeneratedColumn,\n\t\t\t\tsourceIndex,\n\t\t\t\toriginalLine,\n\t\t\t\toriginalColumn,\n\t\t\t\tnameIndex\n\t\t\t);\n\t\t},\n\t\t(sourceIndex, source, sourceContent) => {\n\t\t\twhile (sources.length < sourceIndex) {\n\t\t\t\tsources.push(null);\n\t\t\t}\n\t\t\tsources[sourceIndex] = source;\n\t\t\tif (sourceContent !== undefined) {\n\t\t\t\twhile (sourcesContent.length < sourceIndex) {\n\t\t\t\t\tsourcesContent.push(null);\n\t\t\t\t}\n\t\t\t\tsourcesContent[sourceIndex] = sourceContent;\n\t\t\t}\n\t\t},\n\t\t(nameIndex, name) => {\n\t\t\twhile (names.length < nameIndex) {\n\t\t\t\tnames.push(null);\n\t\t\t}\n\t\t\tnames[nameIndex] = name;\n\t\t}\n\t);\n\treturn mappings.length > 0\n\t\t? {\n\t\t\t\tversion: 3,\n\t\t\t\tfile: \"x\",\n\t\t\t\tmappings,\n\t\t\t\tsources,\n\t\t\t\tsourcesContent: sourcesContent.length > 0 ? sourcesContent : undefined,\n\t\t\t\tnames\n\t\t  }\n\t\t: null;\n};\n"]},"metadata":{},"sourceType":"script"}