{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\n\nconst Watchpack = require(\"watchpack\");\n/** @typedef {import(\"../../declarations/WebpackOptions\").WatchOptions} WatchOptions */\n\n/** @typedef {import(\"../FileSystemInfo\").FileSystemInfoEntry} FileSystemInfoEntry */\n\n/** @typedef {import(\"../util/fs\").WatchFileSystem} WatchFileSystem */\n\n/** @typedef {import(\"../util/fs\").WatchMethod} WatchMethod */\n\n/** @typedef {import(\"../util/fs\").Watcher} Watcher */\n\n\nclass NodeWatchFileSystem {\n  constructor(inputFileSystem) {\n    this.inputFileSystem = inputFileSystem;\n    this.watcherOptions = {\n      aggregateTimeout: 0\n    };\n    this.watcher = new Watchpack(this.watcherOptions);\n  }\n  /**\n   * @param {Iterable<string>} files watched files\n   * @param {Iterable<string>} directories watched directories\n   * @param {Iterable<string>} missing watched exitance entries\n   * @param {number} startTime timestamp of start time\n   * @param {WatchOptions} options options object\n   * @param {function(Error=, Map<string, FileSystemInfoEntry>, Map<string, FileSystemInfoEntry>, Set<string>, Set<string>): void} callback aggregated callback\n   * @param {function(string, number): void} callbackUndelayed callback when the first change was detected\n   * @returns {Watcher} a watcher\n   */\n\n\n  watch(files, directories, missing, startTime, options, callback, callbackUndelayed) {\n    if (!files || typeof files[Symbol.iterator] !== \"function\") {\n      throw new Error(\"Invalid arguments: 'files'\");\n    }\n\n    if (!directories || typeof directories[Symbol.iterator] !== \"function\") {\n      throw new Error(\"Invalid arguments: 'directories'\");\n    }\n\n    if (!missing || typeof missing[Symbol.iterator] !== \"function\") {\n      throw new Error(\"Invalid arguments: 'missing'\");\n    }\n\n    if (typeof callback !== \"function\") {\n      throw new Error(\"Invalid arguments: 'callback'\");\n    }\n\n    if (typeof startTime !== \"number\" && startTime) {\n      throw new Error(\"Invalid arguments: 'startTime'\");\n    }\n\n    if (typeof options !== \"object\") {\n      throw new Error(\"Invalid arguments: 'options'\");\n    }\n\n    if (typeof callbackUndelayed !== \"function\" && callbackUndelayed) {\n      throw new Error(\"Invalid arguments: 'callbackUndelayed'\");\n    }\n\n    const oldWatcher = this.watcher;\n    this.watcher = new Watchpack(options);\n\n    if (callbackUndelayed) {\n      this.watcher.once(\"change\", callbackUndelayed);\n    }\n\n    const fetchTimeInfo = () => {\n      const fileTimeInfoEntries = new Map();\n      const contextTimeInfoEntries = new Map();\n\n      if (this.watcher) {\n        this.watcher.collectTimeInfoEntries(fileTimeInfoEntries, contextTimeInfoEntries);\n      }\n\n      return {\n        fileTimeInfoEntries,\n        contextTimeInfoEntries\n      };\n    };\n\n    this.watcher.once(\"aggregated\", (changes, removals) => {\n      // pause emitting events (avoids clearing aggregated changes and removals on timeout)\n      this.watcher.pause();\n\n      if (this.inputFileSystem && this.inputFileSystem.purge) {\n        const fs = this.inputFileSystem;\n\n        for (const item of changes) {\n          fs.purge(item);\n        }\n\n        for (const item of removals) {\n          fs.purge(item);\n        }\n      }\n\n      const {\n        fileTimeInfoEntries,\n        contextTimeInfoEntries\n      } = fetchTimeInfo();\n      callback(null, fileTimeInfoEntries, contextTimeInfoEntries, changes, removals);\n    });\n    this.watcher.watch({\n      files,\n      directories,\n      missing,\n      startTime\n    });\n\n    if (oldWatcher) {\n      oldWatcher.close();\n    }\n\n    return {\n      close: () => {\n        if (this.watcher) {\n          this.watcher.close();\n          this.watcher = null;\n        }\n      },\n      pause: () => {\n        if (this.watcher) {\n          this.watcher.pause();\n        }\n      },\n      getAggregatedRemovals: util.deprecate(() => {\n        const items = this.watcher && this.watcher.aggregatedRemovals;\n\n        if (items && this.inputFileSystem && this.inputFileSystem.purge) {\n          const fs = this.inputFileSystem;\n\n          for (const item of items) {\n            fs.purge(item);\n          }\n        }\n\n        return items;\n      }, \"Watcher.getAggregatedRemovals is deprecated in favor of Watcher.getInfo since that's more performant.\", \"DEP_WEBPACK_WATCHER_GET_AGGREGATED_REMOVALS\"),\n      getAggregatedChanges: util.deprecate(() => {\n        const items = this.watcher && this.watcher.aggregatedChanges;\n\n        if (items && this.inputFileSystem && this.inputFileSystem.purge) {\n          const fs = this.inputFileSystem;\n\n          for (const item of items) {\n            fs.purge(item);\n          }\n        }\n\n        return items;\n      }, \"Watcher.getAggregatedChanges is deprecated in favor of Watcher.getInfo since that's more performant.\", \"DEP_WEBPACK_WATCHER_GET_AGGREGATED_CHANGES\"),\n      getFileTimeInfoEntries: util.deprecate(() => {\n        return fetchTimeInfo().fileTimeInfoEntries;\n      }, \"Watcher.getFileTimeInfoEntries is deprecated in favor of Watcher.getInfo since that's more performant.\", \"DEP_WEBPACK_WATCHER_FILE_TIME_INFO_ENTRIES\"),\n      getContextTimeInfoEntries: util.deprecate(() => {\n        return fetchTimeInfo().contextTimeInfoEntries;\n      }, \"Watcher.getContextTimeInfoEntries is deprecated in favor of Watcher.getInfo since that's more performant.\", \"DEP_WEBPACK_WATCHER_CONTEXT_TIME_INFO_ENTRIES\"),\n      getInfo: () => {\n        const removals = this.watcher && this.watcher.aggregatedRemovals;\n        const changes = this.watcher && this.watcher.aggregatedChanges;\n\n        if (this.inputFileSystem && this.inputFileSystem.purge) {\n          const fs = this.inputFileSystem;\n\n          if (removals) {\n            for (const item of removals) {\n              fs.purge(item);\n            }\n          }\n\n          if (changes) {\n            for (const item of changes) {\n              fs.purge(item);\n            }\n          }\n        }\n\n        const {\n          fileTimeInfoEntries,\n          contextTimeInfoEntries\n        } = fetchTimeInfo();\n        return {\n          changes,\n          removals,\n          fileTimeInfoEntries,\n          contextTimeInfoEntries\n        };\n      }\n    };\n  }\n\n}\n\nmodule.exports = NodeWatchFileSystem;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/node/NodeWatchFileSystem.js"],"names":["util","require","Watchpack","NodeWatchFileSystem","constructor","inputFileSystem","watcherOptions","aggregateTimeout","watcher","watch","files","directories","missing","startTime","options","callback","callbackUndelayed","Symbol","iterator","Error","oldWatcher","once","fetchTimeInfo","fileTimeInfoEntries","Map","contextTimeInfoEntries","collectTimeInfoEntries","changes","removals","pause","purge","fs","item","close","getAggregatedRemovals","deprecate","items","aggregatedRemovals","getAggregatedChanges","aggregatedChanges","getFileTimeInfoEntries","getContextTimeInfoEntries","getInfo","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst Watchpack = require(\"watchpack\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").WatchOptions} WatchOptions */\n/** @typedef {import(\"../FileSystemInfo\").FileSystemInfoEntry} FileSystemInfoEntry */\n/** @typedef {import(\"../util/fs\").WatchFileSystem} WatchFileSystem */\n/** @typedef {import(\"../util/fs\").WatchMethod} WatchMethod */\n/** @typedef {import(\"../util/fs\").Watcher} Watcher */\n\nclass NodeWatchFileSystem {\n\tconstructor(inputFileSystem) {\n\t\tthis.inputFileSystem = inputFileSystem;\n\t\tthis.watcherOptions = {\n\t\t\taggregateTimeout: 0\n\t\t};\n\t\tthis.watcher = new Watchpack(this.watcherOptions);\n\t}\n\n\t/**\n\t * @param {Iterable<string>} files watched files\n\t * @param {Iterable<string>} directories watched directories\n\t * @param {Iterable<string>} missing watched exitance entries\n\t * @param {number} startTime timestamp of start time\n\t * @param {WatchOptions} options options object\n\t * @param {function(Error=, Map<string, FileSystemInfoEntry>, Map<string, FileSystemInfoEntry>, Set<string>, Set<string>): void} callback aggregated callback\n\t * @param {function(string, number): void} callbackUndelayed callback when the first change was detected\n\t * @returns {Watcher} a watcher\n\t */\n\twatch(\n\t\tfiles,\n\t\tdirectories,\n\t\tmissing,\n\t\tstartTime,\n\t\toptions,\n\t\tcallback,\n\t\tcallbackUndelayed\n\t) {\n\t\tif (!files || typeof files[Symbol.iterator] !== \"function\") {\n\t\t\tthrow new Error(\"Invalid arguments: 'files'\");\n\t\t}\n\t\tif (!directories || typeof directories[Symbol.iterator] !== \"function\") {\n\t\t\tthrow new Error(\"Invalid arguments: 'directories'\");\n\t\t}\n\t\tif (!missing || typeof missing[Symbol.iterator] !== \"function\") {\n\t\t\tthrow new Error(\"Invalid arguments: 'missing'\");\n\t\t}\n\t\tif (typeof callback !== \"function\") {\n\t\t\tthrow new Error(\"Invalid arguments: 'callback'\");\n\t\t}\n\t\tif (typeof startTime !== \"number\" && startTime) {\n\t\t\tthrow new Error(\"Invalid arguments: 'startTime'\");\n\t\t}\n\t\tif (typeof options !== \"object\") {\n\t\t\tthrow new Error(\"Invalid arguments: 'options'\");\n\t\t}\n\t\tif (typeof callbackUndelayed !== \"function\" && callbackUndelayed) {\n\t\t\tthrow new Error(\"Invalid arguments: 'callbackUndelayed'\");\n\t\t}\n\t\tconst oldWatcher = this.watcher;\n\t\tthis.watcher = new Watchpack(options);\n\n\t\tif (callbackUndelayed) {\n\t\t\tthis.watcher.once(\"change\", callbackUndelayed);\n\t\t}\n\n\t\tconst fetchTimeInfo = () => {\n\t\t\tconst fileTimeInfoEntries = new Map();\n\t\t\tconst contextTimeInfoEntries = new Map();\n\t\t\tif (this.watcher) {\n\t\t\t\tthis.watcher.collectTimeInfoEntries(\n\t\t\t\t\tfileTimeInfoEntries,\n\t\t\t\t\tcontextTimeInfoEntries\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn { fileTimeInfoEntries, contextTimeInfoEntries };\n\t\t};\n\t\tthis.watcher.once(\"aggregated\", (changes, removals) => {\n\t\t\t// pause emitting events (avoids clearing aggregated changes and removals on timeout)\n\t\t\tthis.watcher.pause();\n\n\t\t\tif (this.inputFileSystem && this.inputFileSystem.purge) {\n\t\t\t\tconst fs = this.inputFileSystem;\n\t\t\t\tfor (const item of changes) {\n\t\t\t\t\tfs.purge(item);\n\t\t\t\t}\n\t\t\t\tfor (const item of removals) {\n\t\t\t\t\tfs.purge(item);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst { fileTimeInfoEntries, contextTimeInfoEntries } = fetchTimeInfo();\n\t\t\tcallback(\n\t\t\t\tnull,\n\t\t\t\tfileTimeInfoEntries,\n\t\t\t\tcontextTimeInfoEntries,\n\t\t\t\tchanges,\n\t\t\t\tremovals\n\t\t\t);\n\t\t});\n\n\t\tthis.watcher.watch({ files, directories, missing, startTime });\n\n\t\tif (oldWatcher) {\n\t\t\toldWatcher.close();\n\t\t}\n\t\treturn {\n\t\t\tclose: () => {\n\t\t\t\tif (this.watcher) {\n\t\t\t\t\tthis.watcher.close();\n\t\t\t\t\tthis.watcher = null;\n\t\t\t\t}\n\t\t\t},\n\t\t\tpause: () => {\n\t\t\t\tif (this.watcher) {\n\t\t\t\t\tthis.watcher.pause();\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetAggregatedRemovals: util.deprecate(\n\t\t\t\t() => {\n\t\t\t\t\tconst items = this.watcher && this.watcher.aggregatedRemovals;\n\t\t\t\t\tif (items && this.inputFileSystem && this.inputFileSystem.purge) {\n\t\t\t\t\t\tconst fs = this.inputFileSystem;\n\t\t\t\t\t\tfor (const item of items) {\n\t\t\t\t\t\t\tfs.purge(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn items;\n\t\t\t\t},\n\t\t\t\t\"Watcher.getAggregatedRemovals is deprecated in favor of Watcher.getInfo since that's more performant.\",\n\t\t\t\t\"DEP_WEBPACK_WATCHER_GET_AGGREGATED_REMOVALS\"\n\t\t\t),\n\t\t\tgetAggregatedChanges: util.deprecate(\n\t\t\t\t() => {\n\t\t\t\t\tconst items = this.watcher && this.watcher.aggregatedChanges;\n\t\t\t\t\tif (items && this.inputFileSystem && this.inputFileSystem.purge) {\n\t\t\t\t\t\tconst fs = this.inputFileSystem;\n\t\t\t\t\t\tfor (const item of items) {\n\t\t\t\t\t\t\tfs.purge(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn items;\n\t\t\t\t},\n\t\t\t\t\"Watcher.getAggregatedChanges is deprecated in favor of Watcher.getInfo since that's more performant.\",\n\t\t\t\t\"DEP_WEBPACK_WATCHER_GET_AGGREGATED_CHANGES\"\n\t\t\t),\n\t\t\tgetFileTimeInfoEntries: util.deprecate(\n\t\t\t\t() => {\n\t\t\t\t\treturn fetchTimeInfo().fileTimeInfoEntries;\n\t\t\t\t},\n\t\t\t\t\"Watcher.getFileTimeInfoEntries is deprecated in favor of Watcher.getInfo since that's more performant.\",\n\t\t\t\t\"DEP_WEBPACK_WATCHER_FILE_TIME_INFO_ENTRIES\"\n\t\t\t),\n\t\t\tgetContextTimeInfoEntries: util.deprecate(\n\t\t\t\t() => {\n\t\t\t\t\treturn fetchTimeInfo().contextTimeInfoEntries;\n\t\t\t\t},\n\t\t\t\t\"Watcher.getContextTimeInfoEntries is deprecated in favor of Watcher.getInfo since that's more performant.\",\n\t\t\t\t\"DEP_WEBPACK_WATCHER_CONTEXT_TIME_INFO_ENTRIES\"\n\t\t\t),\n\t\t\tgetInfo: () => {\n\t\t\t\tconst removals = this.watcher && this.watcher.aggregatedRemovals;\n\t\t\t\tconst changes = this.watcher && this.watcher.aggregatedChanges;\n\t\t\t\tif (this.inputFileSystem && this.inputFileSystem.purge) {\n\t\t\t\t\tconst fs = this.inputFileSystem;\n\t\t\t\t\tif (removals) {\n\t\t\t\t\t\tfor (const item of removals) {\n\t\t\t\t\t\t\tfs.purge(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (changes) {\n\t\t\t\t\t\tfor (const item of changes) {\n\t\t\t\t\t\t\tfs.purge(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst { fileTimeInfoEntries, contextTimeInfoEntries } = fetchTimeInfo();\n\t\t\t\treturn {\n\t\t\t\t\tchanges,\n\t\t\t\t\tremovals,\n\t\t\t\t\tfileTimeInfoEntries,\n\t\t\t\t\tcontextTimeInfoEntries\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n}\n\nmodule.exports = NodeWatchFileSystem;\n"]},"metadata":{},"sourceType":"script"}