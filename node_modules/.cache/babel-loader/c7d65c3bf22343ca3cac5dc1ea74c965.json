{"ast":null,"code":"\"use strict\";\n\nconst Range = require(\"./Range\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  const hints = [];\n  let type = \"string\";\n  const currentSchema = { ...schema\n  };\n\n  if (!logic) {\n    const tmpLength = currentSchema.minLength;\n    const tmpFormat = currentSchema.formatMinimum;\n    const tmpExclusive = currentSchema.formatExclusiveMaximum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n    currentSchema.formatExclusiveMaximum = !currentSchema.formatExclusiveMinimum;\n    currentSchema.formatExclusiveMinimum = !tmpExclusive;\n  }\n\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      const length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(`should be longer than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      const length = currentSchema.maxLength + 1;\n      hints.push(`should be shorter than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(`should${logic ? \"\" : \" not\"} match pattern ${JSON.stringify(currentSchema.pattern)}`);\n  }\n\n  if (currentSchema.format) {\n    hints.push(`should${logic ? \"\" : \" not\"} match format ${JSON.stringify(currentSchema.format)}`);\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMinimum ? \">\" : \">=\"} ${JSON.stringify(currentSchema.formatMinimum)}`);\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\"} ${JSON.stringify(currentSchema.formatMaximum)}`);\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  const hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  const range = new Range();\n\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(`should${logic ? \"\" : \" not\"} be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/schema-utils/dist/util/hints.js"],"names":["Range","require","module","exports","stringHints","schema","logic","hints","type","currentSchema","tmpLength","minLength","tmpFormat","formatMinimum","tmpExclusive","formatExclusiveMaximum","maxLength","formatMaximum","formatExclusiveMinimum","length","Math","max","push","pattern","JSON","stringify","format","concat","numberHints","range","minimum","left","exclusiveMinimum","maximum","right","exclusiveMaximum","rangeFormat","multipleOf"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst Range = require(\"./Range\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  const hints = [];\n  let type = \"string\";\n  const currentSchema = { ...schema\n  };\n\n  if (!logic) {\n    const tmpLength = currentSchema.minLength;\n    const tmpFormat = currentSchema.formatMinimum;\n    const tmpExclusive = currentSchema.formatExclusiveMaximum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n    currentSchema.formatExclusiveMaximum = !currentSchema.formatExclusiveMinimum;\n    currentSchema.formatExclusiveMinimum = !tmpExclusive;\n  }\n\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      const length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(`should be longer than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      const length = currentSchema.maxLength + 1;\n      hints.push(`should be shorter than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(`should${logic ? \"\" : \" not\"} match pattern ${JSON.stringify(currentSchema.pattern)}`);\n  }\n\n  if (currentSchema.format) {\n    hints.push(`should${logic ? \"\" : \" not\"} match format ${JSON.stringify(currentSchema.format)}`);\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMinimum ? \">\" : \">=\"} ${JSON.stringify(currentSchema.formatMinimum)}`);\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\"} ${JSON.stringify(currentSchema.formatMaximum)}`);\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  const hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  const range = new Range();\n\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(`should${logic ? \"\" : \" not\"} be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n};"]},"metadata":{},"sourceType":"script"}