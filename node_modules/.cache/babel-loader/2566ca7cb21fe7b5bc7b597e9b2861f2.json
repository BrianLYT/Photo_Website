{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nclass Serializer {\n  constructor(middlewares, context) {\n    this.serializeMiddlewares = middlewares.slice();\n    this.deserializeMiddlewares = middlewares.slice().reverse();\n    this.context = context;\n  }\n\n  serialize(obj, context) {\n    const ctx = { ...context,\n      ...this.context\n    };\n    let current = obj;\n\n    for (const middleware of this.serializeMiddlewares) {\n      if (current && typeof current.then === \"function\") {\n        current = current.then(data => data && middleware.serialize(data, ctx));\n      } else if (current) {\n        try {\n          current = middleware.serialize(current, ctx);\n        } catch (err) {\n          current = Promise.reject(err);\n        }\n      } else break;\n    }\n\n    return current;\n  }\n\n  deserialize(value, context) {\n    const ctx = { ...context,\n      ...this.context\n    };\n    /** @type {any} */\n\n    let current = value;\n\n    for (const middleware of this.deserializeMiddlewares) {\n      if (current && typeof current.then === \"function\") {\n        current = current.then(data => middleware.deserialize(data, ctx));\n      } else {\n        current = middleware.deserialize(current, ctx);\n      }\n    }\n\n    return current;\n  }\n\n}\n\nmodule.exports = Serializer;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/serialization/Serializer.js"],"names":["Serializer","constructor","middlewares","context","serializeMiddlewares","slice","deserializeMiddlewares","reverse","serialize","obj","ctx","current","middleware","then","data","err","Promise","reject","deserialize","value","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAN,CAAiB;AAChBC,EAAAA,WAAW,CAACC,WAAD,EAAcC,OAAd,EAAuB;AACjC,SAAKC,oBAAL,GAA4BF,WAAW,CAACG,KAAZ,EAA5B;AACA,SAAKC,sBAAL,GAA8BJ,WAAW,CAACG,KAAZ,GAAoBE,OAApB,EAA9B;AACA,SAAKJ,OAAL,GAAeA,OAAf;AACA;;AAEDK,EAAAA,SAAS,CAACC,GAAD,EAAMN,OAAN,EAAe;AACvB,UAAMO,GAAG,GAAG,EAAE,GAAGP,OAAL;AAAc,SAAG,KAAKA;AAAtB,KAAZ;AACA,QAAIQ,OAAO,GAAGF,GAAd;;AACA,SAAK,MAAMG,UAAX,IAAyB,KAAKR,oBAA9B,EAAoD;AACnD,UAAIO,OAAO,IAAI,OAAOA,OAAO,CAACE,IAAf,KAAwB,UAAvC,EAAmD;AAClDF,QAAAA,OAAO,GAAGA,OAAO,CAACE,IAAR,CAAaC,IAAI,IAAIA,IAAI,IAAIF,UAAU,CAACJ,SAAX,CAAqBM,IAArB,EAA2BJ,GAA3B,CAA7B,CAAV;AACA,OAFD,MAEO,IAAIC,OAAJ,EAAa;AACnB,YAAI;AACHA,UAAAA,OAAO,GAAGC,UAAU,CAACJ,SAAX,CAAqBG,OAArB,EAA8BD,GAA9B,CAAV;AACA,SAFD,CAEE,OAAOK,GAAP,EAAY;AACbJ,UAAAA,OAAO,GAAGK,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAV;AACA;AACD,OANM,MAMA;AACP;;AACD,WAAOJ,OAAP;AACA;;AAEDO,EAAAA,WAAW,CAACC,KAAD,EAAQhB,OAAR,EAAiB;AAC3B,UAAMO,GAAG,GAAG,EAAE,GAAGP,OAAL;AAAc,SAAG,KAAKA;AAAtB,KAAZ;AACA;;AACA,QAAIQ,OAAO,GAAGQ,KAAd;;AACA,SAAK,MAAMP,UAAX,IAAyB,KAAKN,sBAA9B,EAAsD;AACrD,UAAIK,OAAO,IAAI,OAAOA,OAAO,CAACE,IAAf,KAAwB,UAAvC,EAAmD;AAClDF,QAAAA,OAAO,GAAGA,OAAO,CAACE,IAAR,CAAaC,IAAI,IAAIF,UAAU,CAACM,WAAX,CAAuBJ,IAAvB,EAA6BJ,GAA7B,CAArB,CAAV;AACA,OAFD,MAEO;AACNC,QAAAA,OAAO,GAAGC,UAAU,CAACM,WAAX,CAAuBP,OAAvB,EAAgCD,GAAhC,CAAV;AACA;AACD;;AACD,WAAOC,OAAP;AACA;;AApCe;;AAuCjBS,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nclass Serializer {\n\tconstructor(middlewares, context) {\n\t\tthis.serializeMiddlewares = middlewares.slice();\n\t\tthis.deserializeMiddlewares = middlewares.slice().reverse();\n\t\tthis.context = context;\n\t}\n\n\tserialize(obj, context) {\n\t\tconst ctx = { ...context, ...this.context };\n\t\tlet current = obj;\n\t\tfor (const middleware of this.serializeMiddlewares) {\n\t\t\tif (current && typeof current.then === \"function\") {\n\t\t\t\tcurrent = current.then(data => data && middleware.serialize(data, ctx));\n\t\t\t} else if (current) {\n\t\t\t\ttry {\n\t\t\t\t\tcurrent = middleware.serialize(current, ctx);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tcurrent = Promise.reject(err);\n\t\t\t\t}\n\t\t\t} else break;\n\t\t}\n\t\treturn current;\n\t}\n\n\tdeserialize(value, context) {\n\t\tconst ctx = { ...context, ...this.context };\n\t\t/** @type {any} */\n\t\tlet current = value;\n\t\tfor (const middleware of this.deserializeMiddlewares) {\n\t\t\tif (current && typeof current.then === \"function\") {\n\t\t\t\tcurrent = current.then(data => middleware.deserialize(data, ctx));\n\t\t\t} else {\n\t\t\t\tcurrent = middleware.deserialize(current, ctx);\n\t\t\t}\n\t\t}\n\t\treturn current;\n\t}\n}\n\nmodule.exports = Serializer;\n"]},"metadata":{},"sourceType":"script"}