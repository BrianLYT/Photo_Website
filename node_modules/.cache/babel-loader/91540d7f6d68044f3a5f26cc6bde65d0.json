{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n\n/** @typedef {Record<string, any>} PreparsedAst */\n\n/**\n * @typedef {Object} ParserStateBase\n * @property {string | Buffer} source\n * @property {NormalModule} current\n * @property {NormalModule} module\n * @property {Compilation} compilation\n * @property {{[k: string]: any}} options\n */\n\n/** @typedef {Record<string, any> & ParserStateBase} ParserState */\n\nclass Parser {\n  /* istanbul ignore next */\n\n  /**\n   * @abstract\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n  parse(source, state) {\n    const AbstractMethodError = require(\"./AbstractMethodError\");\n\n    throw new AbstractMethodError();\n  }\n\n}\n\nmodule.exports = Parser;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/Parser.js"],"names":["Parser","parse","source","state","AbstractMethodError","require","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMA,MAAN,CAAa;AACZ;;AACA;AACD;AACA;AACA;AACA;AACA;AACCC,EAAAA,KAAK,CAACC,MAAD,EAASC,KAAT,EAAgB;AACpB,UAAMC,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAnC;;AACA,UAAM,IAAID,mBAAJ,EAAN;AACA;;AAXW;;AAcbE,MAAM,CAACC,OAAP,GAAiBP,MAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n\n/** @typedef {Record<string, any>} PreparsedAst */\n\n/**\n * @typedef {Object} ParserStateBase\n * @property {string | Buffer} source\n * @property {NormalModule} current\n * @property {NormalModule} module\n * @property {Compilation} compilation\n * @property {{[k: string]: any}} options\n */\n\n/** @typedef {Record<string, any> & ParserStateBase} ParserState */\n\nclass Parser {\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n}\n\nmodule.exports = Parser;\n"]},"metadata":{},"sourceType":"script"}