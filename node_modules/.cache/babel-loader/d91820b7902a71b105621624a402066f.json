{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst InitFragment = require(\"../InitFragment\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst Template = require(\"../Template\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/**\n * @typedef {GenerateContext} Context\n */\n\n\nclass AwaitDependenciesInitFragment extends InitFragment {\n  /**\n   * @param {Set<string>} promises the promises that should be awaited\n   */\n  constructor(promises) {\n    super(undefined, InitFragment.STAGE_ASYNC_DEPENDENCIES, 0, \"await-dependencies\");\n    this.promises = promises;\n  }\n\n  merge(other) {\n    const promises = new Set(other.promises);\n\n    for (const p of this.promises) {\n      promises.add(p);\n    }\n\n    return new AwaitDependenciesInitFragment(promises);\n  }\n  /**\n   * @param {Context} context context\n   * @returns {string|Source} the source code that will be included as initialization code\n   */\n\n\n  getContent(_ref) {\n    let {\n      runtimeRequirements\n    } = _ref;\n    runtimeRequirements.add(RuntimeGlobals.module);\n    const promises = this.promises;\n\n    if (promises.size === 0) {\n      return \"\";\n    }\n\n    if (promises.size === 1) {\n      for (const p of promises) {\n        return Template.asString([`var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([${p}]);`, `${p} = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];`, \"\"]);\n      }\n    }\n\n    const sepPromises = Array.from(promises).join(\", \"); // TODO check if destructuring is supported\n\n    return Template.asString([`var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([${sepPromises}]);`, `([${sepPromises}] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);`, \"\"]);\n  }\n\n}\n\nmodule.exports = AwaitDependenciesInitFragment;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/async-modules/AwaitDependenciesInitFragment.js"],"names":["InitFragment","require","RuntimeGlobals","Template","AwaitDependenciesInitFragment","constructor","promises","undefined","STAGE_ASYNC_DEPENDENCIES","merge","other","Set","p","add","getContent","runtimeRequirements","module","size","asString","sepPromises","Array","from","join","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;AAEA;;AACA;;AAEA;AACA;AACA;;;AACA,MAAMG,6BAAN,SAA4CJ,YAA5C,CAAyD;AACxD;AACD;AACA;AACCK,EAAAA,WAAW,CAACC,QAAD,EAAW;AACrB,UACCC,SADD,EAECP,YAAY,CAACQ,wBAFd,EAGC,CAHD,EAIC,oBAJD;AAMA,SAAKF,QAAL,GAAgBA,QAAhB;AACA;;AAEDG,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACZ,UAAMJ,QAAQ,GAAG,IAAIK,GAAJ,CAAQD,KAAK,CAACJ,QAAd,CAAjB;;AACA,SAAK,MAAMM,CAAX,IAAgB,KAAKN,QAArB,EAA+B;AAC9BA,MAAAA,QAAQ,CAACO,GAAT,CAAaD,CAAb;AACA;;AACD,WAAO,IAAIR,6BAAJ,CAAkCE,QAAlC,CAAP;AACA;AAED;AACD;AACA;AACA;;;AACCQ,EAAAA,UAAU,OAA0B;AAAA,QAAzB;AAAEC,MAAAA;AAAF,KAAyB;AACnCA,IAAAA,mBAAmB,CAACF,GAApB,CAAwBX,cAAc,CAACc,MAAvC;AACA,UAAMV,QAAQ,GAAG,KAAKA,QAAtB;;AACA,QAAIA,QAAQ,CAACW,IAAT,KAAkB,CAAtB,EAAyB;AACxB,aAAO,EAAP;AACA;;AACD,QAAIX,QAAQ,CAACW,IAAT,KAAkB,CAAtB,EAAyB;AACxB,WAAK,MAAML,CAAX,IAAgBN,QAAhB,EAA0B;AACzB,eAAOH,QAAQ,CAACe,QAAT,CAAkB,CACvB,+EAA8EN,CAAE,KADzD,EAEvB,GAAEA,CAAE,0HAFmB,EAGxB,EAHwB,CAAlB,CAAP;AAKA;AACD;;AACD,UAAMO,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWf,QAAX,EAAqBgB,IAArB,CAA0B,IAA1B,CAApB,CAfmC,CAgBnC;;AACA,WAAOnB,QAAQ,CAACe,QAAT,CAAkB,CACvB,+EAA8EC,WAAY,KADnE,EAEvB,KAAIA,WAAY,uHAFO,EAGxB,EAHwB,CAAlB,CAAP;AAKA;;AAhDuD;;AAmDzDH,MAAM,CAACO,OAAP,GAAiBnB,6BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst InitFragment = require(\"../InitFragment\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/**\n * @typedef {GenerateContext} Context\n */\nclass AwaitDependenciesInitFragment extends InitFragment {\n\t/**\n\t * @param {Set<string>} promises the promises that should be awaited\n\t */\n\tconstructor(promises) {\n\t\tsuper(\n\t\t\tundefined,\n\t\t\tInitFragment.STAGE_ASYNC_DEPENDENCIES,\n\t\t\t0,\n\t\t\t\"await-dependencies\"\n\t\t);\n\t\tthis.promises = promises;\n\t}\n\n\tmerge(other) {\n\t\tconst promises = new Set(other.promises);\n\t\tfor (const p of this.promises) {\n\t\t\tpromises.add(p);\n\t\t}\n\t\treturn new AwaitDependenciesInitFragment(promises);\n\t}\n\n\t/**\n\t * @param {Context} context context\n\t * @returns {string|Source} the source code that will be included as initialization code\n\t */\n\tgetContent({ runtimeRequirements }) {\n\t\truntimeRequirements.add(RuntimeGlobals.module);\n\t\tconst promises = this.promises;\n\t\tif (promises.size === 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (promises.size === 1) {\n\t\t\tfor (const p of promises) {\n\t\t\t\treturn Template.asString([\n\t\t\t\t\t`var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([${p}]);`,\n\t\t\t\t\t`${p} = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];`,\n\t\t\t\t\t\"\"\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t\tconst sepPromises = Array.from(promises).join(\", \");\n\t\t// TODO check if destructuring is supported\n\t\treturn Template.asString([\n\t\t\t`var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([${sepPromises}]);`,\n\t\t\t`([${sepPromises}] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);`,\n\t\t\t\"\"\n\t\t]);\n\t}\n}\n\nmodule.exports = AwaitDependenciesInitFragment;\n"]},"metadata":{},"sourceType":"script"}