{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n\nclass GlobalRuntimeModule extends RuntimeModule {\n  constructor() {\n    super(\"global\");\n  }\n  /**\n   * @returns {string} runtime code\n   */\n\n\n  generate() {\n    return Template.asString([`${RuntimeGlobals.global} = (function() {`, Template.indent([\"if (typeof globalThis === 'object') return globalThis;\", \"try {\", Template.indent( // This works in non-strict mode\n    // or\n    // This works if eval is allowed (see CSP)\n    \"return this || new Function('return this')();\"), \"} catch (e) {\", Template.indent( // This works if the window reference is available\n    \"if (typeof window === 'object') return window;\"), \"}\" // It can still be `undefined`, but nothing to do about it...\n    // We return `undefined`, instead of nothing here, so it's\n    // easier to handle this case:\n    //   if (!global) { … }\n    ]), \"})();\"]);\n  }\n\n}\n\nmodule.exports = GlobalRuntimeModule;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/runtime/GlobalRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","GlobalRuntimeModule","constructor","generate","asString","global","indent","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;;AAEA,MAAMG,mBAAN,SAAkCF,aAAlC,CAAgD;AAC/CG,EAAAA,WAAW,GAAG;AACb,UAAM,QAAN;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,QAAQ,GAAG;AACV,WAAOH,QAAQ,CAACI,QAAT,CAAkB,CACvB,GAAEP,cAAc,CAACQ,MAAO,kBADD,EAExBL,QAAQ,CAACM,MAAT,CAAgB,CACf,wDADe,EAEf,OAFe,EAGfN,QAAQ,CAACM,MAAT,EACC;AACA;AACA;AACA,mDAJD,CAHe,EASf,eATe,EAUfN,QAAQ,CAACM,MAAT,EACC;AACA,oDAFD,CAVe,EAcf,GAde,CAef;AACA;AACA;AACA;AAlBe,KAAhB,CAFwB,EAsBxB,OAtBwB,CAAlB,CAAP;AAwBA;;AAjC8C;;AAoChDC,MAAM,CAACC,OAAP,GAAiBP,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\nclass GlobalRuntimeModule extends RuntimeModule {\n\tconstructor() {\n\t\tsuper(\"global\");\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\treturn Template.asString([\n\t\t\t`${RuntimeGlobals.global} = (function() {`,\n\t\t\tTemplate.indent([\n\t\t\t\t\"if (typeof globalThis === 'object') return globalThis;\",\n\t\t\t\t\"try {\",\n\t\t\t\tTemplate.indent(\n\t\t\t\t\t// This works in non-strict mode\n\t\t\t\t\t// or\n\t\t\t\t\t// This works if eval is allowed (see CSP)\n\t\t\t\t\t\"return this || new Function('return this')();\"\n\t\t\t\t),\n\t\t\t\t\"} catch (e) {\",\n\t\t\t\tTemplate.indent(\n\t\t\t\t\t// This works if the window reference is available\n\t\t\t\t\t\"if (typeof window === 'object') return window;\"\n\t\t\t\t),\n\t\t\t\t\"}\"\n\t\t\t\t// It can still be `undefined`, but nothing to do about it...\n\t\t\t\t// We return `undefined`, instead of nothing here, so it's\n\t\t\t\t// easier to handle this case:\n\t\t\t\t//   if (!global) { … }\n\t\t\t]),\n\t\t\t\"})();\"\n\t\t]);\n\t}\n}\n\nmodule.exports = GlobalRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}