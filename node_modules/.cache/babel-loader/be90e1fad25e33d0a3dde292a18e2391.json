{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\"use strict\";\n\nconst {\n  RawSource\n} = require(\"webpack-sources\");\n\nconst Generator = require(\"../Generator\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass AssetSourceGenerator extends Generator {\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n  generate(module, _ref) {\n    let {\n      chunkGraph,\n      runtimeTemplate,\n      runtimeRequirements\n    } = _ref;\n    runtimeRequirements.add(RuntimeGlobals.module);\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return new RawSource(\"\");\n    }\n\n    const content = originalSource.source();\n    let encodedSource;\n\n    if (typeof content === \"string\") {\n      encodedSource = content;\n    } else {\n      encodedSource = content.toString(\"utf-8\");\n    }\n\n    return new RawSource(`${RuntimeGlobals.module}.exports = ${JSON.stringify(encodedSource)};`);\n  }\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n\n\n  getTypes(module) {\n    return TYPES;\n  }\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return 0;\n    } // Example: m.exports=\"abcd\"\n\n\n    return originalSource.size() + 12;\n  }\n\n}\n\nmodule.exports = AssetSourceGenerator;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/asset/AssetSourceGenerator.js"],"names":["RawSource","require","Generator","RuntimeGlobals","TYPES","Set","AssetSourceGenerator","generate","module","chunkGraph","runtimeTemplate","runtimeRequirements","add","originalSource","content","source","encodedSource","toString","JSON","stringify","getTypes","getSize","type","size","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAgBC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,mBAAD,CAA9B;AAEA;;AACA;;AACA;;;AAEA,MAAMG,KAAK,GAAG,IAAIC,GAAJ,CAAQ,CAAC,YAAD,CAAR,CAAd;;AAEA,MAAMC,oBAAN,SAAmCJ,SAAnC,CAA6C;AAC5C;AACD;AACA;AACA;AACA;AACCK,EAAAA,QAAQ,CAACC,MAAD,QAA+D;AAAA,QAAtD;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,eAAd;AAA+BC,MAAAA;AAA/B,KAAsD;AACtEA,IAAAA,mBAAmB,CAACC,GAApB,CAAwBT,cAAc,CAACK,MAAvC;AAEA,UAAMK,cAAc,GAAGL,MAAM,CAACK,cAAP,EAAvB;;AAEA,QAAI,CAACA,cAAL,EAAqB;AACpB,aAAO,IAAIb,SAAJ,CAAc,EAAd,CAAP;AACA;;AAED,UAAMc,OAAO,GAAGD,cAAc,CAACE,MAAf,EAAhB;AAEA,QAAIC,aAAJ;;AACA,QAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AAChCE,MAAAA,aAAa,GAAGF,OAAhB;AACA,KAFD,MAEO;AACNE,MAAAA,aAAa,GAAGF,OAAO,CAACG,QAAR,CAAiB,OAAjB,CAAhB;AACA;;AACD,WAAO,IAAIjB,SAAJ,CACL,GAAEG,cAAc,CAACK,MAAO,cAAaU,IAAI,CAACC,SAAL,CAAeH,aAAf,CAA8B,GAD9D,CAAP;AAGA;AAED;AACD;AACA;AACA;;;AACCI,EAAAA,QAAQ,CAACZ,MAAD,EAAS;AAChB,WAAOJ,KAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCiB,EAAAA,OAAO,CAACb,MAAD,EAASc,IAAT,EAAe;AACrB,UAAMT,cAAc,GAAGL,MAAM,CAACK,cAAP,EAAvB;;AAEA,QAAI,CAACA,cAAL,EAAqB;AACpB,aAAO,CAAP;AACA,KALoB,CAOrB;;;AACA,WAAOA,cAAc,CAACU,IAAf,KAAwB,EAA/B;AACA;;AAlD2C;;AAqD7Cf,MAAM,CAACgB,OAAP,GAAiBlB,oBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sergey Melyukov @smelukov\n*/\n\n\"use strict\";\n\nconst { RawSource } = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nconst TYPES = new Set([\"javascript\"]);\n\nclass AssetSourceGenerator extends Generator {\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, { chunkGraph, runtimeTemplate, runtimeRequirements }) {\n\t\truntimeRequirements.add(RuntimeGlobals.module);\n\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"\");\n\t\t}\n\n\t\tconst content = originalSource.source();\n\n\t\tlet encodedSource;\n\t\tif (typeof content === \"string\") {\n\t\t\tencodedSource = content;\n\t\t} else {\n\t\t\tencodedSource = content.toString(\"utf-8\");\n\t\t}\n\t\treturn new RawSource(\n\t\t\t`${RuntimeGlobals.module}.exports = ${JSON.stringify(encodedSource)};`\n\t\t);\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Example: m.exports=\"abcd\"\n\t\treturn originalSource.size() + 12;\n\t}\n}\n\nmodule.exports = AssetSourceGenerator;\n"]},"metadata":{},"sourceType":"script"}