{"ast":null,"code":"'use strict';\n\nvar TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d:\\d\\d)?$/i;\nvar DATE_TIME_SEPARATOR = /t|\\s/i;\nvar COMPARE_FORMATS = {\n  date: compareDate,\n  time: compareTime,\n  'date-time': compareDateTime\n};\nvar $dataMetaSchema = {\n  type: 'object',\n  required: ['$data'],\n  properties: {\n    $data: {\n      type: 'string',\n      anyOf: [{\n        format: 'relative-json-pointer'\n      }, {\n        format: 'json-pointer'\n      }]\n    }\n  },\n  additionalProperties: false\n};\n\nmodule.exports = function (minMax) {\n  var keyword = 'format' + minMax;\n  return function defFunc(ajv) {\n    defFunc.definition = {\n      type: 'string',\n      inline: require('./dotjs/_formatLimit'),\n      statements: true,\n      errors: 'full',\n      dependencies: ['format'],\n      metaSchema: {\n        anyOf: [{\n          type: 'string'\n        }, $dataMetaSchema]\n      }\n    };\n    ajv.addKeyword(keyword, defFunc.definition);\n    ajv.addKeyword('formatExclusive' + minMax, {\n      dependencies: ['format' + minMax],\n      metaSchema: {\n        anyOf: [{\n          type: 'boolean'\n        }, $dataMetaSchema]\n      }\n    });\n    extendFormats(ajv);\n    return ajv;\n  };\n};\n\nfunction extendFormats(ajv) {\n  var formats = ajv._formats;\n\n  for (var name in COMPARE_FORMATS) {\n    var format = formats[name]; // the last condition is needed if it's RegExp from another window\n\n    if (typeof format != 'object' || format instanceof RegExp || !format.validate) format = formats[name] = {\n      validate: format\n    };\n    if (!format.compare) format.compare = COMPARE_FORMATS[name];\n  }\n}\n\nfunction compareDate(d1, d2) {\n  if (!(d1 && d2)) return;\n  if (d1 > d2) return 1;\n  if (d1 < d2) return -1;\n  if (d1 === d2) return 0;\n}\n\nfunction compareTime(t1, t2) {\n  if (!(t1 && t2)) return;\n  t1 = t1.match(TIME);\n  t2 = t2.match(TIME);\n  if (!(t1 && t2)) return;\n  t1 = t1[1] + t1[2] + t1[3] + (t1[4] || '');\n  t2 = t2[1] + t2[2] + t2[3] + (t2[4] || '');\n  if (t1 > t2) return 1;\n  if (t1 < t2) return -1;\n  if (t1 === t2) return 0;\n}\n\nfunction compareDateTime(dt1, dt2) {\n  if (!(dt1 && dt2)) return;\n  dt1 = dt1.split(DATE_TIME_SEPARATOR);\n  dt2 = dt2.split(DATE_TIME_SEPARATOR);\n  var res = compareDate(dt1[0], dt2[0]);\n  if (res === undefined) return;\n  return res || compareTime(dt1[1], dt2[1]);\n}","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/ajv-keywords/keywords/_formatLimit.js"],"names":["TIME","DATE_TIME_SEPARATOR","COMPARE_FORMATS","date","compareDate","time","compareTime","compareDateTime","$dataMetaSchema","type","required","properties","$data","anyOf","format","additionalProperties","module","exports","minMax","keyword","defFunc","ajv","definition","inline","require","statements","errors","dependencies","metaSchema","addKeyword","extendFormats","formats","_formats","name","RegExp","validate","compare","d1","d2","t1","t2","match","dt1","dt2","split","res","undefined"],"mappings":"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","sourcesContent":["'use strict';\n\nvar TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d:\\d\\d)?$/i;\nvar DATE_TIME_SEPARATOR = /t|\\s/i;\n\nvar COMPARE_FORMATS = {\n  date: compareDate,\n  time: compareTime,\n  'date-time': compareDateTime\n};\n\nvar $dataMetaSchema = {\n  type: 'object',\n  required: [ '$data' ],\n  properties: {\n    $data: {\n      type: 'string',\n      anyOf: [\n        { format: 'relative-json-pointer' },\n        { format: 'json-pointer' }\n      ]\n    }\n  },\n  additionalProperties: false\n};\n\nmodule.exports = function (minMax) {\n  var keyword = 'format' + minMax;\n  return function defFunc(ajv) {\n    defFunc.definition = {\n      type: 'string',\n      inline: require('./dotjs/_formatLimit'),\n      statements: true,\n      errors: 'full',\n      dependencies: ['format'],\n      metaSchema: {\n        anyOf: [\n          {type: 'string'},\n          $dataMetaSchema\n        ]\n      }\n    };\n\n    ajv.addKeyword(keyword, defFunc.definition);\n    ajv.addKeyword('formatExclusive' + minMax, {\n      dependencies: ['format' + minMax],\n      metaSchema: {\n        anyOf: [\n          {type: 'boolean'},\n          $dataMetaSchema\n        ]\n      }\n    });\n    extendFormats(ajv);\n    return ajv;\n  };\n};\n\n\nfunction extendFormats(ajv) {\n  var formats = ajv._formats;\n  for (var name in COMPARE_FORMATS) {\n    var format = formats[name];\n    // the last condition is needed if it's RegExp from another window\n    if (typeof format != 'object' || format instanceof RegExp || !format.validate)\n      format = formats[name] = { validate: format };\n    if (!format.compare)\n      format.compare = COMPARE_FORMATS[name];\n  }\n}\n\n\nfunction compareDate(d1, d2) {\n  if (!(d1 && d2)) return;\n  if (d1 > d2) return 1;\n  if (d1 < d2) return -1;\n  if (d1 === d2) return 0;\n}\n\n\nfunction compareTime(t1, t2) {\n  if (!(t1 && t2)) return;\n  t1 = t1.match(TIME);\n  t2 = t2.match(TIME);\n  if (!(t1 && t2)) return;\n  t1 = t1[1] + t1[2] + t1[3] + (t1[4]||'');\n  t2 = t2[1] + t2[2] + t2[3] + (t2[4]||'');\n  if (t1 > t2) return 1;\n  if (t1 < t2) return -1;\n  if (t1 === t2) return 0;\n}\n\n\nfunction compareDateTime(dt1, dt2) {\n  if (!(dt1 && dt2)) return;\n  dt1 = dt1.split(DATE_TIME_SEPARATOR);\n  dt2 = dt2.split(DATE_TIME_SEPARATOR);\n  var res = compareDate(dt1[0], dt2[0]);\n  if (res === undefined) return;\n  return res || compareTime(dt1[1], dt2[1]);\n}\n"]},"metadata":{},"sourceType":"script"}