{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\n\nconst ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\n\nconst ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\n\nconst ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass ChunkPrefetchPreloadPlugin {\n  /**\n   * @param {Compiler} compiler the compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ChunkPrefetchPreloadPlugin\", compilation => {\n      compilation.hooks.additionalChunkRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set, _ref) => {\n        let {\n          chunkGraph\n        } = _ref;\n        if (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n        const startupChildChunks = chunk.getChildrenOfTypeInOrder(chunkGraph, \"prefetchOrder\");\n\n        if (startupChildChunks) {\n          set.add(RuntimeGlobals.prefetchChunk);\n          set.add(RuntimeGlobals.onChunksLoaded);\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchStartupRuntimeModule(startupChildChunks));\n        }\n      });\n      compilation.hooks.additionalTreeRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set, _ref2) => {\n        let {\n          chunkGraph\n        } = _ref2;\n        const chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n\n        if (chunkMap.prefetch) {\n          set.add(RuntimeGlobals.prefetchChunk);\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch));\n        }\n\n        if (chunkMap.preload) {\n          set.add(RuntimeGlobals.preloadChunk);\n          compilation.addRuntimeModule(chunk, new ChunkPreloadTriggerRuntimeModule(chunkMap.preload));\n        }\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.prefetchChunk).tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"prefetch\", RuntimeGlobals.prefetchChunk, RuntimeGlobals.prefetchChunkHandlers));\n        set.add(RuntimeGlobals.prefetchChunkHandlers);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.preloadChunk).tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"preload\", RuntimeGlobals.preloadChunk, RuntimeGlobals.preloadChunkHandlers));\n        set.add(RuntimeGlobals.preloadChunkHandlers);\n      });\n    });\n  }\n\n}\n\nmodule.exports = ChunkPrefetchPreloadPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/prefetch/ChunkPrefetchPreloadPlugin.js"],"names":["RuntimeGlobals","require","ChunkPrefetchFunctionRuntimeModule","ChunkPrefetchStartupRuntimeModule","ChunkPrefetchTriggerRuntimeModule","ChunkPreloadTriggerRuntimeModule","ChunkPrefetchPreloadPlugin","apply","compiler","hooks","compilation","tap","additionalChunkRuntimeRequirements","chunk","set","chunkGraph","getNumberOfEntryModules","startupChildChunks","getChildrenOfTypeInOrder","add","prefetchChunk","onChunksLoaded","addRuntimeModule","additionalTreeRuntimeRequirements","chunkMap","getChildIdsByOrdersMap","prefetch","preload","preloadChunk","runtimeRequirementInTree","for","prefetchChunkHandlers","preloadChunkHandlers","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\nconst ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\nconst ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\nconst ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ChunkPrefetchPreloadPlugin {\n\t/**\n\t * @param {Compiler} compiler the compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.additionalChunkRuntimeRequirements.tap(\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tif (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n\t\t\t\t\t\tconst startupChildChunks = chunk.getChildrenOfTypeInOrder(\n\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\"prefetchOrder\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (startupChildChunks) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.onChunksLoaded);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPrefetchStartupRuntimeModule(startupChildChunks)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.additionalTreeRuntimeRequirements.tap(\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tconst chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n\n\t\t\t\t\t\tif (chunkMap.prefetch) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (chunkMap.preload) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunk);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPreloadTriggerRuntimeModule(chunkMap.preload)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.prefetchChunk)\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\n\t\t\t\t\t\t\t\t\"prefetch\",\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunk,\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunkHandlers);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.preloadChunk)\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\n\t\t\t\t\t\t\t\t\"preload\",\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunk,\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunkHandlers);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ChunkPrefetchPreloadPlugin;\n"]},"metadata":{},"sourceType":"script"}