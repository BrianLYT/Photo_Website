{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n\nclass RootsPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source hook\n   * @param {Set<string>} roots roots\n   * @param {string | ResolveStepHook} target target hook\n   */\n  constructor(source, roots, target) {\n    this.roots = Array.from(roots);\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"RootsPlugin\", (request, resolveContext, callback) => {\n      const req = request.request;\n      if (!req) return callback();\n      if (!req.startsWith(\"/\")) return callback();\n      forEachBail(this.roots, (root, callback) => {\n        const path = resolver.join(root, req.slice(1));\n        const obj = { ...request,\n          path,\n          relativePath: request.relativePath && path\n        };\n        resolver.doResolve(target, obj, `root path ${root}`, resolveContext, callback);\n      }, callback);\n    });\n  }\n\n}\n\nmodule.exports = RootsPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/enhanced-resolve/lib/RootsPlugin.js"],"names":["forEachBail","require","RootsPlugin","constructor","source","roots","target","Array","from","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","req","startsWith","root","path","join","slice","obj","relativePath","doResolve","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;AAEA;;AACA;;;AAEA,MAAMC,WAAN,CAAkB;AACjB;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,MAAhB,EAAwB;AAClC,SAAKD,KAAL,GAAaE,KAAK,CAACC,IAAN,CAAWH,KAAX,CAAb;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCG,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMJ,MAAM,GAAGI,QAAQ,CAACC,UAAT,CAAoB,KAAKL,MAAzB,CAAf;AAEAI,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKR,MADf,EAEES,QAFF,CAEW,aAFX,EAE0B,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AAC/D,YAAMC,GAAG,GAAGH,OAAO,CAACA,OAApB;AACA,UAAI,CAACG,GAAL,EAAU,OAAOD,QAAQ,EAAf;AACV,UAAI,CAACC,GAAG,CAACC,UAAJ,CAAe,GAAf,CAAL,EAA0B,OAAOF,QAAQ,EAAf;AAE1BhB,MAAAA,WAAW,CACV,KAAKK,KADK,EAEV,CAACc,IAAD,EAAOH,QAAP,KAAoB;AACnB,cAAMI,IAAI,GAAGV,QAAQ,CAACW,IAAT,CAAcF,IAAd,EAAoBF,GAAG,CAACK,KAAJ,CAAU,CAAV,CAApB,CAAb;AACA,cAAMC,GAAG,GAAG,EACX,GAAGT,OADQ;AAEXM,UAAAA,IAFW;AAGXI,UAAAA,YAAY,EAAEV,OAAO,CAACU,YAAR,IAAwBJ;AAH3B,SAAZ;AAKAV,QAAAA,QAAQ,CAACe,SAAT,CACCnB,MADD,EAECiB,GAFD,EAGE,aAAYJ,IAAK,EAHnB,EAICJ,cAJD,EAKCC,QALD;AAOA,OAhBS,EAiBVA,QAjBU,CAAX;AAmBA,KA1BF;AA2BA;;AA9CgB;;AAiDlBU,MAAM,CAACC,OAAP,GAAiBzB,WAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nclass RootsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source hook\n\t * @param {Set<string>} roots roots\n\t * @param {string | ResolveStepHook} target target hook\n\t */\n\tconstructor(source, roots, target) {\n\t\tthis.roots = Array.from(roots);\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"RootsPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst req = request.request;\n\t\t\t\tif (!req) return callback();\n\t\t\t\tif (!req.startsWith(\"/\")) return callback();\n\n\t\t\t\tforEachBail(\n\t\t\t\t\tthis.roots,\n\t\t\t\t\t(root, callback) => {\n\t\t\t\t\t\tconst path = resolver.join(root, req.slice(1));\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\trelativePath: request.relativePath && path\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t`root path ${root}`,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n}\n\nmodule.exports = RootsPlugin;\n"]},"metadata":{},"sourceType":"script"}