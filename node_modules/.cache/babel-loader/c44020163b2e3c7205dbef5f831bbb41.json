{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\nconst {\n  compareChunksNatural\n} = require(\"../util/comparators\");\n\nconst {\n  getFullChunkName,\n  getUsedChunkIds,\n  assignDeterministicIds\n} = require(\"./IdHelpers\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nclass DeterministicChunkIdsPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DeterministicChunkIdsPlugin\", compilation => {\n      compilation.hooks.chunkIds.tap(\"DeterministicChunkIdsPlugin\", chunks => {\n        const chunkGraph = compilation.chunkGraph;\n        const context = this.options.context ? this.options.context : compiler.context;\n        const maxLength = this.options.maxLength || 3;\n        const compareNatural = compareChunksNatural(chunkGraph);\n        const usedIds = getUsedChunkIds(compilation);\n        assignDeterministicIds(Array.from(chunks).filter(chunk => {\n          return chunk.id === null;\n        }), chunk => getFullChunkName(chunk, chunkGraph, context, compiler.root), compareNatural, (chunk, id) => {\n          const size = usedIds.size;\n          usedIds.add(`${id}`);\n          if (size === usedIds.size) return false;\n          chunk.id = id;\n          chunk.ids = [id];\n          return true;\n        }, [Math.pow(10, maxLength)], 10, usedIds.size);\n      });\n    });\n  }\n\n}\n\nmodule.exports = DeterministicChunkIdsPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ids/DeterministicChunkIdsPlugin.js"],"names":["compareChunksNatural","require","getFullChunkName","getUsedChunkIds","assignDeterministicIds","DeterministicChunkIdsPlugin","constructor","options","apply","compiler","hooks","compilation","tap","chunkIds","chunks","chunkGraph","context","maxLength","compareNatural","usedIds","Array","from","filter","chunk","id","root","size","add","ids","Math","pow","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,qBAAD,CAAxC;;AACA,MAAM;AACLC,EAAAA,gBADK;AAELC,EAAAA,eAFK;AAGLC,EAAAA;AAHK,IAIFH,OAAO,CAAC,aAAD,CAJX;AAMA;;AACA;;;AAEA,MAAMI,2BAAN,CAAkC;AACjCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,6BADD,EAECD,WAAW,IAAI;AACdA,MAAAA,WAAW,CAACD,KAAZ,CAAkBG,QAAlB,CAA2BD,GAA3B,CACC,6BADD,EAECE,MAAM,IAAI;AACT,cAAMC,UAAU,GAAGJ,WAAW,CAACI,UAA/B;AACA,cAAMC,OAAO,GAAG,KAAKT,OAAL,CAAaS,OAAb,GACb,KAAKT,OAAL,CAAaS,OADA,GAEbP,QAAQ,CAACO,OAFZ;AAGA,cAAMC,SAAS,GAAG,KAAKV,OAAL,CAAaU,SAAb,IAA0B,CAA5C;AAEA,cAAMC,cAAc,GAAGlB,oBAAoB,CAACe,UAAD,CAA3C;AAEA,cAAMI,OAAO,GAAGhB,eAAe,CAACQ,WAAD,CAA/B;AACAP,QAAAA,sBAAsB,CACrBgB,KAAK,CAACC,IAAN,CAAWP,MAAX,EAAmBQ,MAAnB,CAA0BC,KAAK,IAAI;AAClC,iBAAOA,KAAK,CAACC,EAAN,KAAa,IAApB;AACA,SAFD,CADqB,EAIrBD,KAAK,IACJrB,gBAAgB,CAACqB,KAAD,EAAQR,UAAR,EAAoBC,OAApB,EAA6BP,QAAQ,CAACgB,IAAtC,CALI,EAMrBP,cANqB,EAOrB,CAACK,KAAD,EAAQC,EAAR,KAAe;AACd,gBAAME,IAAI,GAAGP,OAAO,CAACO,IAArB;AACAP,UAAAA,OAAO,CAACQ,GAAR,CAAa,GAAEH,EAAG,EAAlB;AACA,cAAIE,IAAI,KAAKP,OAAO,CAACO,IAArB,EAA2B,OAAO,KAAP;AAC3BH,UAAAA,KAAK,CAACC,EAAN,GAAWA,EAAX;AACAD,UAAAA,KAAK,CAACK,GAAN,GAAY,CAACJ,EAAD,CAAZ;AACA,iBAAO,IAAP;AACA,SAdoB,EAerB,CAACK,IAAI,CAACC,GAAL,CAAS,EAAT,EAAab,SAAb,CAAD,CAfqB,EAgBrB,EAhBqB,EAiBrBE,OAAO,CAACO,IAjBa,CAAtB;AAmBA,OA/BF;AAiCA,KApCF;AAsCA;;AAjDgC;;AAoDlCK,MAAM,CAACC,OAAP,GAAiB3B,2BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\n\"use strict\";\n\nconst { compareChunksNatural } = require(\"../util/comparators\");\nconst {\n\tgetFullChunkName,\n\tgetUsedChunkIds,\n\tassignDeterministicIds\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass DeterministicChunkIdsPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DeterministicChunkIdsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.chunkIds.tap(\n\t\t\t\t\t\"DeterministicChunkIdsPlugin\",\n\t\t\t\t\tchunks => {\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tconst context = this.options.context\n\t\t\t\t\t\t\t? this.options.context\n\t\t\t\t\t\t\t: compiler.context;\n\t\t\t\t\t\tconst maxLength = this.options.maxLength || 3;\n\n\t\t\t\t\t\tconst compareNatural = compareChunksNatural(chunkGraph);\n\n\t\t\t\t\t\tconst usedIds = getUsedChunkIds(compilation);\n\t\t\t\t\t\tassignDeterministicIds(\n\t\t\t\t\t\t\tArray.from(chunks).filter(chunk => {\n\t\t\t\t\t\t\t\treturn chunk.id === null;\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tchunk =>\n\t\t\t\t\t\t\t\tgetFullChunkName(chunk, chunkGraph, context, compiler.root),\n\t\t\t\t\t\t\tcompareNatural,\n\t\t\t\t\t\t\t(chunk, id) => {\n\t\t\t\t\t\t\t\tconst size = usedIds.size;\n\t\t\t\t\t\t\t\tusedIds.add(`${id}`);\n\t\t\t\t\t\t\t\tif (size === usedIds.size) return false;\n\t\t\t\t\t\t\t\tchunk.id = id;\n\t\t\t\t\t\t\t\tchunk.ids = [id];\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t[Math.pow(10, maxLength)],\n\t\t\t\t\t\t\t10,\n\t\t\t\t\t\t\tusedIds.size\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = DeterministicChunkIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}