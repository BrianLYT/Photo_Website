{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  Parser: AcornParser\n} = require(\"acorn\");\n\nconst {\n  importAssertions\n} = require(\"acorn-import-assertions\");\n\nconst {\n  SyncBailHook,\n  HookMap\n} = require(\"tapable\");\n\nconst vm = require(\"vm\");\n\nconst Parser = require(\"../Parser\");\n\nconst StackedMap = require(\"../util/StackedMap\");\n\nconst binarySearchBounds = require(\"../util/binarySearchBounds\");\n\nconst memoize = require(\"../util/memoize\");\n\nconst BasicEvaluatedExpression = require(\"./BasicEvaluatedExpression\");\n/** @typedef {import(\"acorn\").Options} AcornOptions */\n\n/** @typedef {import(\"estree\").ArrayExpression} ArrayExpressionNode */\n\n/** @typedef {import(\"estree\").BinaryExpression} BinaryExpressionNode */\n\n/** @typedef {import(\"estree\").BlockStatement} BlockStatementNode */\n\n/** @typedef {import(\"estree\").SequenceExpression} SequenceExpressionNode */\n\n/** @typedef {import(\"estree\").CallExpression} CallExpressionNode */\n\n/** @typedef {import(\"estree\").ClassDeclaration} ClassDeclarationNode */\n\n/** @typedef {import(\"estree\").ClassExpression} ClassExpressionNode */\n\n/** @typedef {import(\"estree\").Comment} CommentNode */\n\n/** @typedef {import(\"estree\").ConditionalExpression} ConditionalExpressionNode */\n\n/** @typedef {import(\"estree\").Declaration} DeclarationNode */\n\n/** @typedef {import(\"estree\").PrivateIdentifier} PrivateIdentifierNode */\n\n/** @typedef {import(\"estree\").PropertyDefinition} PropertyDefinitionNode */\n\n/** @typedef {import(\"estree\").Expression} ExpressionNode */\n\n/** @typedef {import(\"estree\").Identifier} IdentifierNode */\n\n/** @typedef {import(\"estree\").IfStatement} IfStatementNode */\n\n/** @typedef {import(\"estree\").LabeledStatement} LabeledStatementNode */\n\n/** @typedef {import(\"estree\").Literal} LiteralNode */\n\n/** @typedef {import(\"estree\").LogicalExpression} LogicalExpressionNode */\n\n/** @typedef {import(\"estree\").ChainExpression} ChainExpressionNode */\n\n/** @typedef {import(\"estree\").MemberExpression} MemberExpressionNode */\n\n/** @typedef {import(\"estree\").MetaProperty} MetaPropertyNode */\n\n/** @typedef {import(\"estree\").MethodDefinition} MethodDefinitionNode */\n\n/** @typedef {import(\"estree\").ModuleDeclaration} ModuleDeclarationNode */\n\n/** @typedef {import(\"estree\").NewExpression} NewExpressionNode */\n\n/** @typedef {import(\"estree\").Node} AnyNode */\n\n/** @typedef {import(\"estree\").Program} ProgramNode */\n\n/** @typedef {import(\"estree\").Statement} StatementNode */\n\n/** @typedef {import(\"estree\").ImportDeclaration} ImportDeclarationNode */\n\n/** @typedef {import(\"estree\").ExportNamedDeclaration} ExportNamedDeclarationNode */\n\n/** @typedef {import(\"estree\").ExportDefaultDeclaration} ExportDefaultDeclarationNode */\n\n/** @typedef {import(\"estree\").ExportAllDeclaration} ExportAllDeclarationNode */\n\n/** @typedef {import(\"estree\").Super} SuperNode */\n\n/** @typedef {import(\"estree\").TaggedTemplateExpression} TaggedTemplateExpressionNode */\n\n/** @typedef {import(\"estree\").TemplateLiteral} TemplateLiteralNode */\n\n/** @typedef {import(\"estree\").ThisExpression} ThisExpressionNode */\n\n/** @typedef {import(\"estree\").UnaryExpression} UnaryExpressionNode */\n\n/** @typedef {import(\"estree\").VariableDeclarator} VariableDeclaratorNode */\n\n/** @template T @typedef {import(\"tapable\").AsArray<T>} AsArray<T> */\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\n/** @typedef {{declaredScope: ScopeInfo, freeName: string | true, tagInfo: TagInfo | undefined}} VariableInfoInterface */\n\n/** @typedef {{ name: string | VariableInfo, rootInfo: string | VariableInfo, getMembers: () => string[] }} GetInfoResult */\n\n\nconst EMPTY_ARRAY = [];\nconst ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = 0b01;\nconst ALLOWED_MEMBER_TYPES_EXPRESSION = 0b10;\nconst ALLOWED_MEMBER_TYPES_ALL = 0b11; // Syntax: https://developer.mozilla.org/en/SpiderMonkey/Parser_API\n\nconst parser = AcornParser.extend(importAssertions);\n\nclass VariableInfo {\n  /**\n   * @param {ScopeInfo} declaredScope scope in which the variable is declared\n   * @param {string | true} freeName which free name the variable aliases, or true when none\n   * @param {TagInfo | undefined} tagInfo info about tags\n   */\n  constructor(declaredScope, freeName, tagInfo) {\n    this.declaredScope = declaredScope;\n    this.freeName = freeName;\n    this.tagInfo = tagInfo;\n  }\n\n}\n/** @typedef {string | ScopeInfo | VariableInfo} ExportedVariableInfo */\n\n/** @typedef {LiteralNode | string | null | undefined} ImportSource */\n\n/** @typedef {Omit<AcornOptions, \"sourceType\" | \"ecmaVersion\"> & { sourceType: \"module\" | \"script\" | \"auto\", ecmaVersion?: AcornOptions[\"ecmaVersion\"] }} ParseOptions */\n\n/**\n * @typedef {Object} TagInfo\n * @property {any} tag\n * @property {any} data\n * @property {TagInfo | undefined} next\n */\n\n/**\n * @typedef {Object} ScopeInfo\n * @property {StackedMap<string, VariableInfo | ScopeInfo>} definitions\n * @property {boolean | \"arrow\"} topLevelScope\n * @property {boolean} inShorthand\n * @property {boolean} isStrict\n * @property {boolean} isAsmJs\n * @property {boolean} inTry\n */\n\n\nconst joinRanges = (startRange, endRange) => {\n  if (!endRange) return startRange;\n  if (!startRange) return endRange;\n  return [startRange[0], endRange[1]];\n};\n\nconst objectAndMembersToName = (object, membersReversed) => {\n  let name = object;\n\n  for (let i = membersReversed.length - 1; i >= 0; i--) {\n    name = name + \".\" + membersReversed[i];\n  }\n\n  return name;\n};\n\nconst getRootName = expression => {\n  switch (expression.type) {\n    case \"Identifier\":\n      return expression.name;\n\n    case \"ThisExpression\":\n      return \"this\";\n\n    case \"MetaProperty\":\n      return `${expression.meta.name}.${expression.property.name}`;\n\n    default:\n      return undefined;\n  }\n};\n/** @type {AcornOptions} */\n\n\nconst defaultParserOptions = {\n  ranges: true,\n  locations: true,\n  ecmaVersion: \"latest\",\n  sourceType: \"module\",\n  // https://github.com/tc39/proposal-hashbang\n  allowHashBang: true,\n  onComment: null\n}; // regexp to match at least one \"magic comment\"\n\nconst webpackCommentRegExp = new RegExp(/(^|\\W)webpack[A-Z]{1,}[A-Za-z]{1,}:/);\nconst EMPTY_COMMENT_OPTIONS = {\n  options: null,\n  errors: null\n};\n\nclass JavascriptParser extends Parser {\n  /**\n   * @param {\"module\" | \"script\" | \"auto\"} sourceType default source type\n   */\n  constructor() {\n    let sourceType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"auto\";\n    super();\n    this.hooks = Object.freeze({\n      /** @type {HookMap<SyncBailHook<[UnaryExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateTypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluate: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** @type {HookMap<SyncBailHook<[IdentifierNode | ThisExpressionNode | MemberExpressionNode | MetaPropertyNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** @type {HookMap<SyncBailHook<[IdentifierNode | ThisExpressionNode | MemberExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateDefinedIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** @type {HookMap<SyncBailHook<[CallExpressionNode, BasicEvaluatedExpression | undefined], BasicEvaluatedExpression | undefined | null>>} */\n      evaluateCallExpressionMember: new HookMap(() => new SyncBailHook([\"expression\", \"param\"])),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode | DeclarationNode | PrivateIdentifierNode, number], boolean | void>>} */\n      isPure: new HookMap(() => new SyncBailHook([\"expression\", \"commentsStartPosition\"])),\n\n      /** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n      preStatement: new SyncBailHook([\"statement\"]),\n\n      /** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n      blockPreStatement: new SyncBailHook([\"declaration\"]),\n\n      /** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n      statement: new SyncBailHook([\"statement\"]),\n\n      /** @type {SyncBailHook<[IfStatementNode], boolean | void>} */\n      statementIf: new SyncBailHook([\"statement\"]),\n\n      /** @type {SyncBailHook<[ExpressionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n      classExtendsExpression: new SyncBailHook([\"expression\", \"classDefinition\"]),\n\n      /** @type {SyncBailHook<[MethodDefinitionNode | PropertyDefinitionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n      classBodyElement: new SyncBailHook([\"element\", \"classDefinition\"]),\n\n      /** @type {SyncBailHook<[ExpressionNode, MethodDefinitionNode | PropertyDefinitionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n      classBodyValue: new SyncBailHook([\"expression\", \"element\", \"classDefinition\"]),\n\n      /** @type {HookMap<SyncBailHook<[LabeledStatementNode], boolean | void>>} */\n      label: new HookMap(() => new SyncBailHook([\"statement\"])),\n\n      /** @type {SyncBailHook<[ImportDeclarationNode, ImportSource], boolean | void>} */\n      import: new SyncBailHook([\"statement\", \"source\"]),\n\n      /** @type {SyncBailHook<[ImportDeclarationNode, ImportSource, string, string], boolean | void>} */\n      importSpecifier: new SyncBailHook([\"statement\", \"source\", \"exportName\", \"identifierName\"]),\n\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode], boolean | void>} */\n      export: new SyncBailHook([\"statement\"]),\n\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, ImportSource], boolean | void>} */\n      exportImport: new SyncBailHook([\"statement\", \"source\"]),\n\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, DeclarationNode], boolean | void>} */\n      exportDeclaration: new SyncBailHook([\"statement\", \"declaration\"]),\n\n      /** @type {SyncBailHook<[ExportDefaultDeclarationNode, DeclarationNode], boolean | void>} */\n      exportExpression: new SyncBailHook([\"statement\", \"declaration\"]),\n\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, string, string, number | undefined], boolean | void>} */\n      exportSpecifier: new SyncBailHook([\"statement\", \"identifierName\", \"exportName\", \"index\"]),\n\n      /** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, ImportSource, string, string, number | undefined], boolean | void>} */\n      exportImportSpecifier: new SyncBailHook([\"statement\", \"source\", \"identifierName\", \"exportName\", \"index\"]),\n\n      /** @type {SyncBailHook<[VariableDeclaratorNode, StatementNode], boolean | void>} */\n      preDeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n\n      /** @type {SyncBailHook<[VariableDeclaratorNode, StatementNode], boolean | void>} */\n      declarator: new SyncBailHook([\"declarator\", \"statement\"]),\n\n      /** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n      varDeclaration: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\n      /** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n      varDeclarationLet: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\n      /** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n      varDeclarationConst: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\n      /** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n      varDeclarationVar: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\n      /** @type {HookMap<SyncBailHook<[IdentifierNode], boolean | void>>} */\n      pattern: new HookMap(() => new SyncBailHook([\"pattern\"])),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      canRename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      rename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n\n      /** @type {HookMap<SyncBailHook<[import(\"estree\").AssignmentExpression], boolean | void>>} */\n      assign: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** @type {HookMap<SyncBailHook<[import(\"estree\").AssignmentExpression, string[]], boolean | void>>} */\n      assignMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\"])),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      typeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n      importCall: new SyncBailHook([\"expression\"]),\n\n      /** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n      topLevelAwait: new SyncBailHook([\"expression\"]),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      call: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** Something like \"a.b()\" */\n\n      /** @type {HookMap<SyncBailHook<[CallExpressionNode, string[]], boolean | void>>} */\n      callMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\"])),\n\n      /** Something like \"a.b().c.d\" */\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode, string[], CallExpressionNode, string[]], boolean | void>>} */\n      memberChainOfCallMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"calleeMembers\", \"callExpression\", \"members\"])),\n\n      /** Something like \"a.b().c.d()\"\" */\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode, string[], CallExpressionNode, string[]], boolean | void>>} */\n      callMemberChainOfCallMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"calleeMembers\", \"innerCallExpression\", \"members\"])),\n\n      /** @type {SyncBailHook<[ChainExpressionNode], boolean | void>} */\n      optionalChaining: new SyncBailHook([\"optionalChaining\"]),\n\n      /** @type {HookMap<SyncBailHook<[NewExpressionNode], boolean | void>>} */\n      new: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n      expression: new HookMap(() => new SyncBailHook([\"expression\"])),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode, string[]], boolean | void>>} */\n      expressionMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\"])),\n\n      /** @type {HookMap<SyncBailHook<[ExpressionNode, string[]], boolean | void>>} */\n      unhandledExpressionMemberChain: new HookMap(() => new SyncBailHook([\"expression\", \"members\"])),\n\n      /** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n      expressionConditionalOperator: new SyncBailHook([\"expression\"]),\n\n      /** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n      expressionLogicalOperator: new SyncBailHook([\"expression\"]),\n\n      /** @type {SyncBailHook<[ProgramNode, CommentNode[]], boolean | void>} */\n      program: new SyncBailHook([\"ast\", \"comments\"]),\n\n      /** @type {SyncBailHook<[ProgramNode, CommentNode[]], boolean | void>} */\n      finish: new SyncBailHook([\"ast\", \"comments\"])\n    });\n    this.sourceType = sourceType;\n    /** @type {ScopeInfo} */\n\n    this.scope = undefined;\n    /** @type {ParserState} */\n\n    this.state = undefined;\n    this.comments = undefined;\n    this.semicolons = undefined;\n    /** @type {(StatementNode|ExpressionNode)[]} */\n\n    this.statementPath = undefined;\n    this.prevStatement = undefined;\n    this.currentTagData = undefined;\n\n    this._initializeEvaluating();\n  }\n\n  _initializeEvaluating() {\n    this.hooks.evaluate.for(\"Literal\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {LiteralNode} */\n      _expr;\n\n      switch (typeof expr.value) {\n        case \"number\":\n          return new BasicEvaluatedExpression().setNumber(expr.value).setRange(expr.range);\n\n        case \"bigint\":\n          return new BasicEvaluatedExpression().setBigInt(expr.value).setRange(expr.range);\n\n        case \"string\":\n          return new BasicEvaluatedExpression().setString(expr.value).setRange(expr.range);\n\n        case \"boolean\":\n          return new BasicEvaluatedExpression().setBoolean(expr.value).setRange(expr.range);\n      }\n\n      if (expr.value === null) {\n        return new BasicEvaluatedExpression().setNull().setRange(expr.range);\n      }\n\n      if (expr.value instanceof RegExp) {\n        return new BasicEvaluatedExpression().setRegExp(expr.value).setRange(expr.range);\n      }\n    });\n    this.hooks.evaluate.for(\"NewExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {NewExpressionNode} */\n      _expr;\n      const callee = expr.callee;\n      if (callee.type !== \"Identifier\" || callee.name !== \"RegExp\" || expr.arguments.length > 2 || this.getVariableInfo(\"RegExp\") !== \"RegExp\") return;\n      let regExp, flags;\n      const arg1 = expr.arguments[0];\n\n      if (arg1) {\n        if (arg1.type === \"SpreadElement\") return;\n        const evaluatedRegExp = this.evaluateExpression(arg1);\n        if (!evaluatedRegExp) return;\n        regExp = evaluatedRegExp.asString();\n        if (!regExp) return;\n      } else {\n        return new BasicEvaluatedExpression().setRegExp(new RegExp(\"\")).setRange(expr.range);\n      }\n\n      const arg2 = expr.arguments[1];\n\n      if (arg2) {\n        if (arg2.type === \"SpreadElement\") return;\n        const evaluatedFlags = this.evaluateExpression(arg2);\n        if (!evaluatedFlags) return;\n\n        if (!evaluatedFlags.isUndefined()) {\n          flags = evaluatedFlags.asString();\n          if (flags === undefined || !BasicEvaluatedExpression.isValidRegExpFlags(flags)) return;\n        }\n      }\n\n      return new BasicEvaluatedExpression().setRegExp(flags ? new RegExp(regExp, flags) : new RegExp(regExp)).setRange(expr.range);\n    });\n    this.hooks.evaluate.for(\"LogicalExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {LogicalExpressionNode} */\n      _expr;\n      const left = this.evaluateExpression(expr.left);\n      if (!left) return;\n      let returnRight = false;\n      /** @type {boolean|undefined} */\n\n      let allowedRight;\n\n      if (expr.operator === \"&&\") {\n        const leftAsBool = left.asBool();\n        if (leftAsBool === false) return left.setRange(expr.range);\n        returnRight = leftAsBool === true;\n        allowedRight = false;\n      } else if (expr.operator === \"||\") {\n        const leftAsBool = left.asBool();\n        if (leftAsBool === true) return left.setRange(expr.range);\n        returnRight = leftAsBool === false;\n        allowedRight = true;\n      } else if (expr.operator === \"??\") {\n        const leftAsNullish = left.asNullish();\n        if (leftAsNullish === false) return left.setRange(expr.range);\n        if (leftAsNullish !== true) return;\n        returnRight = true;\n      } else return;\n\n      const right = this.evaluateExpression(expr.right);\n      if (!right) return;\n\n      if (returnRight) {\n        if (left.couldHaveSideEffects()) right.setSideEffects();\n        return right.setRange(expr.range);\n      }\n\n      const asBool = right.asBool();\n\n      if (allowedRight === true && asBool === true) {\n        return new BasicEvaluatedExpression().setRange(expr.range).setTruthy();\n      } else if (allowedRight === false && asBool === false) {\n        return new BasicEvaluatedExpression().setRange(expr.range).setFalsy();\n      }\n    });\n\n    const valueAsExpression = (value, expr, sideEffects) => {\n      switch (typeof value) {\n        case \"boolean\":\n          return new BasicEvaluatedExpression().setBoolean(value).setSideEffects(sideEffects).setRange(expr.range);\n\n        case \"number\":\n          return new BasicEvaluatedExpression().setNumber(value).setSideEffects(sideEffects).setRange(expr.range);\n\n        case \"bigint\":\n          return new BasicEvaluatedExpression().setBigInt(value).setSideEffects(sideEffects).setRange(expr.range);\n\n        case \"string\":\n          return new BasicEvaluatedExpression().setString(value).setSideEffects(sideEffects).setRange(expr.range);\n      }\n    };\n\n    this.hooks.evaluate.for(\"BinaryExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {BinaryExpressionNode} */\n      _expr;\n\n      const handleConstOperation = fn => {\n        const left = this.evaluateExpression(expr.left);\n        if (!left || !left.isCompileTimeValue()) return;\n        const right = this.evaluateExpression(expr.right);\n        if (!right || !right.isCompileTimeValue()) return;\n        const result = fn(left.asCompileTimeValue(), right.asCompileTimeValue());\n        return valueAsExpression(result, expr, left.couldHaveSideEffects() || right.couldHaveSideEffects());\n      };\n\n      const isAlwaysDifferent = (a, b) => a === true && b === false || a === false && b === true;\n\n      const handleTemplateStringCompare = (left, right, res, eql) => {\n        const getPrefix = parts => {\n          let value = \"\";\n\n          for (const p of parts) {\n            const v = p.asString();\n            if (v !== undefined) value += v;else break;\n          }\n\n          return value;\n        };\n\n        const getSuffix = parts => {\n          let value = \"\";\n\n          for (let i = parts.length - 1; i >= 0; i--) {\n            const v = parts[i].asString();\n            if (v !== undefined) value = v + value;else break;\n          }\n\n          return value;\n        };\n\n        const leftPrefix = getPrefix(left.parts);\n        const rightPrefix = getPrefix(right.parts);\n        const leftSuffix = getSuffix(left.parts);\n        const rightSuffix = getSuffix(right.parts);\n        const lenPrefix = Math.min(leftPrefix.length, rightPrefix.length);\n        const lenSuffix = Math.min(leftSuffix.length, rightSuffix.length);\n\n        if (leftPrefix.slice(0, lenPrefix) !== rightPrefix.slice(0, lenPrefix) || leftSuffix.slice(-lenSuffix) !== rightSuffix.slice(-lenSuffix)) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n      };\n\n      const handleStrictEqualityComparison = eql => {\n        const left = this.evaluateExpression(expr.left);\n        if (!left) return;\n        const right = this.evaluateExpression(expr.right);\n        if (!right) return;\n        const res = new BasicEvaluatedExpression();\n        res.setRange(expr.range);\n        const leftConst = left.isCompileTimeValue();\n        const rightConst = right.isCompileTimeValue();\n\n        if (leftConst && rightConst) {\n          return res.setBoolean(eql === (left.asCompileTimeValue() === right.asCompileTimeValue())).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n\n        if (left.isArray() && right.isArray()) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n\n        if (left.isTemplateString() && right.isTemplateString()) {\n          return handleTemplateStringCompare(left, right, res, eql);\n        }\n\n        const leftPrimitive = left.isPrimitiveType();\n        const rightPrimitive = right.isPrimitiveType();\n\n        if ( // Primitive !== Object or\n        // compile-time object types are never equal to something at runtime\n        leftPrimitive === false && (leftConst || rightPrimitive === true) || rightPrimitive === false && (rightConst || leftPrimitive === true) || // Different nullish or boolish status also means not equal\n        isAlwaysDifferent(left.asBool(), right.asBool()) || isAlwaysDifferent(left.asNullish(), right.asNullish())) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n      };\n\n      const handleAbstractEqualityComparison = eql => {\n        const left = this.evaluateExpression(expr.left);\n        if (!left) return;\n        const right = this.evaluateExpression(expr.right);\n        if (!right) return;\n        const res = new BasicEvaluatedExpression();\n        res.setRange(expr.range);\n        const leftConst = left.isCompileTimeValue();\n        const rightConst = right.isCompileTimeValue();\n\n        if (leftConst && rightConst) {\n          return res.setBoolean(eql === ( // eslint-disable-next-line eqeqeq\n          left.asCompileTimeValue() == right.asCompileTimeValue())).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n\n        if (left.isArray() && right.isArray()) {\n          return res.setBoolean(!eql).setSideEffects(left.couldHaveSideEffects() || right.couldHaveSideEffects());\n        }\n\n        if (left.isTemplateString() && right.isTemplateString()) {\n          return handleTemplateStringCompare(left, right, res, eql);\n        }\n      };\n\n      if (expr.operator === \"+\") {\n        const left = this.evaluateExpression(expr.left);\n        if (!left) return;\n        const right = this.evaluateExpression(expr.right);\n        if (!right) return;\n        const res = new BasicEvaluatedExpression();\n\n        if (left.isString()) {\n          if (right.isString()) {\n            res.setString(left.string + right.string);\n          } else if (right.isNumber()) {\n            res.setString(left.string + right.number);\n          } else if (right.isWrapped() && right.prefix && right.prefix.isString()) {\n            // \"left\" + (\"prefix\" + inner + \"postfix\")\n            // => (\"leftPrefix\" + inner + \"postfix\")\n            res.setWrapped(new BasicEvaluatedExpression().setString(left.string + right.prefix.string).setRange(joinRanges(left.range, right.prefix.range)), right.postfix, right.wrappedInnerExpressions);\n          } else if (right.isWrapped()) {\n            // \"left\" + ([null] + inner + \"postfix\")\n            // => (\"left\" + inner + \"postfix\")\n            res.setWrapped(left, right.postfix, right.wrappedInnerExpressions);\n          } else {\n            // \"left\" + expr\n            // => (\"left\" + expr + \"\")\n            res.setWrapped(left, null, [right]);\n          }\n        } else if (left.isNumber()) {\n          if (right.isString()) {\n            res.setString(left.number + right.string);\n          } else if (right.isNumber()) {\n            res.setNumber(left.number + right.number);\n          } else {\n            return;\n          }\n        } else if (left.isBigInt()) {\n          if (right.isBigInt()) {\n            res.setBigInt(left.bigint + right.bigint);\n          }\n        } else if (left.isWrapped()) {\n          if (left.postfix && left.postfix.isString() && right.isString()) {\n            // (\"prefix\" + inner + \"postfix\") + \"right\"\n            // => (\"prefix\" + inner + \"postfixRight\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString(left.postfix.string + right.string).setRange(joinRanges(left.postfix.range, right.range)), left.wrappedInnerExpressions);\n          } else if (left.postfix && left.postfix.isString() && right.isNumber()) {\n            // (\"prefix\" + inner + \"postfix\") + 123\n            // => (\"prefix\" + inner + \"postfix123\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString(left.postfix.string + right.number).setRange(joinRanges(left.postfix.range, right.range)), left.wrappedInnerExpressions);\n          } else if (right.isString()) {\n            // (\"prefix\" + inner + [null]) + \"right\"\n            // => (\"prefix\" + inner + \"right\")\n            res.setWrapped(left.prefix, right, left.wrappedInnerExpressions);\n          } else if (right.isNumber()) {\n            // (\"prefix\" + inner + [null]) + 123\n            // => (\"prefix\" + inner + \"123\")\n            res.setWrapped(left.prefix, new BasicEvaluatedExpression().setString(right.number + \"\").setRange(right.range), left.wrappedInnerExpressions);\n          } else if (right.isWrapped()) {\n            // (\"prefix1\" + inner1 + \"postfix1\") + (\"prefix2\" + inner2 + \"postfix2\")\n            // (\"prefix1\" + inner1 + \"postfix1\" + \"prefix2\" + inner2 + \"postfix2\")\n            res.setWrapped(left.prefix, right.postfix, left.wrappedInnerExpressions && right.wrappedInnerExpressions && left.wrappedInnerExpressions.concat(left.postfix ? [left.postfix] : []).concat(right.prefix ? [right.prefix] : []).concat(right.wrappedInnerExpressions));\n          } else {\n            // (\"prefix\" + inner + postfix) + expr\n            // => (\"prefix\" + inner + postfix + expr + [null])\n            res.setWrapped(left.prefix, null, left.wrappedInnerExpressions && left.wrappedInnerExpressions.concat(left.postfix ? [left.postfix, right] : [right]));\n          }\n        } else {\n          if (right.isString()) {\n            // left + \"right\"\n            // => ([null] + left + \"right\")\n            res.setWrapped(null, right, [left]);\n          } else if (right.isWrapped()) {\n            // left + (prefix + inner + \"postfix\")\n            // => ([null] + left + prefix + inner + \"postfix\")\n            res.setWrapped(null, right.postfix, right.wrappedInnerExpressions && (right.prefix ? [left, right.prefix] : [left]).concat(right.wrappedInnerExpressions));\n          } else {\n            return;\n          }\n        }\n\n        if (left.couldHaveSideEffects() || right.couldHaveSideEffects()) res.setSideEffects();\n        res.setRange(expr.range);\n        return res;\n      } else if (expr.operator === \"-\") {\n        return handleConstOperation((l, r) => l - r);\n      } else if (expr.operator === \"*\") {\n        return handleConstOperation((l, r) => l * r);\n      } else if (expr.operator === \"/\") {\n        return handleConstOperation((l, r) => l / r);\n      } else if (expr.operator === \"**\") {\n        return handleConstOperation((l, r) => l ** r);\n      } else if (expr.operator === \"===\") {\n        return handleStrictEqualityComparison(true);\n      } else if (expr.operator === \"==\") {\n        return handleAbstractEqualityComparison(true);\n      } else if (expr.operator === \"!==\") {\n        return handleStrictEqualityComparison(false);\n      } else if (expr.operator === \"!=\") {\n        return handleAbstractEqualityComparison(false);\n      } else if (expr.operator === \"&\") {\n        return handleConstOperation((l, r) => l & r);\n      } else if (expr.operator === \"|\") {\n        return handleConstOperation((l, r) => l | r);\n      } else if (expr.operator === \"^\") {\n        return handleConstOperation((l, r) => l ^ r);\n      } else if (expr.operator === \">>>\") {\n        return handleConstOperation((l, r) => l >>> r);\n      } else if (expr.operator === \">>\") {\n        return handleConstOperation((l, r) => l >> r);\n      } else if (expr.operator === \"<<\") {\n        return handleConstOperation((l, r) => l << r);\n      } else if (expr.operator === \"<\") {\n        return handleConstOperation((l, r) => l < r);\n      } else if (expr.operator === \">\") {\n        return handleConstOperation((l, r) => l > r);\n      } else if (expr.operator === \"<=\") {\n        return handleConstOperation((l, r) => l <= r);\n      } else if (expr.operator === \">=\") {\n        return handleConstOperation((l, r) => l >= r);\n      }\n    });\n    this.hooks.evaluate.for(\"UnaryExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {UnaryExpressionNode} */\n      _expr;\n\n      const handleConstOperation = fn => {\n        const argument = this.evaluateExpression(expr.argument);\n        if (!argument || !argument.isCompileTimeValue()) return;\n        const result = fn(argument.asCompileTimeValue());\n        return valueAsExpression(result, expr, argument.couldHaveSideEffects());\n      };\n\n      if (expr.operator === \"typeof\") {\n        switch (expr.argument.type) {\n          case \"Identifier\":\n            {\n              const res = this.callHooksForName(this.hooks.evaluateTypeof, expr.argument.name, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n\n          case \"MetaProperty\":\n            {\n              const res = this.callHooksForName(this.hooks.evaluateTypeof, getRootName(expr.argument), expr);\n              if (res !== undefined) return res;\n              break;\n            }\n\n          case \"MemberExpression\":\n            {\n              const res = this.callHooksForExpression(this.hooks.evaluateTypeof, expr.argument, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n\n          case \"ChainExpression\":\n            {\n              const res = this.callHooksForExpression(this.hooks.evaluateTypeof, expr.argument.expression, expr);\n              if (res !== undefined) return res;\n              break;\n            }\n\n          case \"FunctionExpression\":\n            {\n              return new BasicEvaluatedExpression().setString(\"function\").setRange(expr.range);\n            }\n        }\n\n        const arg = this.evaluateExpression(expr.argument);\n        if (arg.isUnknown()) return;\n\n        if (arg.isString()) {\n          return new BasicEvaluatedExpression().setString(\"string\").setRange(expr.range);\n        }\n\n        if (arg.isWrapped()) {\n          return new BasicEvaluatedExpression().setString(\"string\").setSideEffects().setRange(expr.range);\n        }\n\n        if (arg.isUndefined()) {\n          return new BasicEvaluatedExpression().setString(\"undefined\").setRange(expr.range);\n        }\n\n        if (arg.isNumber()) {\n          return new BasicEvaluatedExpression().setString(\"number\").setRange(expr.range);\n        }\n\n        if (arg.isBigInt()) {\n          return new BasicEvaluatedExpression().setString(\"bigint\").setRange(expr.range);\n        }\n\n        if (arg.isBoolean()) {\n          return new BasicEvaluatedExpression().setString(\"boolean\").setRange(expr.range);\n        }\n\n        if (arg.isConstArray() || arg.isRegExp() || arg.isNull()) {\n          return new BasicEvaluatedExpression().setString(\"object\").setRange(expr.range);\n        }\n\n        if (arg.isArray()) {\n          return new BasicEvaluatedExpression().setString(\"object\").setSideEffects(arg.couldHaveSideEffects()).setRange(expr.range);\n        }\n      } else if (expr.operator === \"!\") {\n        const argument = this.evaluateExpression(expr.argument);\n        if (!argument) return;\n        const bool = argument.asBool();\n        if (typeof bool !== \"boolean\") return;\n        return new BasicEvaluatedExpression().setBoolean(!bool).setSideEffects(argument.couldHaveSideEffects()).setRange(expr.range);\n      } else if (expr.operator === \"~\") {\n        return handleConstOperation(v => ~v);\n      } else if (expr.operator === \"+\") {\n        return handleConstOperation(v => +v);\n      } else if (expr.operator === \"-\") {\n        return handleConstOperation(v => -v);\n      }\n    });\n    this.hooks.evaluateTypeof.for(\"undefined\").tap(\"JavascriptParser\", expr => {\n      return new BasicEvaluatedExpression().setString(\"undefined\").setRange(expr.range);\n    });\n    this.hooks.evaluate.for(\"Identifier\").tap(\"JavascriptParser\", expr => {\n      if (\n      /** @type {IdentifierNode} */\n      expr.name === \"undefined\") {\n        return new BasicEvaluatedExpression().setUndefined().setRange(expr.range);\n      }\n    });\n    /**\n     * @param {string} exprType expression type name\n     * @param {function(ExpressionNode): GetInfoResult | undefined} getInfo get info\n     * @returns {void}\n     */\n\n    const tapEvaluateWithVariableInfo = (exprType, getInfo) => {\n      /** @type {ExpressionNode | undefined} */\n      let cachedExpression = undefined;\n      /** @type {GetInfoResult | undefined} */\n\n      let cachedInfo = undefined;\n      this.hooks.evaluate.for(exprType).tap(\"JavascriptParser\", expr => {\n        const expression =\n        /** @type {MemberExpressionNode} */\n        expr;\n        const info = getInfo(expr);\n\n        if (info !== undefined) {\n          return this.callHooksForInfoWithFallback(this.hooks.evaluateIdentifier, info.name, name => {\n            cachedExpression = expression;\n            cachedInfo = info;\n          }, name => {\n            const hook = this.hooks.evaluateDefinedIdentifier.get(name);\n\n            if (hook !== undefined) {\n              return hook.call(expression);\n            }\n          }, expression);\n        }\n      });\n      this.hooks.evaluate.for(exprType).tap({\n        name: \"JavascriptParser\",\n        stage: 100\n      }, expr => {\n        const info = cachedExpression === expr ? cachedInfo : getInfo(expr);\n\n        if (info !== undefined) {\n          return new BasicEvaluatedExpression().setIdentifier(info.name, info.rootInfo, info.getMembers).setRange(expr.range);\n        }\n      });\n      this.hooks.finish.tap(\"JavascriptParser\", () => {\n        // Cleanup for GC\n        cachedExpression = cachedInfo = undefined;\n      });\n    };\n\n    tapEvaluateWithVariableInfo(\"Identifier\", expr => {\n      const info = this.getVariableInfo(\n      /** @type {IdentifierNode} */\n      expr.name);\n\n      if (typeof info === \"string\" || info instanceof VariableInfo && typeof info.freeName === \"string\") {\n        return {\n          name: info,\n          rootInfo: info,\n          getMembers: () => []\n        };\n      }\n    });\n    tapEvaluateWithVariableInfo(\"ThisExpression\", expr => {\n      const info = this.getVariableInfo(\"this\");\n\n      if (typeof info === \"string\" || info instanceof VariableInfo && typeof info.freeName === \"string\") {\n        return {\n          name: info,\n          rootInfo: info,\n          getMembers: () => []\n        };\n      }\n    });\n    this.hooks.evaluate.for(\"MetaProperty\").tap(\"JavascriptParser\", expr => {\n      const metaProperty =\n      /** @type {MetaPropertyNode} */\n      expr;\n      return this.callHooksForName(this.hooks.evaluateIdentifier, getRootName(expr), metaProperty);\n    });\n    tapEvaluateWithVariableInfo(\"MemberExpression\", expr => this.getMemberExpressionInfo(\n    /** @type {MemberExpressionNode} */\n    expr, ALLOWED_MEMBER_TYPES_EXPRESSION));\n    this.hooks.evaluate.for(\"CallExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {CallExpressionNode} */\n      _expr;\n\n      if (expr.callee.type !== \"MemberExpression\" || expr.callee.property.type !== (expr.callee.computed ? \"Literal\" : \"Identifier\")) {\n        return;\n      } // type Super also possible here\n\n\n      const param = this.evaluateExpression(\n      /** @type {ExpressionNode} */\n      expr.callee.object);\n      if (!param) return;\n      const property = expr.callee.property.type === \"Literal\" ? `${expr.callee.property.value}` : expr.callee.property.name;\n      const hook = this.hooks.evaluateCallExpressionMember.get(property);\n\n      if (hook !== undefined) {\n        return hook.call(expr, param);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"indexOf\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length === 0) return;\n      const [arg1, arg2] = expr.arguments;\n      if (arg1.type === \"SpreadElement\") return;\n      const arg1Eval = this.evaluateExpression(arg1);\n      if (!arg1Eval.isString()) return;\n      const arg1Value = arg1Eval.string;\n      let result;\n\n      if (arg2) {\n        if (arg2.type === \"SpreadElement\") return;\n        const arg2Eval = this.evaluateExpression(arg2);\n        if (!arg2Eval.isNumber()) return;\n        result = param.string.indexOf(arg1Value, arg2Eval.number);\n      } else {\n        result = param.string.indexOf(arg1Value);\n      }\n\n      return new BasicEvaluatedExpression().setNumber(result).setSideEffects(param.couldHaveSideEffects()).setRange(expr.range);\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"replace\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length !== 2) return;\n      if (expr.arguments[0].type === \"SpreadElement\") return;\n      if (expr.arguments[1].type === \"SpreadElement\") return;\n      let arg1 = this.evaluateExpression(expr.arguments[0]);\n      let arg2 = this.evaluateExpression(expr.arguments[1]);\n      if (!arg1.isString() && !arg1.isRegExp()) return;\n      const arg1Value = arg1.regExp || arg1.string;\n      if (!arg2.isString()) return;\n      const arg2Value = arg2.string;\n      return new BasicEvaluatedExpression().setString(param.string.replace(arg1Value, arg2Value)).setSideEffects(param.couldHaveSideEffects()).setRange(expr.range);\n    });\n    [\"substr\", \"substring\", \"slice\"].forEach(fn => {\n      this.hooks.evaluateCallExpressionMember.for(fn).tap(\"JavascriptParser\", (expr, param) => {\n        if (!param.isString()) return;\n        let arg1;\n        let result,\n            str = param.string;\n\n        switch (expr.arguments.length) {\n          case 1:\n            if (expr.arguments[0].type === \"SpreadElement\") return;\n            arg1 = this.evaluateExpression(expr.arguments[0]);\n            if (!arg1.isNumber()) return;\n            result = str[fn](arg1.number);\n            break;\n\n          case 2:\n            {\n              if (expr.arguments[0].type === \"SpreadElement\") return;\n              if (expr.arguments[1].type === \"SpreadElement\") return;\n              arg1 = this.evaluateExpression(expr.arguments[0]);\n              const arg2 = this.evaluateExpression(expr.arguments[1]);\n              if (!arg1.isNumber()) return;\n              if (!arg2.isNumber()) return;\n              result = str[fn](arg1.number, arg2.number);\n              break;\n            }\n\n          default:\n            return;\n        }\n\n        return new BasicEvaluatedExpression().setString(result).setSideEffects(param.couldHaveSideEffects()).setRange(expr.range);\n      });\n    });\n    /**\n     * @param {\"cooked\" | \"raw\"} kind kind of values to get\n     * @param {TemplateLiteralNode} templateLiteralExpr TemplateLiteral expr\n     * @returns {{quasis: BasicEvaluatedExpression[], parts: BasicEvaluatedExpression[]}} Simplified template\n     */\n\n    const getSimplifiedTemplateResult = (kind, templateLiteralExpr) => {\n      /** @type {BasicEvaluatedExpression[]} */\n      const quasis = [];\n      /** @type {BasicEvaluatedExpression[]} */\n\n      const parts = [];\n\n      for (let i = 0; i < templateLiteralExpr.quasis.length; i++) {\n        const quasiExpr = templateLiteralExpr.quasis[i];\n        const quasi = quasiExpr.value[kind];\n\n        if (i > 0) {\n          const prevExpr = parts[parts.length - 1];\n          const expr = this.evaluateExpression(templateLiteralExpr.expressions[i - 1]);\n          const exprAsString = expr.asString();\n\n          if (typeof exprAsString === \"string\" && !expr.couldHaveSideEffects()) {\n            // We can merge quasi + expr + quasi when expr\n            // is a const string\n            prevExpr.setString(prevExpr.string + exprAsString + quasi);\n            prevExpr.setRange([prevExpr.range[0], quasiExpr.range[1]]); // We unset the expression as it doesn't match to a single expression\n\n            prevExpr.setExpression(undefined);\n            continue;\n          }\n\n          parts.push(expr);\n        }\n\n        const part = new BasicEvaluatedExpression().setString(quasi).setRange(quasiExpr.range).setExpression(quasiExpr);\n        quasis.push(part);\n        parts.push(part);\n      }\n\n      return {\n        quasis,\n        parts\n      };\n    };\n\n    this.hooks.evaluate.for(\"TemplateLiteral\").tap(\"JavascriptParser\", _node => {\n      const node =\n      /** @type {TemplateLiteralNode} */\n      _node;\n      const {\n        quasis,\n        parts\n      } = getSimplifiedTemplateResult(\"cooked\", node);\n\n      if (parts.length === 1) {\n        return parts[0].setRange(node.range);\n      }\n\n      return new BasicEvaluatedExpression().setTemplateString(quasis, parts, \"cooked\").setRange(node.range);\n    });\n    this.hooks.evaluate.for(\"TaggedTemplateExpression\").tap(\"JavascriptParser\", _node => {\n      const node =\n      /** @type {TaggedTemplateExpressionNode} */\n      _node;\n      const tag = this.evaluateExpression(node.tag);\n\n      if (tag.isIdentifier() && tag.identifier === \"String.raw\") {\n        const {\n          quasis,\n          parts\n        } = getSimplifiedTemplateResult(\"raw\", node.quasi);\n        return new BasicEvaluatedExpression().setTemplateString(quasis, parts, \"raw\").setRange(node.range);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"concat\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString() && !param.isWrapped()) return;\n      let stringSuffix = null;\n      let hasUnknownParams = false;\n      const innerExpressions = [];\n\n      for (let i = expr.arguments.length - 1; i >= 0; i--) {\n        const arg = expr.arguments[i];\n        if (arg.type === \"SpreadElement\") return;\n        const argExpr = this.evaluateExpression(arg);\n\n        if (hasUnknownParams || !argExpr.isString() && !argExpr.isNumber()) {\n          hasUnknownParams = true;\n          innerExpressions.push(argExpr);\n          continue;\n        }\n\n        const value = argExpr.isString() ? argExpr.string : \"\" + argExpr.number;\n        const newString = value + (stringSuffix ? stringSuffix.string : \"\");\n        const newRange = [argExpr.range[0], (stringSuffix || argExpr).range[1]];\n        stringSuffix = new BasicEvaluatedExpression().setString(newString).setSideEffects(stringSuffix && stringSuffix.couldHaveSideEffects() || argExpr.couldHaveSideEffects()).setRange(newRange);\n      }\n\n      if (hasUnknownParams) {\n        const prefix = param.isString() ? param : param.prefix;\n        const inner = param.isWrapped() && param.wrappedInnerExpressions ? param.wrappedInnerExpressions.concat(innerExpressions.reverse()) : innerExpressions.reverse();\n        return new BasicEvaluatedExpression().setWrapped(prefix, stringSuffix, inner).setRange(expr.range);\n      } else if (param.isWrapped()) {\n        const postfix = stringSuffix || param.postfix;\n        const inner = param.wrappedInnerExpressions ? param.wrappedInnerExpressions.concat(innerExpressions.reverse()) : innerExpressions.reverse();\n        return new BasicEvaluatedExpression().setWrapped(param.prefix, postfix, inner).setRange(expr.range);\n      } else {\n        const newString = param.string + (stringSuffix ? stringSuffix.string : \"\");\n        return new BasicEvaluatedExpression().setString(newString).setSideEffects(stringSuffix && stringSuffix.couldHaveSideEffects() || param.couldHaveSideEffects()).setRange(expr.range);\n      }\n    });\n    this.hooks.evaluateCallExpressionMember.for(\"split\").tap(\"JavascriptParser\", (expr, param) => {\n      if (!param.isString()) return;\n      if (expr.arguments.length !== 1) return;\n      if (expr.arguments[0].type === \"SpreadElement\") return;\n      let result;\n      const arg = this.evaluateExpression(expr.arguments[0]);\n\n      if (arg.isString()) {\n        result = param.string.split(arg.string);\n      } else if (arg.isRegExp()) {\n        result = param.string.split(arg.regExp);\n      } else {\n        return;\n      }\n\n      return new BasicEvaluatedExpression().setArray(result).setSideEffects(param.couldHaveSideEffects()).setRange(expr.range);\n    });\n    this.hooks.evaluate.for(\"ConditionalExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {ConditionalExpressionNode} */\n      _expr;\n      const condition = this.evaluateExpression(expr.test);\n      const conditionValue = condition.asBool();\n      let res;\n\n      if (conditionValue === undefined) {\n        const consequent = this.evaluateExpression(expr.consequent);\n        const alternate = this.evaluateExpression(expr.alternate);\n        if (!consequent || !alternate) return;\n        res = new BasicEvaluatedExpression();\n\n        if (consequent.isConditional()) {\n          res.setOptions(consequent.options);\n        } else {\n          res.setOptions([consequent]);\n        }\n\n        if (alternate.isConditional()) {\n          res.addOptions(alternate.options);\n        } else {\n          res.addOptions([alternate]);\n        }\n      } else {\n        res = this.evaluateExpression(conditionValue ? expr.consequent : expr.alternate);\n        if (condition.couldHaveSideEffects()) res.setSideEffects();\n      }\n\n      res.setRange(expr.range);\n      return res;\n    });\n    this.hooks.evaluate.for(\"ArrayExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {ArrayExpressionNode} */\n      _expr;\n      const items = expr.elements.map(element => {\n        return element !== null && element.type !== \"SpreadElement\" && this.evaluateExpression(element);\n      });\n      if (!items.every(Boolean)) return;\n      return new BasicEvaluatedExpression().setItems(items).setRange(expr.range);\n    });\n    this.hooks.evaluate.for(\"ChainExpression\").tap(\"JavascriptParser\", _expr => {\n      const expr =\n      /** @type {ChainExpressionNode} */\n      _expr;\n      /** @type {ExpressionNode[]} */\n\n      const optionalExpressionsStack = [];\n      /** @type {ExpressionNode|SuperNode} */\n\n      let next = expr.expression;\n\n      while (next.type === \"MemberExpression\" || next.type === \"CallExpression\") {\n        if (next.type === \"MemberExpression\") {\n          if (next.optional) {\n            // SuperNode can not be optional\n            optionalExpressionsStack.push(\n            /** @type {ExpressionNode} */\n            next.object);\n          }\n\n          next = next.object;\n        } else {\n          if (next.optional) {\n            // SuperNode can not be optional\n            optionalExpressionsStack.push(\n            /** @type {ExpressionNode} */\n            next.callee);\n          }\n\n          next = next.callee;\n        }\n      }\n\n      while (optionalExpressionsStack.length > 0) {\n        const expression = optionalExpressionsStack.pop();\n        const evaluated = this.evaluateExpression(expression);\n\n        if (evaluated && evaluated.asNullish()) {\n          return evaluated.setRange(_expr.range);\n        }\n      }\n\n      return this.evaluateExpression(expr.expression);\n    });\n  }\n\n  getRenameIdentifier(expr) {\n    const result = this.evaluateExpression(expr);\n\n    if (result && result.isIdentifier()) {\n      return result.identifier;\n    }\n  }\n  /**\n   * @param {ClassExpressionNode | ClassDeclarationNode} classy a class node\n   * @returns {void}\n   */\n\n\n  walkClass(classy) {\n    if (classy.superClass) {\n      if (!this.hooks.classExtendsExpression.call(classy.superClass, classy)) {\n        this.walkExpression(classy.superClass);\n      }\n    }\n\n    if (classy.body && classy.body.type === \"ClassBody\") {\n      for (const classElement of\n      /** @type {TODO} */\n      classy.body.body) {\n        if (!this.hooks.classBodyElement.call(classElement, classy)) {\n          if (classElement.computed && classElement.key) {\n            this.walkExpression(classElement.key);\n          }\n\n          if (classElement.value) {\n            if (!this.hooks.classBodyValue.call(classElement.value, classElement, classy)) {\n              const wasTopLevel = this.scope.topLevelScope;\n              this.scope.topLevelScope = false;\n              this.walkExpression(classElement.value);\n              this.scope.topLevelScope = wasTopLevel;\n            }\n          }\n        }\n      }\n    }\n  } // Pre walking iterates the scope for variable declarations\n\n\n  preWalkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.preWalkStatement(statement);\n    }\n  } // Block pre walking iterates the scope for block variable declarations\n\n\n  blockPreWalkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.blockPreWalkStatement(statement);\n    }\n  } // Walking iterates the statements and expressions and processes them\n\n\n  walkStatements(statements) {\n    for (let index = 0, len = statements.length; index < len; index++) {\n      const statement = statements[index];\n      this.walkStatement(statement);\n    }\n  }\n\n  preWalkStatement(statement) {\n    this.statementPath.push(statement);\n\n    if (this.hooks.preStatement.call(statement)) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n\n    switch (statement.type) {\n      case \"BlockStatement\":\n        this.preWalkBlockStatement(statement);\n        break;\n\n      case \"DoWhileStatement\":\n        this.preWalkDoWhileStatement(statement);\n        break;\n\n      case \"ForInStatement\":\n        this.preWalkForInStatement(statement);\n        break;\n\n      case \"ForOfStatement\":\n        this.preWalkForOfStatement(statement);\n        break;\n\n      case \"ForStatement\":\n        this.preWalkForStatement(statement);\n        break;\n\n      case \"FunctionDeclaration\":\n        this.preWalkFunctionDeclaration(statement);\n        break;\n\n      case \"IfStatement\":\n        this.preWalkIfStatement(statement);\n        break;\n\n      case \"LabeledStatement\":\n        this.preWalkLabeledStatement(statement);\n        break;\n\n      case \"SwitchStatement\":\n        this.preWalkSwitchStatement(statement);\n        break;\n\n      case \"TryStatement\":\n        this.preWalkTryStatement(statement);\n        break;\n\n      case \"VariableDeclaration\":\n        this.preWalkVariableDeclaration(statement);\n        break;\n\n      case \"WhileStatement\":\n        this.preWalkWhileStatement(statement);\n        break;\n\n      case \"WithStatement\":\n        this.preWalkWithStatement(statement);\n        break;\n    }\n\n    this.prevStatement = this.statementPath.pop();\n  }\n\n  blockPreWalkStatement(statement) {\n    this.statementPath.push(statement);\n\n    if (this.hooks.blockPreStatement.call(statement)) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n\n    switch (statement.type) {\n      case \"ImportDeclaration\":\n        this.blockPreWalkImportDeclaration(statement);\n        break;\n\n      case \"ExportAllDeclaration\":\n        this.blockPreWalkExportAllDeclaration(statement);\n        break;\n\n      case \"ExportDefaultDeclaration\":\n        this.blockPreWalkExportDefaultDeclaration(statement);\n        break;\n\n      case \"ExportNamedDeclaration\":\n        this.blockPreWalkExportNamedDeclaration(statement);\n        break;\n\n      case \"VariableDeclaration\":\n        this.blockPreWalkVariableDeclaration(statement);\n        break;\n\n      case \"ClassDeclaration\":\n        this.blockPreWalkClassDeclaration(statement);\n        break;\n    }\n\n    this.prevStatement = this.statementPath.pop();\n  }\n\n  walkStatement(statement) {\n    this.statementPath.push(statement);\n\n    if (this.hooks.statement.call(statement) !== undefined) {\n      this.prevStatement = this.statementPath.pop();\n      return;\n    }\n\n    switch (statement.type) {\n      case \"BlockStatement\":\n        this.walkBlockStatement(statement);\n        break;\n\n      case \"ClassDeclaration\":\n        this.walkClassDeclaration(statement);\n        break;\n\n      case \"DoWhileStatement\":\n        this.walkDoWhileStatement(statement);\n        break;\n\n      case \"ExportDefaultDeclaration\":\n        this.walkExportDefaultDeclaration(statement);\n        break;\n\n      case \"ExportNamedDeclaration\":\n        this.walkExportNamedDeclaration(statement);\n        break;\n\n      case \"ExpressionStatement\":\n        this.walkExpressionStatement(statement);\n        break;\n\n      case \"ForInStatement\":\n        this.walkForInStatement(statement);\n        break;\n\n      case \"ForOfStatement\":\n        this.walkForOfStatement(statement);\n        break;\n\n      case \"ForStatement\":\n        this.walkForStatement(statement);\n        break;\n\n      case \"FunctionDeclaration\":\n        this.walkFunctionDeclaration(statement);\n        break;\n\n      case \"IfStatement\":\n        this.walkIfStatement(statement);\n        break;\n\n      case \"LabeledStatement\":\n        this.walkLabeledStatement(statement);\n        break;\n\n      case \"ReturnStatement\":\n        this.walkReturnStatement(statement);\n        break;\n\n      case \"SwitchStatement\":\n        this.walkSwitchStatement(statement);\n        break;\n\n      case \"ThrowStatement\":\n        this.walkThrowStatement(statement);\n        break;\n\n      case \"TryStatement\":\n        this.walkTryStatement(statement);\n        break;\n\n      case \"VariableDeclaration\":\n        this.walkVariableDeclaration(statement);\n        break;\n\n      case \"WhileStatement\":\n        this.walkWhileStatement(statement);\n        break;\n\n      case \"WithStatement\":\n        this.walkWithStatement(statement);\n        break;\n    }\n\n    this.prevStatement = this.statementPath.pop();\n  }\n  /**\n   * Walks a statements that is nested within a parent statement\n   * and can potentially be a non-block statement.\n   * This enforces the nested statement to never be in ASI position.\n   * @param {StatementNode} statement the nested statement\n   * @returns {void}\n   */\n\n\n  walkNestedStatement(statement) {\n    this.prevStatement = undefined;\n    this.walkStatement(statement);\n  } // Real Statements\n\n\n  preWalkBlockStatement(statement) {\n    this.preWalkStatements(statement.body);\n  }\n\n  walkBlockStatement(statement) {\n    this.inBlockScope(() => {\n      const body = statement.body;\n      const prev = this.prevStatement;\n      this.blockPreWalkStatements(body);\n      this.prevStatement = prev;\n      this.walkStatements(body);\n    });\n  }\n\n  walkExpressionStatement(statement) {\n    this.walkExpression(statement.expression);\n  }\n\n  preWalkIfStatement(statement) {\n    this.preWalkStatement(statement.consequent);\n\n    if (statement.alternate) {\n      this.preWalkStatement(statement.alternate);\n    }\n  }\n\n  walkIfStatement(statement) {\n    const result = this.hooks.statementIf.call(statement);\n\n    if (result === undefined) {\n      this.walkExpression(statement.test);\n      this.walkNestedStatement(statement.consequent);\n\n      if (statement.alternate) {\n        this.walkNestedStatement(statement.alternate);\n      }\n    } else {\n      if (result) {\n        this.walkNestedStatement(statement.consequent);\n      } else if (statement.alternate) {\n        this.walkNestedStatement(statement.alternate);\n      }\n    }\n  }\n\n  preWalkLabeledStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n\n  walkLabeledStatement(statement) {\n    const hook = this.hooks.label.get(statement.label.name);\n\n    if (hook !== undefined) {\n      const result = hook.call(statement);\n      if (result === true) return;\n    }\n\n    this.walkNestedStatement(statement.body);\n  }\n\n  preWalkWithStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n\n  walkWithStatement(statement) {\n    this.walkExpression(statement.object);\n    this.walkNestedStatement(statement.body);\n  }\n\n  preWalkSwitchStatement(statement) {\n    this.preWalkSwitchCases(statement.cases);\n  }\n\n  walkSwitchStatement(statement) {\n    this.walkExpression(statement.discriminant);\n    this.walkSwitchCases(statement.cases);\n  }\n\n  walkTerminatingStatement(statement) {\n    if (statement.argument) this.walkExpression(statement.argument);\n  }\n\n  walkReturnStatement(statement) {\n    this.walkTerminatingStatement(statement);\n  }\n\n  walkThrowStatement(statement) {\n    this.walkTerminatingStatement(statement);\n  }\n\n  preWalkTryStatement(statement) {\n    this.preWalkStatement(statement.block);\n    if (statement.handler) this.preWalkCatchClause(statement.handler);\n    if (statement.finializer) this.preWalkStatement(statement.finializer);\n  }\n\n  walkTryStatement(statement) {\n    if (this.scope.inTry) {\n      this.walkStatement(statement.block);\n    } else {\n      this.scope.inTry = true;\n      this.walkStatement(statement.block);\n      this.scope.inTry = false;\n    }\n\n    if (statement.handler) this.walkCatchClause(statement.handler);\n    if (statement.finalizer) this.walkStatement(statement.finalizer);\n  }\n\n  preWalkWhileStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n\n  walkWhileStatement(statement) {\n    this.walkExpression(statement.test);\n    this.walkNestedStatement(statement.body);\n  }\n\n  preWalkDoWhileStatement(statement) {\n    this.preWalkStatement(statement.body);\n  }\n\n  walkDoWhileStatement(statement) {\n    this.walkNestedStatement(statement.body);\n    this.walkExpression(statement.test);\n  }\n\n  preWalkForStatement(statement) {\n    if (statement.init) {\n      if (statement.init.type === \"VariableDeclaration\") {\n        this.preWalkStatement(statement.init);\n      }\n    }\n\n    this.preWalkStatement(statement.body);\n  }\n\n  walkForStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.init) {\n        if (statement.init.type === \"VariableDeclaration\") {\n          this.blockPreWalkVariableDeclaration(statement.init);\n          this.prevStatement = undefined;\n          this.walkStatement(statement.init);\n        } else {\n          this.walkExpression(statement.init);\n        }\n      }\n\n      if (statement.test) {\n        this.walkExpression(statement.test);\n      }\n\n      if (statement.update) {\n        this.walkExpression(statement.update);\n      }\n\n      const body = statement.body;\n\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  }\n\n  preWalkForInStatement(statement) {\n    if (statement.left.type === \"VariableDeclaration\") {\n      this.preWalkVariableDeclaration(statement.left);\n    }\n\n    this.preWalkStatement(statement.body);\n  }\n\n  walkForInStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.left.type === \"VariableDeclaration\") {\n        this.blockPreWalkVariableDeclaration(statement.left);\n        this.walkVariableDeclaration(statement.left);\n      } else {\n        this.walkPattern(statement.left);\n      }\n\n      this.walkExpression(statement.right);\n      const body = statement.body;\n\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  }\n\n  preWalkForOfStatement(statement) {\n    if (statement.await && this.scope.topLevelScope === true) {\n      this.hooks.topLevelAwait.call(statement);\n    }\n\n    if (statement.left.type === \"VariableDeclaration\") {\n      this.preWalkVariableDeclaration(statement.left);\n    }\n\n    this.preWalkStatement(statement.body);\n  }\n\n  walkForOfStatement(statement) {\n    this.inBlockScope(() => {\n      if (statement.left.type === \"VariableDeclaration\") {\n        this.blockPreWalkVariableDeclaration(statement.left);\n        this.walkVariableDeclaration(statement.left);\n      } else {\n        this.walkPattern(statement.left);\n      }\n\n      this.walkExpression(statement.right);\n      const body = statement.body;\n\n      if (body.type === \"BlockStatement\") {\n        // no need to add additional scope\n        const prev = this.prevStatement;\n        this.blockPreWalkStatements(body.body);\n        this.prevStatement = prev;\n        this.walkStatements(body.body);\n      } else {\n        this.walkNestedStatement(body);\n      }\n    });\n  } // Declarations\n\n\n  preWalkFunctionDeclaration(statement) {\n    if (statement.id) {\n      this.defineVariable(statement.id.name);\n    }\n  }\n\n  walkFunctionDeclaration(statement) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = false;\n    this.inFunctionScope(true, statement.params, () => {\n      for (const param of statement.params) {\n        this.walkPattern(param);\n      }\n\n      if (statement.body.type === \"BlockStatement\") {\n        this.detectMode(statement.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(statement.body);\n        this.prevStatement = prev;\n        this.walkStatement(statement.body);\n      } else {\n        this.walkExpression(statement.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n\n  blockPreWalkImportDeclaration(statement) {\n    const source = statement.source.value;\n    this.hooks.import.call(statement, source);\n\n    for (const specifier of statement.specifiers) {\n      const name = specifier.local.name;\n\n      switch (specifier.type) {\n        case \"ImportDefaultSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, \"default\", name)) {\n            this.defineVariable(name);\n          }\n\n          break;\n\n        case \"ImportSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, specifier.imported.name, name)) {\n            this.defineVariable(name);\n          }\n\n          break;\n\n        case \"ImportNamespaceSpecifier\":\n          if (!this.hooks.importSpecifier.call(statement, source, null, name)) {\n            this.defineVariable(name);\n          }\n\n          break;\n\n        default:\n          this.defineVariable(name);\n      }\n    }\n  }\n\n  enterDeclaration(declaration, onIdent) {\n    switch (declaration.type) {\n      case \"VariableDeclaration\":\n        for (const declarator of declaration.declarations) {\n          switch (declarator.type) {\n            case \"VariableDeclarator\":\n              {\n                this.enterPattern(declarator.id, onIdent);\n                break;\n              }\n          }\n        }\n\n        break;\n\n      case \"FunctionDeclaration\":\n        this.enterPattern(declaration.id, onIdent);\n        break;\n\n      case \"ClassDeclaration\":\n        this.enterPattern(declaration.id, onIdent);\n        break;\n    }\n  }\n\n  blockPreWalkExportNamedDeclaration(statement) {\n    let source;\n\n    if (statement.source) {\n      source = statement.source.value;\n      this.hooks.exportImport.call(statement, source);\n    } else {\n      this.hooks.export.call(statement);\n    }\n\n    if (statement.declaration) {\n      if (!this.hooks.exportDeclaration.call(statement, statement.declaration)) {\n        const prev = this.prevStatement;\n        this.preWalkStatement(statement.declaration);\n        this.prevStatement = prev;\n        this.blockPreWalkStatement(statement.declaration);\n        let index = 0;\n        this.enterDeclaration(statement.declaration, def => {\n          this.hooks.exportSpecifier.call(statement, def, def, index++);\n        });\n      }\n    }\n\n    if (statement.specifiers) {\n      for (let specifierIndex = 0; specifierIndex < statement.specifiers.length; specifierIndex++) {\n        const specifier = statement.specifiers[specifierIndex];\n\n        switch (specifier.type) {\n          case \"ExportSpecifier\":\n            {\n              const name = specifier.exported.name;\n\n              if (source) {\n                this.hooks.exportImportSpecifier.call(statement, source, specifier.local.name, name, specifierIndex);\n              } else {\n                this.hooks.exportSpecifier.call(statement, specifier.local.name, name, specifierIndex);\n              }\n\n              break;\n            }\n        }\n      }\n    }\n  }\n\n  walkExportNamedDeclaration(statement) {\n    if (statement.declaration) {\n      this.walkStatement(statement.declaration);\n    }\n  }\n\n  blockPreWalkExportDefaultDeclaration(statement) {\n    const prev = this.prevStatement;\n    this.preWalkStatement(statement.declaration);\n    this.prevStatement = prev;\n    this.blockPreWalkStatement(statement.declaration);\n\n    if (statement.declaration.id && statement.declaration.type !== \"FunctionExpression\" && statement.declaration.type !== \"ClassExpression\") {\n      this.hooks.exportSpecifier.call(statement, statement.declaration.id.name, \"default\", undefined);\n    }\n  }\n\n  walkExportDefaultDeclaration(statement) {\n    this.hooks.export.call(statement);\n\n    if (statement.declaration.id && statement.declaration.type !== \"FunctionExpression\" && statement.declaration.type !== \"ClassExpression\") {\n      if (!this.hooks.exportDeclaration.call(statement, statement.declaration)) {\n        this.walkStatement(statement.declaration);\n      }\n    } else {\n      // Acorn parses `export default function() {}` as `FunctionDeclaration` and\n      // `export default class {}` as `ClassDeclaration`, both with `id = null`.\n      // These nodes must be treated as expressions.\n      if (statement.declaration.type === \"FunctionDeclaration\" || statement.declaration.type === \"ClassDeclaration\") {\n        this.walkStatement(statement.declaration);\n      } else {\n        this.walkExpression(statement.declaration);\n      }\n\n      if (!this.hooks.exportExpression.call(statement, statement.declaration)) {\n        this.hooks.exportSpecifier.call(statement, statement.declaration, \"default\", undefined);\n      }\n    }\n  }\n\n  blockPreWalkExportAllDeclaration(statement) {\n    const source = statement.source.value;\n    const name = statement.exported ? statement.exported.name : null;\n    this.hooks.exportImport.call(statement, source);\n    this.hooks.exportImportSpecifier.call(statement, source, null, name, 0);\n  }\n\n  preWalkVariableDeclaration(statement) {\n    if (statement.kind !== \"var\") return;\n\n    this._preWalkVariableDeclaration(statement, this.hooks.varDeclarationVar);\n  }\n\n  blockPreWalkVariableDeclaration(statement) {\n    if (statement.kind === \"var\") return;\n    const hookMap = statement.kind === \"const\" ? this.hooks.varDeclarationConst : this.hooks.varDeclarationLet;\n\n    this._preWalkVariableDeclaration(statement, hookMap);\n  }\n\n  _preWalkVariableDeclaration(statement, hookMap) {\n    for (const declarator of statement.declarations) {\n      switch (declarator.type) {\n        case \"VariableDeclarator\":\n          {\n            if (!this.hooks.preDeclarator.call(declarator, statement)) {\n              this.enterPattern(declarator.id, (name, decl) => {\n                let hook = hookMap.get(name);\n\n                if (hook === undefined || !hook.call(decl)) {\n                  hook = this.hooks.varDeclaration.get(name);\n\n                  if (hook === undefined || !hook.call(decl)) {\n                    this.defineVariable(name);\n                  }\n                }\n              });\n            }\n\n            break;\n          }\n      }\n    }\n  }\n\n  walkVariableDeclaration(statement) {\n    for (const declarator of statement.declarations) {\n      switch (declarator.type) {\n        case \"VariableDeclarator\":\n          {\n            const renameIdentifier = declarator.init && this.getRenameIdentifier(declarator.init);\n\n            if (renameIdentifier && declarator.id.type === \"Identifier\") {\n              const hook = this.hooks.canRename.get(renameIdentifier);\n\n              if (hook !== undefined && hook.call(declarator.init)) {\n                // renaming with \"var a = b;\"\n                const hook = this.hooks.rename.get(renameIdentifier);\n\n                if (hook === undefined || !hook.call(declarator.init)) {\n                  this.setVariable(declarator.id.name, renameIdentifier);\n                }\n\n                break;\n              }\n            }\n\n            if (!this.hooks.declarator.call(declarator, statement)) {\n              this.walkPattern(declarator.id);\n              if (declarator.init) this.walkExpression(declarator.init);\n            }\n\n            break;\n          }\n      }\n    }\n  }\n\n  blockPreWalkClassDeclaration(statement) {\n    if (statement.id) {\n      this.defineVariable(statement.id.name);\n    }\n  }\n\n  walkClassDeclaration(statement) {\n    this.walkClass(statement);\n  }\n\n  preWalkSwitchCases(switchCases) {\n    for (let index = 0, len = switchCases.length; index < len; index++) {\n      const switchCase = switchCases[index];\n      this.preWalkStatements(switchCase.consequent);\n    }\n  }\n\n  walkSwitchCases(switchCases) {\n    this.inBlockScope(() => {\n      const len = switchCases.length; // we need to pre walk all statements first since we can have invalid code\n      // import A from \"module\";\n      // switch(1) {\n      //    case 1:\n      //      console.log(A); // should fail at runtime\n      //    case 2:\n      //      const A = 1;\n      // }\n\n      for (let index = 0; index < len; index++) {\n        const switchCase = switchCases[index];\n\n        if (switchCase.consequent.length > 0) {\n          const prev = this.prevStatement;\n          this.blockPreWalkStatements(switchCase.consequent);\n          this.prevStatement = prev;\n        }\n      }\n\n      for (let index = 0; index < len; index++) {\n        const switchCase = switchCases[index];\n\n        if (switchCase.test) {\n          this.walkExpression(switchCase.test);\n        }\n\n        if (switchCase.consequent.length > 0) {\n          this.walkStatements(switchCase.consequent);\n        }\n      }\n    });\n  }\n\n  preWalkCatchClause(catchClause) {\n    this.preWalkStatement(catchClause.body);\n  }\n\n  walkCatchClause(catchClause) {\n    this.inBlockScope(() => {\n      // Error binding is optional in catch clause since ECMAScript 2019\n      if (catchClause.param !== null) {\n        this.enterPattern(catchClause.param, ident => {\n          this.defineVariable(ident);\n        });\n        this.walkPattern(catchClause.param);\n      }\n\n      const prev = this.prevStatement;\n      this.blockPreWalkStatement(catchClause.body);\n      this.prevStatement = prev;\n      this.walkStatement(catchClause.body);\n    });\n  }\n\n  walkPattern(pattern) {\n    switch (pattern.type) {\n      case \"ArrayPattern\":\n        this.walkArrayPattern(pattern);\n        break;\n\n      case \"AssignmentPattern\":\n        this.walkAssignmentPattern(pattern);\n        break;\n\n      case \"MemberExpression\":\n        this.walkMemberExpression(pattern);\n        break;\n\n      case \"ObjectPattern\":\n        this.walkObjectPattern(pattern);\n        break;\n\n      case \"RestElement\":\n        this.walkRestElement(pattern);\n        break;\n    }\n  }\n\n  walkAssignmentPattern(pattern) {\n    this.walkExpression(pattern.right);\n    this.walkPattern(pattern.left);\n  }\n\n  walkObjectPattern(pattern) {\n    for (let i = 0, len = pattern.properties.length; i < len; i++) {\n      const prop = pattern.properties[i];\n\n      if (prop) {\n        if (prop.computed) this.walkExpression(prop.key);\n        if (prop.value) this.walkPattern(prop.value);\n      }\n    }\n  }\n\n  walkArrayPattern(pattern) {\n    for (let i = 0, len = pattern.elements.length; i < len; i++) {\n      const element = pattern.elements[i];\n      if (element) this.walkPattern(element);\n    }\n  }\n\n  walkRestElement(pattern) {\n    this.walkPattern(pattern.argument);\n  }\n\n  walkExpressions(expressions) {\n    for (const expression of expressions) {\n      if (expression) {\n        this.walkExpression(expression);\n      }\n    }\n  }\n\n  walkExpression(expression) {\n    switch (expression.type) {\n      case \"ArrayExpression\":\n        this.walkArrayExpression(expression);\n        break;\n\n      case \"ArrowFunctionExpression\":\n        this.walkArrowFunctionExpression(expression);\n        break;\n\n      case \"AssignmentExpression\":\n        this.walkAssignmentExpression(expression);\n        break;\n\n      case \"AwaitExpression\":\n        this.walkAwaitExpression(expression);\n        break;\n\n      case \"BinaryExpression\":\n        this.walkBinaryExpression(expression);\n        break;\n\n      case \"CallExpression\":\n        this.walkCallExpression(expression);\n        break;\n\n      case \"ChainExpression\":\n        this.walkChainExpression(expression);\n        break;\n\n      case \"ClassExpression\":\n        this.walkClassExpression(expression);\n        break;\n\n      case \"ConditionalExpression\":\n        this.walkConditionalExpression(expression);\n        break;\n\n      case \"FunctionExpression\":\n        this.walkFunctionExpression(expression);\n        break;\n\n      case \"Identifier\":\n        this.walkIdentifier(expression);\n        break;\n\n      case \"ImportExpression\":\n        this.walkImportExpression(expression);\n        break;\n\n      case \"LogicalExpression\":\n        this.walkLogicalExpression(expression);\n        break;\n\n      case \"MetaProperty\":\n        this.walkMetaProperty(expression);\n        break;\n\n      case \"MemberExpression\":\n        this.walkMemberExpression(expression);\n        break;\n\n      case \"NewExpression\":\n        this.walkNewExpression(expression);\n        break;\n\n      case \"ObjectExpression\":\n        this.walkObjectExpression(expression);\n        break;\n\n      case \"SequenceExpression\":\n        this.walkSequenceExpression(expression);\n        break;\n\n      case \"SpreadElement\":\n        this.walkSpreadElement(expression);\n        break;\n\n      case \"TaggedTemplateExpression\":\n        this.walkTaggedTemplateExpression(expression);\n        break;\n\n      case \"TemplateLiteral\":\n        this.walkTemplateLiteral(expression);\n        break;\n\n      case \"ThisExpression\":\n        this.walkThisExpression(expression);\n        break;\n\n      case \"UnaryExpression\":\n        this.walkUnaryExpression(expression);\n        break;\n\n      case \"UpdateExpression\":\n        this.walkUpdateExpression(expression);\n        break;\n\n      case \"YieldExpression\":\n        this.walkYieldExpression(expression);\n        break;\n    }\n  }\n\n  walkAwaitExpression(expression) {\n    if (this.scope.topLevelScope === true) this.hooks.topLevelAwait.call(expression);\n    this.walkExpression(expression.argument);\n  }\n\n  walkArrayExpression(expression) {\n    if (expression.elements) {\n      this.walkExpressions(expression.elements);\n    }\n  }\n\n  walkSpreadElement(expression) {\n    if (expression.argument) {\n      this.walkExpression(expression.argument);\n    }\n  }\n\n  walkObjectExpression(expression) {\n    for (let propIndex = 0, len = expression.properties.length; propIndex < len; propIndex++) {\n      const prop = expression.properties[propIndex];\n      this.walkProperty(prop);\n    }\n  }\n\n  walkProperty(prop) {\n    if (prop.type === \"SpreadElement\") {\n      this.walkExpression(prop.argument);\n      return;\n    }\n\n    if (prop.computed) {\n      this.walkExpression(prop.key);\n    }\n\n    if (prop.shorthand && prop.value && prop.value.type === \"Identifier\") {\n      this.scope.inShorthand = prop.value.name;\n      this.walkIdentifier(prop.value);\n      this.scope.inShorthand = false;\n    } else {\n      this.walkExpression(prop.value);\n    }\n  }\n\n  walkFunctionExpression(expression) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = false;\n    const scopeParams = expression.params; // Add function name in scope for recursive calls\n\n    if (expression.id) {\n      scopeParams.push(expression.id.name);\n    }\n\n    this.inFunctionScope(true, scopeParams, () => {\n      for (const param of expression.params) {\n        this.walkPattern(param);\n      }\n\n      if (expression.body.type === \"BlockStatement\") {\n        this.detectMode(expression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(expression.body);\n        this.prevStatement = prev;\n        this.walkStatement(expression.body);\n      } else {\n        this.walkExpression(expression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n\n  walkArrowFunctionExpression(expression) {\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = wasTopLevel ? \"arrow\" : false;\n    this.inFunctionScope(false, expression.params, () => {\n      for (const param of expression.params) {\n        this.walkPattern(param);\n      }\n\n      if (expression.body.type === \"BlockStatement\") {\n        this.detectMode(expression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(expression.body);\n        this.prevStatement = prev;\n        this.walkStatement(expression.body);\n      } else {\n        this.walkExpression(expression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n  /**\n   * @param {SequenceExpressionNode} expression the sequence\n   */\n\n\n  walkSequenceExpression(expression) {\n    if (!expression.expressions) return; // We treat sequence expressions like statements when they are one statement level\n    // This has some benefits for optimizations that only work on statement level\n\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n\n    if (currentStatement === expression || currentStatement.type === \"ExpressionStatement\" && currentStatement.expression === expression) {\n      const old = this.statementPath.pop();\n\n      for (const expr of expression.expressions) {\n        this.statementPath.push(expr);\n        this.walkExpression(expr);\n        this.statementPath.pop();\n      }\n\n      this.statementPath.push(old);\n    } else {\n      this.walkExpressions(expression.expressions);\n    }\n  }\n\n  walkUpdateExpression(expression) {\n    this.walkExpression(expression.argument);\n  }\n\n  walkUnaryExpression(expression) {\n    if (expression.operator === \"typeof\") {\n      const result = this.callHooksForExpression(this.hooks.typeof, expression.argument, expression);\n      if (result === true) return;\n\n      if (expression.argument.type === \"ChainExpression\") {\n        const result = this.callHooksForExpression(this.hooks.typeof, expression.argument.expression, expression);\n        if (result === true) return;\n      }\n    }\n\n    this.walkExpression(expression.argument);\n  }\n\n  walkLeftRightExpression(expression) {\n    this.walkExpression(expression.left);\n    this.walkExpression(expression.right);\n  }\n\n  walkBinaryExpression(expression) {\n    this.walkLeftRightExpression(expression);\n  }\n\n  walkLogicalExpression(expression) {\n    const result = this.hooks.expressionLogicalOperator.call(expression);\n\n    if (result === undefined) {\n      this.walkLeftRightExpression(expression);\n    } else {\n      if (result) {\n        this.walkExpression(expression.right);\n      }\n    }\n  }\n\n  walkAssignmentExpression(expression) {\n    if (expression.left.type === \"Identifier\") {\n      const renameIdentifier = this.getRenameIdentifier(expression.right);\n\n      if (renameIdentifier) {\n        if (this.callHooksForInfo(this.hooks.canRename, renameIdentifier, expression.right)) {\n          // renaming \"a = b;\"\n          if (!this.callHooksForInfo(this.hooks.rename, renameIdentifier, expression.right)) {\n            this.setVariable(expression.left.name, this.getVariableInfo(renameIdentifier));\n          }\n\n          return;\n        }\n      }\n\n      this.walkExpression(expression.right);\n      this.enterPattern(expression.left, (name, decl) => {\n        if (!this.callHooksForName(this.hooks.assign, name, expression)) {\n          this.walkExpression(expression.left);\n        }\n      });\n      return;\n    }\n\n    if (expression.left.type.endsWith(\"Pattern\")) {\n      this.walkExpression(expression.right);\n      this.enterPattern(expression.left, (name, decl) => {\n        if (!this.callHooksForName(this.hooks.assign, name, expression)) {\n          this.defineVariable(name);\n        }\n      });\n      this.walkPattern(expression.left);\n    } else if (expression.left.type === \"MemberExpression\") {\n      const exprName = this.getMemberExpressionInfo(expression.left, ALLOWED_MEMBER_TYPES_EXPRESSION);\n\n      if (exprName) {\n        if (this.callHooksForInfo(this.hooks.assignMemberChain, exprName.rootInfo, expression, exprName.getMembers())) {\n          return;\n        }\n      }\n\n      this.walkExpression(expression.right);\n      this.walkExpression(expression.left);\n    } else {\n      this.walkExpression(expression.right);\n      this.walkExpression(expression.left);\n    }\n  }\n\n  walkConditionalExpression(expression) {\n    const result = this.hooks.expressionConditionalOperator.call(expression);\n\n    if (result === undefined) {\n      this.walkExpression(expression.test);\n      this.walkExpression(expression.consequent);\n\n      if (expression.alternate) {\n        this.walkExpression(expression.alternate);\n      }\n    } else {\n      if (result) {\n        this.walkExpression(expression.consequent);\n      } else if (expression.alternate) {\n        this.walkExpression(expression.alternate);\n      }\n    }\n  }\n\n  walkNewExpression(expression) {\n    const result = this.callHooksForExpression(this.hooks.new, expression.callee, expression);\n    if (result === true) return;\n    this.walkExpression(expression.callee);\n\n    if (expression.arguments) {\n      this.walkExpressions(expression.arguments);\n    }\n  }\n\n  walkYieldExpression(expression) {\n    if (expression.argument) {\n      this.walkExpression(expression.argument);\n    }\n  }\n\n  walkTemplateLiteral(expression) {\n    if (expression.expressions) {\n      this.walkExpressions(expression.expressions);\n    }\n  }\n\n  walkTaggedTemplateExpression(expression) {\n    if (expression.tag) {\n      this.walkExpression(expression.tag);\n    }\n\n    if (expression.quasi && expression.quasi.expressions) {\n      this.walkExpressions(expression.quasi.expressions);\n    }\n  }\n\n  walkClassExpression(expression) {\n    this.walkClass(expression);\n  }\n  /**\n   * @param {ChainExpressionNode} expression expression\n   */\n\n\n  walkChainExpression(expression) {\n    const result = this.hooks.optionalChaining.call(expression);\n\n    if (result === undefined) {\n      if (expression.expression.type === \"CallExpression\") {\n        this.walkCallExpression(expression.expression);\n      } else {\n        this.walkMemberExpression(expression.expression);\n      }\n    }\n  }\n\n  _walkIIFE(functionExpression, options, currentThis) {\n    const getVarInfo = argOrThis => {\n      const renameIdentifier = this.getRenameIdentifier(argOrThis);\n\n      if (renameIdentifier) {\n        if (this.callHooksForInfo(this.hooks.canRename, renameIdentifier, argOrThis)) {\n          if (!this.callHooksForInfo(this.hooks.rename, renameIdentifier, argOrThis)) {\n            return this.getVariableInfo(renameIdentifier);\n          }\n        }\n      }\n\n      this.walkExpression(argOrThis);\n    };\n\n    const {\n      params,\n      type\n    } = functionExpression;\n    const arrow = type === \"ArrowFunctionExpression\";\n    const renameThis = currentThis ? getVarInfo(currentThis) : null;\n    const varInfoForArgs = options.map(getVarInfo);\n    const wasTopLevel = this.scope.topLevelScope;\n    this.scope.topLevelScope = wasTopLevel && arrow ? \"arrow\" : false;\n    const scopeParams = params.filter((identifier, idx) => !varInfoForArgs[idx]); // Add function name in scope for recursive calls\n\n    if (functionExpression.id) {\n      scopeParams.push(functionExpression.id.name);\n    }\n\n    this.inFunctionScope(true, scopeParams, () => {\n      if (renameThis && !arrow) {\n        this.setVariable(\"this\", renameThis);\n      }\n\n      for (let i = 0; i < varInfoForArgs.length; i++) {\n        const varInfo = varInfoForArgs[i];\n        if (!varInfo) continue;\n        if (!params[i] || params[i].type !== \"Identifier\") continue;\n        this.setVariable(params[i].name, varInfo);\n      }\n\n      if (functionExpression.body.type === \"BlockStatement\") {\n        this.detectMode(functionExpression.body.body);\n        const prev = this.prevStatement;\n        this.preWalkStatement(functionExpression.body);\n        this.prevStatement = prev;\n        this.walkStatement(functionExpression.body);\n      } else {\n        this.walkExpression(functionExpression.body);\n      }\n    });\n    this.scope.topLevelScope = wasTopLevel;\n  }\n\n  walkImportExpression(expression) {\n    let result = this.hooks.importCall.call(expression);\n    if (result === true) return;\n    this.walkExpression(expression.source);\n  }\n\n  walkCallExpression(expression) {\n    const isSimpleFunction = fn => {\n      return fn.params.every(p => p.type === \"Identifier\");\n    };\n\n    if (expression.callee.type === \"MemberExpression\" && expression.callee.object.type.endsWith(\"FunctionExpression\") && !expression.callee.computed && (expression.callee.property.name === \"call\" || expression.callee.property.name === \"bind\") && expression.arguments.length > 0 && isSimpleFunction(expression.callee.object)) {\n      // (function(…) { }.call/bind(?, …))\n      this._walkIIFE(expression.callee.object, expression.arguments.slice(1), expression.arguments[0]);\n    } else if (expression.callee.type.endsWith(\"FunctionExpression\") && isSimpleFunction(expression.callee)) {\n      // (function(…) { }(…))\n      this._walkIIFE(expression.callee, expression.arguments, null);\n    } else {\n      if (expression.callee.type === \"MemberExpression\") {\n        const exprInfo = this.getMemberExpressionInfo(expression.callee, ALLOWED_MEMBER_TYPES_CALL_EXPRESSION);\n\n        if (exprInfo && exprInfo.type === \"call\") {\n          const result = this.callHooksForInfo(this.hooks.callMemberChainOfCallMemberChain, exprInfo.rootInfo, expression, exprInfo.getCalleeMembers(), exprInfo.call, exprInfo.getMembers());\n          if (result === true) return;\n        }\n      }\n\n      const callee = this.evaluateExpression(expression.callee);\n\n      if (callee.isIdentifier()) {\n        const result1 = this.callHooksForInfo(this.hooks.callMemberChain, callee.rootInfo, expression, callee.getMembers());\n        if (result1 === true) return;\n        const result2 = this.callHooksForInfo(this.hooks.call, callee.identifier, expression);\n        if (result2 === true) return;\n      }\n\n      if (expression.callee) {\n        if (expression.callee.type === \"MemberExpression\") {\n          // because of call context we need to walk the call context as expression\n          this.walkExpression(expression.callee.object);\n          if (expression.callee.computed === true) this.walkExpression(expression.callee.property);\n        } else {\n          this.walkExpression(expression.callee);\n        }\n      }\n\n      if (expression.arguments) this.walkExpressions(expression.arguments);\n    }\n  }\n\n  walkMemberExpression(expression) {\n    const exprInfo = this.getMemberExpressionInfo(expression, ALLOWED_MEMBER_TYPES_ALL);\n\n    if (exprInfo) {\n      switch (exprInfo.type) {\n        case \"expression\":\n          {\n            const result1 = this.callHooksForInfo(this.hooks.expression, exprInfo.name, expression);\n            if (result1 === true) return;\n            const members = exprInfo.getMembers();\n            const result2 = this.callHooksForInfo(this.hooks.expressionMemberChain, exprInfo.rootInfo, expression, members);\n            if (result2 === true) return;\n            this.walkMemberExpressionWithExpressionName(expression, exprInfo.name, exprInfo.rootInfo, members.slice(), () => this.callHooksForInfo(this.hooks.unhandledExpressionMemberChain, exprInfo.rootInfo, expression, members));\n            return;\n          }\n\n        case \"call\":\n          {\n            const result = this.callHooksForInfo(this.hooks.memberChainOfCallMemberChain, exprInfo.rootInfo, expression, exprInfo.getCalleeMembers(), exprInfo.call, exprInfo.getMembers());\n            if (result === true) return; // Fast skip over the member chain as we already called memberChainOfCallMemberChain\n            // and call computed property are literals anyway\n\n            this.walkExpression(exprInfo.call);\n            return;\n          }\n      }\n    }\n\n    this.walkExpression(expression.object);\n    if (expression.computed === true) this.walkExpression(expression.property);\n  }\n\n  walkMemberExpressionWithExpressionName(expression, name, rootInfo, members, onUnhandled) {\n    if (expression.object.type === \"MemberExpression\") {\n      // optimize the case where expression.object is a MemberExpression too.\n      // we can keep info here when calling walkMemberExpression directly\n      const property = expression.property.name || `${expression.property.value}`;\n      name = name.slice(0, -property.length - 1);\n      members.pop();\n      const result = this.callHooksForInfo(this.hooks.expression, name, expression.object);\n      if (result === true) return;\n      this.walkMemberExpressionWithExpressionName(expression.object, name, rootInfo, members, onUnhandled);\n    } else if (!onUnhandled || !onUnhandled()) {\n      this.walkExpression(expression.object);\n    }\n\n    if (expression.computed === true) this.walkExpression(expression.property);\n  }\n\n  walkThisExpression(expression) {\n    this.callHooksForName(this.hooks.expression, \"this\", expression);\n  }\n\n  walkIdentifier(expression) {\n    this.callHooksForName(this.hooks.expression, expression.name, expression);\n  }\n  /**\n   * @param {MetaPropertyNode} metaProperty meta property\n   */\n\n\n  walkMetaProperty(metaProperty) {\n    this.hooks.expression.for(getRootName(metaProperty)).call(metaProperty);\n  }\n\n  callHooksForExpression(hookMap, expr) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return this.callHooksForExpressionWithFallback(hookMap, expr, undefined, undefined, ...args);\n  }\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {MemberExpressionNode} expr expression info\n   * @param {function(string, string | ScopeInfo | VariableInfo, function(): string[]): any} fallback callback when variable in not handled by hooks\n   * @param {function(string): any} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n\n\n  callHooksForExpressionWithFallback(hookMap, expr, fallback, defined) {\n    const exprName = this.getMemberExpressionInfo(expr, ALLOWED_MEMBER_TYPES_EXPRESSION);\n\n    if (exprName !== undefined) {\n      const members = exprName.getMembers();\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {\n        args[_key2 - 4] = arguments[_key2];\n      }\n\n      return this.callHooksForInfoWithFallback(hookMap, members.length === 0 ? exprName.rootInfo : exprName.name, fallback && (name => fallback(name, exprName.rootInfo, exprName.getMembers)), defined && (() => defined(exprName.name)), ...args);\n    }\n  }\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {string} name key in map\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n\n\n  callHooksForName(hookMap, name) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      args[_key3 - 2] = arguments[_key3];\n    }\n\n    return this.callHooksForNameWithFallback(hookMap, name, undefined, undefined, ...args);\n  }\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks that should be called\n   * @param {ExportedVariableInfo} info variable info\n   * @param  {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n\n\n  callHooksForInfo(hookMap, info) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n      args[_key4 - 2] = arguments[_key4];\n    }\n\n    return this.callHooksForInfoWithFallback(hookMap, info, undefined, undefined, ...args);\n  }\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {ExportedVariableInfo} info variable info\n   * @param {function(string): any} fallback callback when variable in not handled by hooks\n   * @param {function(): any} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n\n\n  callHooksForInfoWithFallback(hookMap, info, fallback, defined) {\n    let name;\n\n    for (var _len5 = arguments.length, args = new Array(_len5 > 4 ? _len5 - 4 : 0), _key5 = 4; _key5 < _len5; _key5++) {\n      args[_key5 - 4] = arguments[_key5];\n    }\n\n    if (typeof info === \"string\") {\n      name = info;\n    } else {\n      if (!(info instanceof VariableInfo)) {\n        if (defined !== undefined) {\n          return defined();\n        }\n\n        return;\n      }\n\n      let tagInfo = info.tagInfo;\n\n      while (tagInfo !== undefined) {\n        const hook = hookMap.get(tagInfo.tag);\n\n        if (hook !== undefined) {\n          this.currentTagData = tagInfo.data;\n          const result = hook.call(...args);\n          this.currentTagData = undefined;\n          if (result !== undefined) return result;\n        }\n\n        tagInfo = tagInfo.next;\n      }\n\n      if (info.freeName === true) {\n        if (defined !== undefined) {\n          return defined();\n        }\n\n        return;\n      }\n\n      name = info.freeName;\n    }\n\n    const hook = hookMap.get(name);\n\n    if (hook !== undefined) {\n      const result = hook.call(...args);\n      if (result !== undefined) return result;\n    }\n\n    if (fallback !== undefined) {\n      return fallback(name);\n    }\n  }\n  /**\n   * @template T\n   * @template R\n   * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n   * @param {string} name key in map\n   * @param {function(string): any} fallback callback when variable in not handled by hooks\n   * @param {function(): any} defined callback when variable is defined\n   * @param {AsArray<T>} args args for the hook\n   * @returns {R} result of hook\n   */\n\n\n  callHooksForNameWithFallback(hookMap, name, fallback, defined) {\n    for (var _len6 = arguments.length, args = new Array(_len6 > 4 ? _len6 - 4 : 0), _key6 = 4; _key6 < _len6; _key6++) {\n      args[_key6 - 4] = arguments[_key6];\n    }\n\n    return this.callHooksForInfoWithFallback(hookMap, this.getVariableInfo(name), fallback, defined, ...args);\n  }\n  /**\n   * @deprecated\n   * @param {any} params scope params\n   * @param {function(): void} fn inner function\n   * @returns {void}\n   */\n\n\n  inScope(params, fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: false,\n      inShorthand: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    this.undefineVariable(\"this\");\n    this.enterPatterns(params, (ident, pattern) => {\n      this.defineVariable(ident);\n    });\n    fn();\n    this.scope = oldScope;\n  }\n\n  inFunctionScope(hasThis, params, fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: false,\n      inShorthand: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n\n    if (hasThis) {\n      this.undefineVariable(\"this\");\n    }\n\n    this.enterPatterns(params, (ident, pattern) => {\n      this.defineVariable(ident);\n    });\n    fn();\n    this.scope = oldScope;\n  }\n\n  inBlockScope(fn) {\n    const oldScope = this.scope;\n    this.scope = {\n      topLevelScope: oldScope.topLevelScope,\n      inTry: oldScope.inTry,\n      inShorthand: false,\n      isStrict: oldScope.isStrict,\n      isAsmJs: oldScope.isAsmJs,\n      definitions: oldScope.definitions.createChild()\n    };\n    fn();\n    this.scope = oldScope;\n  }\n\n  detectMode(statements) {\n    const isLiteral = statements.length >= 1 && statements[0].type === \"ExpressionStatement\" && statements[0].expression.type === \"Literal\";\n\n    if (isLiteral && statements[0].expression.value === \"use strict\") {\n      this.scope.isStrict = true;\n    }\n\n    if (isLiteral && statements[0].expression.value === \"use asm\") {\n      this.scope.isAsmJs = true;\n    }\n  }\n\n  enterPatterns(patterns, onIdent) {\n    for (const pattern of patterns) {\n      if (typeof pattern !== \"string\") {\n        this.enterPattern(pattern, onIdent);\n      } else if (pattern) {\n        onIdent(pattern);\n      }\n    }\n  }\n\n  enterPattern(pattern, onIdent) {\n    if (!pattern) return;\n\n    switch (pattern.type) {\n      case \"ArrayPattern\":\n        this.enterArrayPattern(pattern, onIdent);\n        break;\n\n      case \"AssignmentPattern\":\n        this.enterAssignmentPattern(pattern, onIdent);\n        break;\n\n      case \"Identifier\":\n        this.enterIdentifier(pattern, onIdent);\n        break;\n\n      case \"ObjectPattern\":\n        this.enterObjectPattern(pattern, onIdent);\n        break;\n\n      case \"RestElement\":\n        this.enterRestElement(pattern, onIdent);\n        break;\n\n      case \"Property\":\n        if (pattern.shorthand && pattern.value.type === \"Identifier\") {\n          this.scope.inShorthand = pattern.value.name;\n          this.enterIdentifier(pattern.value, onIdent);\n          this.scope.inShorthand = false;\n        } else {\n          this.enterPattern(pattern.value, onIdent);\n        }\n\n        break;\n    }\n  }\n\n  enterIdentifier(pattern, onIdent) {\n    if (!this.callHooksForName(this.hooks.pattern, pattern.name, pattern)) {\n      onIdent(pattern.name, pattern);\n    }\n  }\n\n  enterObjectPattern(pattern, onIdent) {\n    for (let propIndex = 0, len = pattern.properties.length; propIndex < len; propIndex++) {\n      const prop = pattern.properties[propIndex];\n      this.enterPattern(prop, onIdent);\n    }\n  }\n\n  enterArrayPattern(pattern, onIdent) {\n    for (let elementIndex = 0, len = pattern.elements.length; elementIndex < len; elementIndex++) {\n      const element = pattern.elements[elementIndex];\n      this.enterPattern(element, onIdent);\n    }\n  }\n\n  enterRestElement(pattern, onIdent) {\n    this.enterPattern(pattern.argument, onIdent);\n  }\n\n  enterAssignmentPattern(pattern, onIdent) {\n    this.enterPattern(pattern.left, onIdent);\n  }\n  /**\n   * @param {ExpressionNode} expression expression node\n   * @returns {BasicEvaluatedExpression | undefined} evaluation result\n   */\n\n\n  evaluateExpression(expression) {\n    try {\n      const hook = this.hooks.evaluate.get(expression.type);\n\n      if (hook !== undefined) {\n        const result = hook.call(expression);\n\n        if (result !== undefined) {\n          if (result) {\n            result.setExpression(expression);\n          }\n\n          return result;\n        }\n      }\n    } catch (e) {\n      console.warn(e); // ignore error\n    }\n\n    return new BasicEvaluatedExpression().setRange(expression.range).setExpression(expression);\n  }\n\n  parseString(expression) {\n    switch (expression.type) {\n      case \"BinaryExpression\":\n        if (expression.operator === \"+\") {\n          return this.parseString(expression.left) + this.parseString(expression.right);\n        }\n\n        break;\n\n      case \"Literal\":\n        return expression.value + \"\";\n    }\n\n    throw new Error(expression.type + \" is not supported as parameter for require\");\n  }\n\n  parseCalculatedString(expression) {\n    switch (expression.type) {\n      case \"BinaryExpression\":\n        if (expression.operator === \"+\") {\n          const left = this.parseCalculatedString(expression.left);\n          const right = this.parseCalculatedString(expression.right);\n\n          if (left.code) {\n            return {\n              range: left.range,\n              value: left.value,\n              code: true,\n              conditional: false\n            };\n          } else if (right.code) {\n            return {\n              range: [left.range[0], right.range ? right.range[1] : left.range[1]],\n              value: left.value + right.value,\n              code: true,\n              conditional: false\n            };\n          } else {\n            return {\n              range: [left.range[0], right.range[1]],\n              value: left.value + right.value,\n              code: false,\n              conditional: false\n            };\n          }\n        }\n\n        break;\n\n      case \"ConditionalExpression\":\n        {\n          const consequent = this.parseCalculatedString(expression.consequent);\n          const alternate = this.parseCalculatedString(expression.alternate);\n          const items = [];\n\n          if (consequent.conditional) {\n            items.push(...consequent.conditional);\n          } else if (!consequent.code) {\n            items.push(consequent);\n          } else {\n            break;\n          }\n\n          if (alternate.conditional) {\n            items.push(...alternate.conditional);\n          } else if (!alternate.code) {\n            items.push(alternate);\n          } else {\n            break;\n          }\n\n          return {\n            range: undefined,\n            value: \"\",\n            code: true,\n            conditional: items\n          };\n        }\n\n      case \"Literal\":\n        return {\n          range: expression.range,\n          value: expression.value + \"\",\n          code: false,\n          conditional: false\n        };\n    }\n\n    return {\n      range: undefined,\n      value: \"\",\n      code: true,\n      conditional: false\n    };\n  }\n  /**\n   * @param {string | Buffer | PreparsedAst} source the source to parse\n   * @param {ParserState} state the parser state\n   * @returns {ParserState} the parser state\n   */\n\n\n  parse(source, state) {\n    let ast;\n    let comments;\n    const semicolons = new Set();\n\n    if (source === null) {\n      throw new Error(\"source must not be null\");\n    }\n\n    if (Buffer.isBuffer(source)) {\n      source = source.toString(\"utf-8\");\n    }\n\n    if (typeof source === \"object\") {\n      ast =\n      /** @type {ProgramNode} */\n      source;\n      comments = source.comments;\n    } else {\n      comments = [];\n      ast = JavascriptParser._parse(source, {\n        sourceType: this.sourceType,\n        onComment: comments,\n        onInsertedSemicolon: pos => semicolons.add(pos)\n      });\n    }\n\n    const oldScope = this.scope;\n    const oldState = this.state;\n    const oldComments = this.comments;\n    const oldSemicolons = this.semicolons;\n    const oldStatementPath = this.statementPath;\n    const oldPrevStatement = this.prevStatement;\n    this.scope = {\n      topLevelScope: true,\n      inTry: false,\n      inShorthand: false,\n      isStrict: false,\n      isAsmJs: false,\n      definitions: new StackedMap()\n    };\n    /** @type {ParserState} */\n\n    this.state = state;\n    this.comments = comments;\n    this.semicolons = semicolons;\n    this.statementPath = [];\n    this.prevStatement = undefined;\n\n    if (this.hooks.program.call(ast, comments) === undefined) {\n      this.detectMode(ast.body);\n      this.preWalkStatements(ast.body);\n      this.prevStatement = undefined;\n      this.blockPreWalkStatements(ast.body);\n      this.prevStatement = undefined;\n      this.walkStatements(ast.body);\n    }\n\n    this.hooks.finish.call(ast, comments);\n    this.scope = oldScope;\n    /** @type {ParserState} */\n\n    this.state = oldState;\n    this.comments = oldComments;\n    this.semicolons = oldSemicolons;\n    this.statementPath = oldStatementPath;\n    this.prevStatement = oldPrevStatement;\n    return state;\n  }\n\n  evaluate(source) {\n    const ast = JavascriptParser._parse(\"(\" + source + \")\", {\n      sourceType: this.sourceType,\n      locations: false\n    });\n\n    if (ast.body.length !== 1 || ast.body[0].type !== \"ExpressionStatement\") {\n      throw new Error(\"evaluate: Source is not a expression\");\n    }\n\n    return this.evaluateExpression(ast.body[0].expression);\n  }\n  /**\n   * @param {ExpressionNode | DeclarationNode | PrivateIdentifierNode | null | undefined} expr an expression\n   * @param {number} commentsStartPos source position from which annotation comments are checked\n   * @returns {boolean} true, when the expression is pure\n   */\n\n\n  isPure(expr, commentsStartPos) {\n    if (!expr) return true;\n    const result = this.hooks.isPure.for(expr.type).call(expr, commentsStartPos);\n    if (typeof result === \"boolean\") return result;\n\n    switch (expr.type) {\n      case \"ClassDeclaration\":\n      case \"ClassExpression\":\n        {\n          if (expr.body.type !== \"ClassBody\") return false;\n\n          if (expr.superClass && !this.isPure(expr.superClass, expr.range[0])) {\n            return false;\n          }\n\n          const items =\n          /** @type {(MethodDefinitionNode | PropertyDefinitionNode)[]} */\n          expr.body.body;\n          return items.every(item => (!item.computed || !item.key || this.isPure(item.key, item.range[0])) && (!item.static || !item.value || this.isPure(item.value, item.key ? item.key.range[1] : item.range[0])));\n        }\n\n      case \"FunctionDeclaration\":\n      case \"FunctionExpression\":\n      case \"ArrowFunctionExpression\":\n      case \"Literal\":\n      case \"PrivateIdentifier\":\n        return true;\n\n      case \"VariableDeclaration\":\n        return expr.declarations.every(decl => this.isPure(decl.init, decl.range[0]));\n\n      case \"ConditionalExpression\":\n        return this.isPure(expr.test, commentsStartPos) && this.isPure(expr.consequent, expr.test.range[1]) && this.isPure(expr.alternate, expr.consequent.range[1]);\n\n      case \"SequenceExpression\":\n        return expr.expressions.every(expr => {\n          const pureFlag = this.isPure(expr, commentsStartPos);\n          commentsStartPos = expr.range[1];\n          return pureFlag;\n        });\n\n      case \"CallExpression\":\n        {\n          const pureFlag = expr.range[0] - commentsStartPos > 12 && this.getComments([commentsStartPos, expr.range[0]]).some(comment => comment.type === \"Block\" && /^\\s*(#|@)__PURE__\\s*$/.test(comment.value));\n          if (!pureFlag) return false;\n          commentsStartPos = expr.callee.range[1];\n          return expr.arguments.every(arg => {\n            if (arg.type === \"SpreadElement\") return false;\n            const pureFlag = this.isPure(arg, commentsStartPos);\n            commentsStartPos = arg.range[1];\n            return pureFlag;\n          });\n        }\n    }\n\n    const evaluated = this.evaluateExpression(expr);\n    return !evaluated.couldHaveSideEffects();\n  }\n\n  getComments(range) {\n    const [rangeStart, rangeEnd] = range;\n\n    const compare = (comment, needle) => comment.range[0] - needle;\n\n    let idx = binarySearchBounds.ge(this.comments, rangeStart, compare);\n    let commentsInRange = [];\n\n    while (this.comments[idx] && this.comments[idx].range[1] <= rangeEnd) {\n      commentsInRange.push(this.comments[idx]);\n      idx++;\n    }\n\n    return commentsInRange;\n  }\n  /**\n   * @param {number} pos source code position\n   * @returns {boolean} true when a semicolon has been inserted before this position, false if not\n   */\n\n\n  isAsiPosition(pos) {\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n    if (currentStatement === undefined) throw new Error(\"Not in statement\");\n    return (// Either asking directly for the end position of the current statement\n      currentStatement.range[1] === pos && this.semicolons.has(pos) || // Or asking for the start position of the current statement,\n      // here we have to check multiple things\n      currentStatement.range[0] === pos && // is there a previous statement which might be relevant?\n      this.prevStatement !== undefined && // is the end position of the previous statement an ASI position?\n      this.semicolons.has(this.prevStatement.range[1])\n    );\n  }\n  /**\n   * @param {number} pos source code position\n   * @returns {void}\n   */\n\n\n  unsetAsiPosition(pos) {\n    this.semicolons.delete(pos);\n  }\n\n  isStatementLevelExpression(expr) {\n    const currentStatement = this.statementPath[this.statementPath.length - 1];\n    return expr === currentStatement || currentStatement.type === \"ExpressionStatement\" && currentStatement.expression === expr;\n  }\n\n  getTagData(name, tag) {\n    const info = this.scope.definitions.get(name);\n\n    if (info instanceof VariableInfo) {\n      let tagInfo = info.tagInfo;\n\n      while (tagInfo !== undefined) {\n        if (tagInfo.tag === tag) return tagInfo.data;\n        tagInfo = tagInfo.next;\n      }\n    }\n  }\n\n  tagVariable(name, tag, data) {\n    const oldInfo = this.scope.definitions.get(name);\n    /** @type {VariableInfo} */\n\n    let newInfo;\n\n    if (oldInfo === undefined) {\n      newInfo = new VariableInfo(this.scope, name, {\n        tag,\n        data,\n        next: undefined\n      });\n    } else if (oldInfo instanceof VariableInfo) {\n      newInfo = new VariableInfo(oldInfo.declaredScope, oldInfo.freeName, {\n        tag,\n        data,\n        next: oldInfo.tagInfo\n      });\n    } else {\n      newInfo = new VariableInfo(oldInfo, true, {\n        tag,\n        data,\n        next: undefined\n      });\n    }\n\n    this.scope.definitions.set(name, newInfo);\n  }\n\n  defineVariable(name) {\n    const oldInfo = this.scope.definitions.get(name); // Don't redefine variable in same scope to keep existing tags\n\n    if (oldInfo instanceof VariableInfo && oldInfo.declaredScope === this.scope) return;\n    this.scope.definitions.set(name, this.scope);\n  }\n\n  undefineVariable(name) {\n    this.scope.definitions.delete(name);\n  }\n\n  isVariableDefined(name) {\n    const info = this.scope.definitions.get(name);\n    if (info === undefined) return false;\n\n    if (info instanceof VariableInfo) {\n      return info.freeName === true;\n    }\n\n    return true;\n  }\n  /**\n   * @param {string} name variable name\n   * @returns {ExportedVariableInfo} info for this variable\n   */\n\n\n  getVariableInfo(name) {\n    const value = this.scope.definitions.get(name);\n\n    if (value === undefined) {\n      return name;\n    } else {\n      return value;\n    }\n  }\n  /**\n   * @param {string} name variable name\n   * @param {ExportedVariableInfo} variableInfo new info for this variable\n   * @returns {void}\n   */\n\n\n  setVariable(name, variableInfo) {\n    if (typeof variableInfo === \"string\") {\n      if (variableInfo === name) {\n        this.scope.definitions.delete(name);\n      } else {\n        this.scope.definitions.set(name, new VariableInfo(this.scope, variableInfo, undefined));\n      }\n    } else {\n      this.scope.definitions.set(name, variableInfo);\n    }\n  }\n\n  parseCommentOptions(range) {\n    const comments = this.getComments(range);\n\n    if (comments.length === 0) {\n      return EMPTY_COMMENT_OPTIONS;\n    }\n\n    let options = {};\n    let errors = [];\n\n    for (const comment of comments) {\n      const {\n        value\n      } = comment;\n\n      if (value && webpackCommentRegExp.test(value)) {\n        // try compile only if webpack options comment is present\n        try {\n          const val = vm.runInNewContext(`(function(){return {${value}};})()`);\n          Object.assign(options, val);\n        } catch (e) {\n          e.comment = comment;\n          errors.push(e);\n        }\n      }\n    }\n\n    return {\n      options,\n      errors\n    };\n  }\n  /**\n   * @param {MemberExpressionNode} expression a member expression\n   * @returns {{ members: string[], object: ExpressionNode | SuperNode }} member names (reverse order) and remaining object\n   */\n\n\n  extractMemberExpressionChain(expression) {\n    /** @type {AnyNode} */\n    let expr = expression;\n    const members = [];\n\n    while (expr.type === \"MemberExpression\") {\n      if (expr.computed) {\n        if (expr.property.type !== \"Literal\") break;\n        members.push(`${expr.property.value}`);\n      } else {\n        if (expr.property.type !== \"Identifier\") break;\n        members.push(expr.property.name);\n      }\n\n      expr = expr.object;\n    }\n\n    return {\n      members,\n      object: expr\n    };\n  }\n  /**\n   * @param {string} varName variable name\n   * @returns {{name: string, info: VariableInfo | string}} name of the free variable and variable info for that\n   */\n\n\n  getFreeInfoFromVariable(varName) {\n    const info = this.getVariableInfo(varName);\n    let name;\n\n    if (info instanceof VariableInfo) {\n      name = info.freeName;\n      if (typeof name !== \"string\") return undefined;\n    } else if (typeof info !== \"string\") {\n      return undefined;\n    } else {\n      name = info;\n    }\n\n    return {\n      info,\n      name\n    };\n  }\n  /** @typedef {{ type: \"call\", call: CallExpressionNode, calleeName: string, rootInfo: string | VariableInfo, getCalleeMembers: () => string[], name: string, getMembers: () => string[]}} CallExpressionInfo */\n\n  /** @typedef {{ type: \"expression\", rootInfo: string | VariableInfo, name: string, getMembers: () => string[]}} ExpressionExpressionInfo */\n\n  /**\n   * @param {MemberExpressionNode} expression a member expression\n   * @param {number} allowedTypes which types should be returned, presented in bit mask\n   * @returns {CallExpressionInfo | ExpressionExpressionInfo | undefined} expression info\n   */\n\n\n  getMemberExpressionInfo(expression, allowedTypes) {\n    const {\n      object,\n      members\n    } = this.extractMemberExpressionChain(expression);\n\n    switch (object.type) {\n      case \"CallExpression\":\n        {\n          if ((allowedTypes & ALLOWED_MEMBER_TYPES_CALL_EXPRESSION) === 0) return undefined;\n          let callee = object.callee;\n          let rootMembers = EMPTY_ARRAY;\n\n          if (callee.type === \"MemberExpression\") {\n            ({\n              object: callee,\n              members: rootMembers\n            } = this.extractMemberExpressionChain(callee));\n          }\n\n          const rootName = getRootName(callee);\n          if (!rootName) return undefined;\n          const result = this.getFreeInfoFromVariable(rootName);\n          if (!result) return undefined;\n          const {\n            info: rootInfo,\n            name: resolvedRoot\n          } = result;\n          const calleeName = objectAndMembersToName(resolvedRoot, rootMembers);\n          return {\n            type: \"call\",\n            call: object,\n            calleeName,\n            rootInfo,\n            getCalleeMembers: memoize(() => rootMembers.reverse()),\n            name: objectAndMembersToName(`${calleeName}()`, members),\n            getMembers: memoize(() => members.reverse())\n          };\n        }\n\n      case \"Identifier\":\n      case \"MetaProperty\":\n      case \"ThisExpression\":\n        {\n          if ((allowedTypes & ALLOWED_MEMBER_TYPES_EXPRESSION) === 0) return undefined;\n          const rootName = getRootName(object);\n          if (!rootName) return undefined;\n          const result = this.getFreeInfoFromVariable(rootName);\n          if (!result) return undefined;\n          const {\n            info: rootInfo,\n            name: resolvedRoot\n          } = result;\n          return {\n            type: \"expression\",\n            name: objectAndMembersToName(resolvedRoot, members),\n            rootInfo,\n            getMembers: memoize(() => members.reverse())\n          };\n        }\n    }\n  }\n  /**\n   * @param {MemberExpressionNode} expression an expression\n   * @returns {{ name: string, rootInfo: ExportedVariableInfo, getMembers: () => string[]}} name info\n   */\n\n\n  getNameForExpression(expression) {\n    return this.getMemberExpressionInfo(expression, ALLOWED_MEMBER_TYPES_EXPRESSION);\n  }\n  /**\n   * @param {string} code source code\n   * @param {ParseOptions} options parsing options\n   * @returns {ProgramNode} parsed ast\n   */\n\n\n  static _parse(code, options) {\n    const type = options ? options.sourceType : \"module\";\n    /** @type {AcornOptions} */\n\n    const parserOptions = { ...defaultParserOptions,\n      allowReturnOutsideFunction: type === \"script\",\n      ...options,\n      sourceType: type === \"auto\" ? \"module\" : type\n    };\n    /** @type {AnyNode} */\n\n    let ast;\n    let error;\n    let threw = false;\n\n    try {\n      ast =\n      /** @type {AnyNode} */\n      parser.parse(code, parserOptions);\n    } catch (e) {\n      error = e;\n      threw = true;\n    }\n\n    if (threw && type === \"auto\") {\n      parserOptions.sourceType = \"script\";\n\n      if (!(\"allowReturnOutsideFunction\" in options)) {\n        parserOptions.allowReturnOutsideFunction = true;\n      }\n\n      if (Array.isArray(parserOptions.onComment)) {\n        parserOptions.onComment.length = 0;\n      }\n\n      try {\n        ast =\n        /** @type {AnyNode} */\n        parser.parse(code, parserOptions);\n        threw = false;\n      } catch (e) {// we use the error from first parse try\n        // so nothing to do here\n      }\n    }\n\n    if (threw) {\n      throw error;\n    }\n\n    return (\n      /** @type {ProgramNode} */\n      ast\n    );\n  }\n\n}\n\nmodule.exports = JavascriptParser;\nmodule.exports.ALLOWED_MEMBER_TYPES_ALL = ALLOWED_MEMBER_TYPES_ALL;\nmodule.exports.ALLOWED_MEMBER_TYPES_EXPRESSION = ALLOWED_MEMBER_TYPES_EXPRESSION;\nmodule.exports.ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = ALLOWED_MEMBER_TYPES_CALL_EXPRESSION;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/javascript/JavascriptParser.js"],"names":["Parser","AcornParser","require","importAssertions","SyncBailHook","HookMap","vm","StackedMap","binarySearchBounds","memoize","BasicEvaluatedExpression","EMPTY_ARRAY","ALLOWED_MEMBER_TYPES_CALL_EXPRESSION","ALLOWED_MEMBER_TYPES_EXPRESSION","ALLOWED_MEMBER_TYPES_ALL","parser","extend","VariableInfo","constructor","declaredScope","freeName","tagInfo","joinRanges","startRange","endRange","objectAndMembersToName","object","membersReversed","name","i","length","getRootName","expression","type","meta","property","undefined","defaultParserOptions","ranges","locations","ecmaVersion","sourceType","allowHashBang","onComment","webpackCommentRegExp","RegExp","EMPTY_COMMENT_OPTIONS","options","errors","JavascriptParser","hooks","Object","freeze","evaluateTypeof","evaluate","evaluateIdentifier","evaluateDefinedIdentifier","evaluateCallExpressionMember","isPure","preStatement","blockPreStatement","statement","statementIf","classExtendsExpression","classBodyElement","classBodyValue","label","import","importSpecifier","export","exportImport","exportDeclaration","exportExpression","exportSpecifier","exportImportSpecifier","preDeclarator","declarator","varDeclaration","varDeclarationLet","varDeclarationConst","varDeclarationVar","pattern","canRename","rename","assign","assignMemberChain","typeof","importCall","topLevelAwait","call","callMemberChain","memberChainOfCallMemberChain","callMemberChainOfCallMemberChain","optionalChaining","new","expressionMemberChain","unhandledExpressionMemberChain","expressionConditionalOperator","expressionLogicalOperator","program","finish","scope","state","comments","semicolons","statementPath","prevStatement","currentTagData","_initializeEvaluating","for","tap","_expr","expr","value","setNumber","setRange","range","setBigInt","setString","setBoolean","setNull","setRegExp","callee","arguments","getVariableInfo","regExp","flags","arg1","evaluatedRegExp","evaluateExpression","asString","arg2","evaluatedFlags","isUndefined","isValidRegExpFlags","left","returnRight","allowedRight","operator","leftAsBool","asBool","leftAsNullish","asNullish","right","couldHaveSideEffects","setSideEffects","setTruthy","setFalsy","valueAsExpression","sideEffects","handleConstOperation","fn","isCompileTimeValue","result","asCompileTimeValue","isAlwaysDifferent","a","b","handleTemplateStringCompare","res","eql","getPrefix","parts","p","v","getSuffix","leftPrefix","rightPrefix","leftSuffix","rightSuffix","lenPrefix","Math","min","lenSuffix","slice","handleStrictEqualityComparison","leftConst","rightConst","isArray","isTemplateString","leftPrimitive","isPrimitiveType","rightPrimitive","handleAbstractEqualityComparison","isString","string","isNumber","number","isWrapped","prefix","setWrapped","postfix","wrappedInnerExpressions","isBigInt","bigint","concat","l","r","argument","callHooksForName","callHooksForExpression","arg","isUnknown","isBoolean","isConstArray","isRegExp","isNull","bool","setUndefined","tapEvaluateWithVariableInfo","exprType","getInfo","cachedExpression","cachedInfo","info","callHooksForInfoWithFallback","hook","get","stage","setIdentifier","rootInfo","getMembers","metaProperty","getMemberExpressionInfo","computed","param","arg1Eval","arg1Value","arg2Eval","indexOf","arg2Value","replace","forEach","str","getSimplifiedTemplateResult","kind","templateLiteralExpr","quasis","quasiExpr","quasi","prevExpr","expressions","exprAsString","setExpression","push","part","_node","node","setTemplateString","tag","isIdentifier","identifier","stringSuffix","hasUnknownParams","innerExpressions","argExpr","newString","newRange","inner","reverse","split","setArray","condition","test","conditionValue","consequent","alternate","isConditional","setOptions","addOptions","items","elements","map","element","every","Boolean","setItems","optionalExpressionsStack","next","optional","pop","evaluated","getRenameIdentifier","walkClass","classy","superClass","walkExpression","body","classElement","key","wasTopLevel","topLevelScope","preWalkStatements","statements","index","len","preWalkStatement","blockPreWalkStatements","blockPreWalkStatement","walkStatements","walkStatement","preWalkBlockStatement","preWalkDoWhileStatement","preWalkForInStatement","preWalkForOfStatement","preWalkForStatement","preWalkFunctionDeclaration","preWalkIfStatement","preWalkLabeledStatement","preWalkSwitchStatement","preWalkTryStatement","preWalkVariableDeclaration","preWalkWhileStatement","preWalkWithStatement","blockPreWalkImportDeclaration","blockPreWalkExportAllDeclaration","blockPreWalkExportDefaultDeclaration","blockPreWalkExportNamedDeclaration","blockPreWalkVariableDeclaration","blockPreWalkClassDeclaration","walkBlockStatement","walkClassDeclaration","walkDoWhileStatement","walkExportDefaultDeclaration","walkExportNamedDeclaration","walkExpressionStatement","walkForInStatement","walkForOfStatement","walkForStatement","walkFunctionDeclaration","walkIfStatement","walkLabeledStatement","walkReturnStatement","walkSwitchStatement","walkThrowStatement","walkTryStatement","walkVariableDeclaration","walkWhileStatement","walkWithStatement","walkNestedStatement","inBlockScope","prev","preWalkSwitchCases","cases","discriminant","walkSwitchCases","walkTerminatingStatement","block","handler","preWalkCatchClause","finializer","inTry","walkCatchClause","finalizer","init","update","walkPattern","await","id","defineVariable","inFunctionScope","params","detectMode","source","specifier","specifiers","local","imported","enterDeclaration","declaration","onIdent","declarations","enterPattern","def","specifierIndex","exported","_preWalkVariableDeclaration","hookMap","decl","renameIdentifier","setVariable","switchCases","switchCase","catchClause","ident","walkArrayPattern","walkAssignmentPattern","walkMemberExpression","walkObjectPattern","walkRestElement","properties","prop","walkExpressions","walkArrayExpression","walkArrowFunctionExpression","walkAssignmentExpression","walkAwaitExpression","walkBinaryExpression","walkCallExpression","walkChainExpression","walkClassExpression","walkConditionalExpression","walkFunctionExpression","walkIdentifier","walkImportExpression","walkLogicalExpression","walkMetaProperty","walkNewExpression","walkObjectExpression","walkSequenceExpression","walkSpreadElement","walkTaggedTemplateExpression","walkTemplateLiteral","walkThisExpression","walkUnaryExpression","walkUpdateExpression","walkYieldExpression","propIndex","walkProperty","shorthand","inShorthand","scopeParams","currentStatement","old","walkLeftRightExpression","callHooksForInfo","endsWith","exprName","_walkIIFE","functionExpression","currentThis","getVarInfo","argOrThis","arrow","renameThis","varInfoForArgs","filter","idx","varInfo","isSimpleFunction","exprInfo","getCalleeMembers","result1","result2","members","walkMemberExpressionWithExpressionName","onUnhandled","args","callHooksForExpressionWithFallback","fallback","defined","callHooksForNameWithFallback","data","inScope","oldScope","isStrict","isAsmJs","definitions","createChild","undefineVariable","enterPatterns","hasThis","isLiteral","patterns","enterArrayPattern","enterAssignmentPattern","enterIdentifier","enterObjectPattern","enterRestElement","elementIndex","e","console","warn","parseString","Error","parseCalculatedString","code","conditional","parse","ast","Set","Buffer","isBuffer","toString","_parse","onInsertedSemicolon","pos","add","oldState","oldComments","oldSemicolons","oldStatementPath","oldPrevStatement","commentsStartPos","item","static","pureFlag","getComments","some","comment","rangeStart","rangeEnd","compare","needle","ge","commentsInRange","isAsiPosition","has","unsetAsiPosition","delete","isStatementLevelExpression","getTagData","tagVariable","oldInfo","newInfo","set","isVariableDefined","variableInfo","parseCommentOptions","val","runInNewContext","extractMemberExpressionChain","getFreeInfoFromVariable","varName","allowedTypes","rootMembers","rootName","resolvedRoot","calleeName","getNameForExpression","parserOptions","allowReturnOutsideFunction","error","threw","Array","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { Parser: AcornParser } = require(\"acorn\");\nconst { importAssertions } = require(\"acorn-import-assertions\");\nconst { SyncBailHook, HookMap } = require(\"tapable\");\nconst vm = require(\"vm\");\nconst Parser = require(\"../Parser\");\nconst StackedMap = require(\"../util/StackedMap\");\nconst binarySearchBounds = require(\"../util/binarySearchBounds\");\nconst memoize = require(\"../util/memoize\");\nconst BasicEvaluatedExpression = require(\"./BasicEvaluatedExpression\");\n\n/** @typedef {import(\"acorn\").Options} AcornOptions */\n/** @typedef {import(\"estree\").ArrayExpression} ArrayExpressionNode */\n/** @typedef {import(\"estree\").BinaryExpression} BinaryExpressionNode */\n/** @typedef {import(\"estree\").BlockStatement} BlockStatementNode */\n/** @typedef {import(\"estree\").SequenceExpression} SequenceExpressionNode */\n/** @typedef {import(\"estree\").CallExpression} CallExpressionNode */\n/** @typedef {import(\"estree\").ClassDeclaration} ClassDeclarationNode */\n/** @typedef {import(\"estree\").ClassExpression} ClassExpressionNode */\n/** @typedef {import(\"estree\").Comment} CommentNode */\n/** @typedef {import(\"estree\").ConditionalExpression} ConditionalExpressionNode */\n/** @typedef {import(\"estree\").Declaration} DeclarationNode */\n/** @typedef {import(\"estree\").PrivateIdentifier} PrivateIdentifierNode */\n/** @typedef {import(\"estree\").PropertyDefinition} PropertyDefinitionNode */\n/** @typedef {import(\"estree\").Expression} ExpressionNode */\n/** @typedef {import(\"estree\").Identifier} IdentifierNode */\n/** @typedef {import(\"estree\").IfStatement} IfStatementNode */\n/** @typedef {import(\"estree\").LabeledStatement} LabeledStatementNode */\n/** @typedef {import(\"estree\").Literal} LiteralNode */\n/** @typedef {import(\"estree\").LogicalExpression} LogicalExpressionNode */\n/** @typedef {import(\"estree\").ChainExpression} ChainExpressionNode */\n/** @typedef {import(\"estree\").MemberExpression} MemberExpressionNode */\n/** @typedef {import(\"estree\").MetaProperty} MetaPropertyNode */\n/** @typedef {import(\"estree\").MethodDefinition} MethodDefinitionNode */\n/** @typedef {import(\"estree\").ModuleDeclaration} ModuleDeclarationNode */\n/** @typedef {import(\"estree\").NewExpression} NewExpressionNode */\n/** @typedef {import(\"estree\").Node} AnyNode */\n/** @typedef {import(\"estree\").Program} ProgramNode */\n/** @typedef {import(\"estree\").Statement} StatementNode */\n/** @typedef {import(\"estree\").ImportDeclaration} ImportDeclarationNode */\n/** @typedef {import(\"estree\").ExportNamedDeclaration} ExportNamedDeclarationNode */\n/** @typedef {import(\"estree\").ExportDefaultDeclaration} ExportDefaultDeclarationNode */\n/** @typedef {import(\"estree\").ExportAllDeclaration} ExportAllDeclarationNode */\n/** @typedef {import(\"estree\").Super} SuperNode */\n/** @typedef {import(\"estree\").TaggedTemplateExpression} TaggedTemplateExpressionNode */\n/** @typedef {import(\"estree\").TemplateLiteral} TemplateLiteralNode */\n/** @typedef {import(\"estree\").ThisExpression} ThisExpressionNode */\n/** @typedef {import(\"estree\").UnaryExpression} UnaryExpressionNode */\n/** @typedef {import(\"estree\").VariableDeclarator} VariableDeclaratorNode */\n/** @template T @typedef {import(\"tapable\").AsArray<T>} AsArray<T> */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n/** @typedef {{declaredScope: ScopeInfo, freeName: string | true, tagInfo: TagInfo | undefined}} VariableInfoInterface */\n/** @typedef {{ name: string | VariableInfo, rootInfo: string | VariableInfo, getMembers: () => string[] }} GetInfoResult */\n\nconst EMPTY_ARRAY = [];\nconst ALLOWED_MEMBER_TYPES_CALL_EXPRESSION = 0b01;\nconst ALLOWED_MEMBER_TYPES_EXPRESSION = 0b10;\nconst ALLOWED_MEMBER_TYPES_ALL = 0b11;\n\n// Syntax: https://developer.mozilla.org/en/SpiderMonkey/Parser_API\n\nconst parser = AcornParser.extend(importAssertions);\n\nclass VariableInfo {\n\t/**\n\t * @param {ScopeInfo} declaredScope scope in which the variable is declared\n\t * @param {string | true} freeName which free name the variable aliases, or true when none\n\t * @param {TagInfo | undefined} tagInfo info about tags\n\t */\n\tconstructor(declaredScope, freeName, tagInfo) {\n\t\tthis.declaredScope = declaredScope;\n\t\tthis.freeName = freeName;\n\t\tthis.tagInfo = tagInfo;\n\t}\n}\n\n/** @typedef {string | ScopeInfo | VariableInfo} ExportedVariableInfo */\n/** @typedef {LiteralNode | string | null | undefined} ImportSource */\n/** @typedef {Omit<AcornOptions, \"sourceType\" | \"ecmaVersion\"> & { sourceType: \"module\" | \"script\" | \"auto\", ecmaVersion?: AcornOptions[\"ecmaVersion\"] }} ParseOptions */\n\n/**\n * @typedef {Object} TagInfo\n * @property {any} tag\n * @property {any} data\n * @property {TagInfo | undefined} next\n */\n\n/**\n * @typedef {Object} ScopeInfo\n * @property {StackedMap<string, VariableInfo | ScopeInfo>} definitions\n * @property {boolean | \"arrow\"} topLevelScope\n * @property {boolean} inShorthand\n * @property {boolean} isStrict\n * @property {boolean} isAsmJs\n * @property {boolean} inTry\n */\n\nconst joinRanges = (startRange, endRange) => {\n\tif (!endRange) return startRange;\n\tif (!startRange) return endRange;\n\treturn [startRange[0], endRange[1]];\n};\n\nconst objectAndMembersToName = (object, membersReversed) => {\n\tlet name = object;\n\tfor (let i = membersReversed.length - 1; i >= 0; i--) {\n\t\tname = name + \".\" + membersReversed[i];\n\t}\n\treturn name;\n};\n\nconst getRootName = expression => {\n\tswitch (expression.type) {\n\t\tcase \"Identifier\":\n\t\t\treturn expression.name;\n\t\tcase \"ThisExpression\":\n\t\t\treturn \"this\";\n\t\tcase \"MetaProperty\":\n\t\t\treturn `${expression.meta.name}.${expression.property.name}`;\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n};\n\n/** @type {AcornOptions} */\nconst defaultParserOptions = {\n\tranges: true,\n\tlocations: true,\n\tecmaVersion: \"latest\",\n\tsourceType: \"module\",\n\t// https://github.com/tc39/proposal-hashbang\n\tallowHashBang: true,\n\tonComment: null\n};\n\n// regexp to match at least one \"magic comment\"\nconst webpackCommentRegExp = new RegExp(/(^|\\W)webpack[A-Z]{1,}[A-Za-z]{1,}:/);\n\nconst EMPTY_COMMENT_OPTIONS = {\n\toptions: null,\n\terrors: null\n};\n\nclass JavascriptParser extends Parser {\n\t/**\n\t * @param {\"module\" | \"script\" | \"auto\"} sourceType default source type\n\t */\n\tconstructor(sourceType = \"auto\") {\n\t\tsuper();\n\t\tthis.hooks = Object.freeze({\n\t\t\t/** @type {HookMap<SyncBailHook<[UnaryExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateTypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluate: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[IdentifierNode | ThisExpressionNode | MemberExpressionNode | MetaPropertyNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateIdentifier: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[IdentifierNode | ThisExpressionNode | MemberExpressionNode], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateDefinedIdentifier: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpressionNode, BasicEvaluatedExpression | undefined], BasicEvaluatedExpression | undefined | null>>} */\n\t\t\tevaluateCallExpressionMember: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"param\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode | DeclarationNode | PrivateIdentifierNode, number], boolean | void>>} */\n\t\t\tisPure: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"commentsStartPosition\"])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n\t\t\tpreStatement: new SyncBailHook([\"statement\"]),\n\n\t\t\t/** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n\t\t\tblockPreStatement: new SyncBailHook([\"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[StatementNode | ModuleDeclarationNode], boolean | void>} */\n\t\t\tstatement: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[IfStatementNode], boolean | void>} */\n\t\t\tstatementIf: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n\t\t\tclassExtendsExpression: new SyncBailHook([\n\t\t\t\t\"expression\",\n\t\t\t\t\"classDefinition\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[MethodDefinitionNode | PropertyDefinitionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n\t\t\tclassBodyElement: new SyncBailHook([\"element\", \"classDefinition\"]),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode, MethodDefinitionNode | PropertyDefinitionNode, ClassExpressionNode | ClassDeclarationNode], boolean | void>} */\n\t\t\tclassBodyValue: new SyncBailHook([\n\t\t\t\t\"expression\",\n\t\t\t\t\"element\",\n\t\t\t\t\"classDefinition\"\n\t\t\t]),\n\t\t\t/** @type {HookMap<SyncBailHook<[LabeledStatementNode], boolean | void>>} */\n\t\t\tlabel: new HookMap(() => new SyncBailHook([\"statement\"])),\n\t\t\t/** @type {SyncBailHook<[ImportDeclarationNode, ImportSource], boolean | void>} */\n\t\t\timport: new SyncBailHook([\"statement\", \"source\"]),\n\t\t\t/** @type {SyncBailHook<[ImportDeclarationNode, ImportSource, string, string], boolean | void>} */\n\t\t\timportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"source\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"identifierName\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode], boolean | void>} */\n\t\t\texport: new SyncBailHook([\"statement\"]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, ImportSource], boolean | void>} */\n\t\t\texportImport: new SyncBailHook([\"statement\", \"source\"]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, DeclarationNode], boolean | void>} */\n\t\t\texportDeclaration: new SyncBailHook([\"statement\", \"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[ExportDefaultDeclarationNode, DeclarationNode], boolean | void>} */\n\t\t\texportExpression: new SyncBailHook([\"statement\", \"declaration\"]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, string, string, number | undefined], boolean | void>} */\n\t\t\texportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"identifierName\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"index\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[ExportNamedDeclarationNode | ExportAllDeclarationNode, ImportSource, string, string, number | undefined], boolean | void>} */\n\t\t\texportImportSpecifier: new SyncBailHook([\n\t\t\t\t\"statement\",\n\t\t\t\t\"source\",\n\t\t\t\t\"identifierName\",\n\t\t\t\t\"exportName\",\n\t\t\t\t\"index\"\n\t\t\t]),\n\t\t\t/** @type {SyncBailHook<[VariableDeclaratorNode, StatementNode], boolean | void>} */\n\t\t\tpreDeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n\t\t\t/** @type {SyncBailHook<[VariableDeclaratorNode, StatementNode], boolean | void>} */\n\t\t\tdeclarator: new SyncBailHook([\"declarator\", \"statement\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n\t\t\tvarDeclaration: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n\t\t\tvarDeclarationLet: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n\t\t\tvarDeclarationConst: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[DeclarationNode], boolean | void>>} */\n\t\t\tvarDeclarationVar: new HookMap(() => new SyncBailHook([\"declaration\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[IdentifierNode], boolean | void>>} */\n\t\t\tpattern: new HookMap(() => new SyncBailHook([\"pattern\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\tcanRename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\trename: new HookMap(() => new SyncBailHook([\"initExpression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[import(\"estree\").AssignmentExpression], boolean | void>>} */\n\t\t\tassign: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[import(\"estree\").AssignmentExpression, string[]], boolean | void>>} */\n\t\t\tassignMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\ttypeof: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n\t\t\timportCall: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n\t\t\ttopLevelAwait: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\tcall: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** Something like \"a.b()\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[CallExpressionNode, string[]], boolean | void>>} */\n\t\t\tcallMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\"])\n\t\t\t),\n\t\t\t/** Something like \"a.b().c.d\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode, string[], CallExpressionNode, string[]], boolean | void>>} */\n\t\t\tmemberChainOfCallMemberChain: new HookMap(\n\t\t\t\t() =>\n\t\t\t\t\tnew SyncBailHook([\n\t\t\t\t\t\t\"expression\",\n\t\t\t\t\t\t\"calleeMembers\",\n\t\t\t\t\t\t\"callExpression\",\n\t\t\t\t\t\t\"members\"\n\t\t\t\t\t])\n\t\t\t),\n\t\t\t/** Something like \"a.b().c.d()\"\" */\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode, string[], CallExpressionNode, string[]], boolean | void>>} */\n\t\t\tcallMemberChainOfCallMemberChain: new HookMap(\n\t\t\t\t() =>\n\t\t\t\t\tnew SyncBailHook([\n\t\t\t\t\t\t\"expression\",\n\t\t\t\t\t\t\"calleeMembers\",\n\t\t\t\t\t\t\"innerCallExpression\",\n\t\t\t\t\t\t\"members\"\n\t\t\t\t\t])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[ChainExpressionNode], boolean | void>} */\n\t\t\toptionalChaining: new SyncBailHook([\"optionalChaining\"]),\n\t\t\t/** @type {HookMap<SyncBailHook<[NewExpressionNode], boolean | void>>} */\n\t\t\tnew: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode], boolean | void>>} */\n\t\t\texpression: new HookMap(() => new SyncBailHook([\"expression\"])),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode, string[]], boolean | void>>} */\n\t\t\texpressionMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\"])\n\t\t\t),\n\t\t\t/** @type {HookMap<SyncBailHook<[ExpressionNode, string[]], boolean | void>>} */\n\t\t\tunhandledExpressionMemberChain: new HookMap(\n\t\t\t\t() => new SyncBailHook([\"expression\", \"members\"])\n\t\t\t),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n\t\t\texpressionConditionalOperator: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[ExpressionNode], boolean | void>} */\n\t\t\texpressionLogicalOperator: new SyncBailHook([\"expression\"]),\n\t\t\t/** @type {SyncBailHook<[ProgramNode, CommentNode[]], boolean | void>} */\n\t\t\tprogram: new SyncBailHook([\"ast\", \"comments\"]),\n\t\t\t/** @type {SyncBailHook<[ProgramNode, CommentNode[]], boolean | void>} */\n\t\t\tfinish: new SyncBailHook([\"ast\", \"comments\"])\n\t\t});\n\t\tthis.sourceType = sourceType;\n\t\t/** @type {ScopeInfo} */\n\t\tthis.scope = undefined;\n\t\t/** @type {ParserState} */\n\t\tthis.state = undefined;\n\t\tthis.comments = undefined;\n\t\tthis.semicolons = undefined;\n\t\t/** @type {(StatementNode|ExpressionNode)[]} */\n\t\tthis.statementPath = undefined;\n\t\tthis.prevStatement = undefined;\n\t\tthis.currentTagData = undefined;\n\t\tthis._initializeEvaluating();\n\t}\n\n\t_initializeEvaluating() {\n\t\tthis.hooks.evaluate.for(\"Literal\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {LiteralNode} */ (_expr);\n\n\t\t\tswitch (typeof expr.value) {\n\t\t\t\tcase \"number\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setNumber(expr.value)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"bigint\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBigInt(expr.value)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"string\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(expr.value)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(expr.value)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\t\t\tif (expr.value === null) {\n\t\t\t\treturn new BasicEvaluatedExpression().setNull().setRange(expr.range);\n\t\t\t}\n\t\t\tif (expr.value instanceof RegExp) {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setRegExp(expr.value)\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluate.for(\"NewExpression\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {NewExpressionNode} */ (_expr);\n\t\t\tconst callee = expr.callee;\n\t\t\tif (\n\t\t\t\tcallee.type !== \"Identifier\" ||\n\t\t\t\tcallee.name !== \"RegExp\" ||\n\t\t\t\texpr.arguments.length > 2 ||\n\t\t\t\tthis.getVariableInfo(\"RegExp\") !== \"RegExp\"\n\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tlet regExp, flags;\n\t\t\tconst arg1 = expr.arguments[0];\n\n\t\t\tif (arg1) {\n\t\t\t\tif (arg1.type === \"SpreadElement\") return;\n\n\t\t\t\tconst evaluatedRegExp = this.evaluateExpression(arg1);\n\n\t\t\t\tif (!evaluatedRegExp) return;\n\n\t\t\t\tregExp = evaluatedRegExp.asString();\n\n\t\t\t\tif (!regExp) return;\n\t\t\t} else {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setRegExp(new RegExp(\"\"))\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\n\t\t\tconst arg2 = expr.arguments[1];\n\n\t\t\tif (arg2) {\n\t\t\t\tif (arg2.type === \"SpreadElement\") return;\n\n\t\t\t\tconst evaluatedFlags = this.evaluateExpression(arg2);\n\n\t\t\t\tif (!evaluatedFlags) return;\n\n\t\t\t\tif (!evaluatedFlags.isUndefined()) {\n\t\t\t\t\tflags = evaluatedFlags.asString();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tflags === undefined ||\n\t\t\t\t\t\t!BasicEvaluatedExpression.isValidRegExpFlags(flags)\n\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t.setRegExp(flags ? new RegExp(regExp, flags) : new RegExp(regExp))\n\t\t\t\t.setRange(expr.range);\n\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"LogicalExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {LogicalExpressionNode} */ (_expr);\n\n\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\tif (!left) return;\n\t\t\t\tlet returnRight = false;\n\t\t\t\t/** @type {boolean|undefined} */\n\t\t\t\tlet allowedRight;\n\t\t\t\tif (expr.operator === \"&&\") {\n\t\t\t\t\tconst leftAsBool = left.asBool();\n\t\t\t\t\tif (leftAsBool === false) return left.setRange(expr.range);\n\t\t\t\t\treturnRight = leftAsBool === true;\n\t\t\t\t\tallowedRight = false;\n\t\t\t\t} else if (expr.operator === \"||\") {\n\t\t\t\t\tconst leftAsBool = left.asBool();\n\t\t\t\t\tif (leftAsBool === true) return left.setRange(expr.range);\n\t\t\t\t\treturnRight = leftAsBool === false;\n\t\t\t\t\tallowedRight = true;\n\t\t\t\t} else if (expr.operator === \"??\") {\n\t\t\t\t\tconst leftAsNullish = left.asNullish();\n\t\t\t\t\tif (leftAsNullish === false) return left.setRange(expr.range);\n\t\t\t\t\tif (leftAsNullish !== true) return;\n\t\t\t\t\treturnRight = true;\n\t\t\t\t} else return;\n\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\tif (!right) return;\n\t\t\t\tif (returnRight) {\n\t\t\t\t\tif (left.couldHaveSideEffects()) right.setSideEffects();\n\t\t\t\t\treturn right.setRange(expr.range);\n\t\t\t\t}\n\n\t\t\t\tconst asBool = right.asBool();\n\n\t\t\t\tif (allowedRight === true && asBool === true) {\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setRange(expr.range)\n\t\t\t\t\t\t.setTruthy();\n\t\t\t\t} else if (allowedRight === false && asBool === false) {\n\t\t\t\t\treturn new BasicEvaluatedExpression().setRange(expr.range).setFalsy();\n\t\t\t\t}\n\t\t\t});\n\n\t\tconst valueAsExpression = (value, expr, sideEffects) => {\n\t\t\tswitch (typeof value) {\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"number\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setNumber(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"bigint\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBigInt(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\tcase \"string\":\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(value)\n\t\t\t\t\t\t.setSideEffects(sideEffects)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\t\t};\n\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"BinaryExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {BinaryExpressionNode} */ (_expr);\n\n\t\t\t\tconst handleConstOperation = fn => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tif (!left || !left.isCompileTimeValue()) return;\n\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tif (!right || !right.isCompileTimeValue()) return;\n\n\t\t\t\t\tconst result = fn(\n\t\t\t\t\t\tleft.asCompileTimeValue(),\n\t\t\t\t\t\tright.asCompileTimeValue()\n\t\t\t\t\t);\n\t\t\t\t\treturn valueAsExpression(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\texpr,\n\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tconst isAlwaysDifferent = (a, b) =>\n\t\t\t\t\t(a === true && b === false) || (a === false && b === true);\n\n\t\t\t\tconst handleTemplateStringCompare = (left, right, res, eql) => {\n\t\t\t\t\tconst getPrefix = parts => {\n\t\t\t\t\t\tlet value = \"\";\n\t\t\t\t\t\tfor (const p of parts) {\n\t\t\t\t\t\t\tconst v = p.asString();\n\t\t\t\t\t\t\tif (v !== undefined) value += v;\n\t\t\t\t\t\t\telse break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t};\n\t\t\t\t\tconst getSuffix = parts => {\n\t\t\t\t\t\tlet value = \"\";\n\t\t\t\t\t\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\t\t\t\t\t\tconst v = parts[i].asString();\n\t\t\t\t\t\t\tif (v !== undefined) value = v + value;\n\t\t\t\t\t\t\telse break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t};\n\t\t\t\t\tconst leftPrefix = getPrefix(left.parts);\n\t\t\t\t\tconst rightPrefix = getPrefix(right.parts);\n\t\t\t\t\tconst leftSuffix = getSuffix(left.parts);\n\t\t\t\t\tconst rightSuffix = getSuffix(right.parts);\n\t\t\t\t\tconst lenPrefix = Math.min(leftPrefix.length, rightPrefix.length);\n\t\t\t\t\tconst lenSuffix = Math.min(leftSuffix.length, rightSuffix.length);\n\t\t\t\t\tif (\n\t\t\t\t\t\tleftPrefix.slice(0, lenPrefix) !==\n\t\t\t\t\t\t\trightPrefix.slice(0, lenPrefix) ||\n\t\t\t\t\t\tleftSuffix.slice(-lenSuffix) !== rightSuffix.slice(-lenSuffix)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst handleStrictEqualityComparison = eql => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tif (!left) return;\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tif (!right) return;\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tres.setRange(expr.range);\n\n\t\t\t\t\tconst leftConst = left.isCompileTimeValue();\n\t\t\t\t\tconst rightConst = right.isCompileTimeValue();\n\n\t\t\t\t\tif (leftConst && rightConst) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(\n\t\t\t\t\t\t\t\teql ===\n\t\t\t\t\t\t\t\t\t(left.asCompileTimeValue() === right.asCompileTimeValue())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (left.isArray() && right.isArray()) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (left.isTemplateString() && right.isTemplateString()) {\n\t\t\t\t\t\treturn handleTemplateStringCompare(left, right, res, eql);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst leftPrimitive = left.isPrimitiveType();\n\t\t\t\t\tconst rightPrimitive = right.isPrimitiveType();\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t// Primitive !== Object or\n\t\t\t\t\t\t// compile-time object types are never equal to something at runtime\n\t\t\t\t\t\t(leftPrimitive === false &&\n\t\t\t\t\t\t\t(leftConst || rightPrimitive === true)) ||\n\t\t\t\t\t\t(rightPrimitive === false &&\n\t\t\t\t\t\t\t(rightConst || leftPrimitive === true)) ||\n\t\t\t\t\t\t// Different nullish or boolish status also means not equal\n\t\t\t\t\t\tisAlwaysDifferent(left.asBool(), right.asBool()) ||\n\t\t\t\t\t\tisAlwaysDifferent(left.asNullish(), right.asNullish())\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst handleAbstractEqualityComparison = eql => {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tif (!left) return;\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tif (!right) return;\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tres.setRange(expr.range);\n\n\t\t\t\t\tconst leftConst = left.isCompileTimeValue();\n\t\t\t\t\tconst rightConst = right.isCompileTimeValue();\n\n\t\t\t\t\tif (leftConst && rightConst) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(\n\t\t\t\t\t\t\t\teql ===\n\t\t\t\t\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\t\t\t\t\t(left.asCompileTimeValue() == right.asCompileTimeValue())\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (left.isArray() && right.isArray()) {\n\t\t\t\t\t\treturn res\n\t\t\t\t\t\t\t.setBoolean(!eql)\n\t\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t\tleft.couldHaveSideEffects() || right.couldHaveSideEffects()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (left.isTemplateString() && right.isTemplateString()) {\n\t\t\t\t\t\treturn handleTemplateStringCompare(left, right, res, eql);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (expr.operator === \"+\") {\n\t\t\t\t\tconst left = this.evaluateExpression(expr.left);\n\t\t\t\t\tif (!left) return;\n\t\t\t\t\tconst right = this.evaluateExpression(expr.right);\n\t\t\t\t\tif (!right) return;\n\t\t\t\t\tconst res = new BasicEvaluatedExpression();\n\t\t\t\t\tif (left.isString()) {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\tres.setString(left.string + right.string);\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\tres.setString(left.string + right.number);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tright.isWrapped() &&\n\t\t\t\t\t\t\tright.prefix &&\n\t\t\t\t\t\t\tright.prefix.isString()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// \"left\" + (\"prefix\" + inner + \"postfix\")\n\t\t\t\t\t\t\t// => (\"leftPrefix\" + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(left.string + right.prefix.string)\n\t\t\t\t\t\t\t\t\t.setRange(joinRanges(left.range, right.prefix.range)),\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// \"left\" + ([null] + inner + \"postfix\")\n\t\t\t\t\t\t\t// => (\"left\" + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// \"left\" + expr\n\t\t\t\t\t\t\t// => (\"left\" + expr + \"\")\n\t\t\t\t\t\t\tres.setWrapped(left, null, [right]);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isNumber()) {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\tres.setString(left.number + right.string);\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\tres.setNumber(left.number + right.number);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isBigInt()) {\n\t\t\t\t\t\tif (right.isBigInt()) {\n\t\t\t\t\t\t\tres.setBigInt(left.bigint + right.bigint);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (left.isWrapped()) {\n\t\t\t\t\t\tif (left.postfix && left.postfix.isString() && right.isString()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + \"postfix\") + \"right\"\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"postfixRight\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(left.postfix.string + right.string)\n\t\t\t\t\t\t\t\t\t.setRange(joinRanges(left.postfix.range, right.range)),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tleft.postfix &&\n\t\t\t\t\t\t\tleft.postfix.isString() &&\n\t\t\t\t\t\t\tright.isNumber()\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + \"postfix\") + 123\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"postfix123\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(left.postfix.string + right.number)\n\t\t\t\t\t\t\t\t\t.setRange(joinRanges(left.postfix.range, right.range)),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isString()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + [null]) + \"right\"\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"right\")\n\t\t\t\t\t\t\tres.setWrapped(left.prefix, right, left.wrappedInnerExpressions);\n\t\t\t\t\t\t} else if (right.isNumber()) {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + [null]) + 123\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + \"123\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnew BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t\t.setString(right.number + \"\")\n\t\t\t\t\t\t\t\t\t.setRange(right.range),\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// (\"prefix1\" + inner1 + \"postfix1\") + (\"prefix2\" + inner2 + \"postfix2\")\n\t\t\t\t\t\t\t// (\"prefix1\" + inner1 + \"postfix1\" + \"prefix2\" + inner2 + \"postfix2\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tright.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions\n\t\t\t\t\t\t\t\t\t\t.concat(left.postfix ? [left.postfix] : [])\n\t\t\t\t\t\t\t\t\t\t.concat(right.prefix ? [right.prefix] : [])\n\t\t\t\t\t\t\t\t\t\t.concat(right.wrappedInnerExpressions)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// (\"prefix\" + inner + postfix) + expr\n\t\t\t\t\t\t\t// => (\"prefix\" + inner + postfix + expr + [null])\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tleft.prefix,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\tleft.wrappedInnerExpressions.concat(\n\t\t\t\t\t\t\t\t\t\tleft.postfix ? [left.postfix, right] : [right]\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (right.isString()) {\n\t\t\t\t\t\t\t// left + \"right\"\n\t\t\t\t\t\t\t// => ([null] + left + \"right\")\n\t\t\t\t\t\t\tres.setWrapped(null, right, [left]);\n\t\t\t\t\t\t} else if (right.isWrapped()) {\n\t\t\t\t\t\t\t// left + (prefix + inner + \"postfix\")\n\t\t\t\t\t\t\t// => ([null] + left + prefix + inner + \"postfix\")\n\t\t\t\t\t\t\tres.setWrapped(\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tright.postfix,\n\t\t\t\t\t\t\t\tright.wrappedInnerExpressions &&\n\t\t\t\t\t\t\t\t\t(right.prefix ? [left, right.prefix] : [left]).concat(\n\t\t\t\t\t\t\t\t\t\tright.wrappedInnerExpressions\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (left.couldHaveSideEffects() || right.couldHaveSideEffects())\n\t\t\t\t\t\tres.setSideEffects();\n\t\t\t\t\tres.setRange(expr.range);\n\t\t\t\t\treturn res;\n\t\t\t\t} else if (expr.operator === \"-\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l - r);\n\t\t\t\t} else if (expr.operator === \"*\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l * r);\n\t\t\t\t} else if (expr.operator === \"/\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l / r);\n\t\t\t\t} else if (expr.operator === \"**\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l ** r);\n\t\t\t\t} else if (expr.operator === \"===\") {\n\t\t\t\t\treturn handleStrictEqualityComparison(true);\n\t\t\t\t} else if (expr.operator === \"==\") {\n\t\t\t\t\treturn handleAbstractEqualityComparison(true);\n\t\t\t\t} else if (expr.operator === \"!==\") {\n\t\t\t\t\treturn handleStrictEqualityComparison(false);\n\t\t\t\t} else if (expr.operator === \"!=\") {\n\t\t\t\t\treturn handleAbstractEqualityComparison(false);\n\t\t\t\t} else if (expr.operator === \"&\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l & r);\n\t\t\t\t} else if (expr.operator === \"|\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l | r);\n\t\t\t\t} else if (expr.operator === \"^\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l ^ r);\n\t\t\t\t} else if (expr.operator === \">>>\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >>> r);\n\t\t\t\t} else if (expr.operator === \">>\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >> r);\n\t\t\t\t} else if (expr.operator === \"<<\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l << r);\n\t\t\t\t} else if (expr.operator === \"<\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l < r);\n\t\t\t\t} else if (expr.operator === \">\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l > r);\n\t\t\t\t} else if (expr.operator === \"<=\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l <= r);\n\t\t\t\t} else if (expr.operator === \">=\") {\n\t\t\t\t\treturn handleConstOperation((l, r) => l >= r);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"UnaryExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {UnaryExpressionNode} */ (_expr);\n\n\t\t\t\tconst handleConstOperation = fn => {\n\t\t\t\t\tconst argument = this.evaluateExpression(expr.argument);\n\t\t\t\t\tif (!argument || !argument.isCompileTimeValue()) return;\n\t\t\t\t\tconst result = fn(argument.asCompileTimeValue());\n\t\t\t\t\treturn valueAsExpression(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\texpr,\n\t\t\t\t\t\targument.couldHaveSideEffects()\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tif (expr.operator === \"typeof\") {\n\t\t\t\t\tswitch (expr.argument.type) {\n\t\t\t\t\t\tcase \"Identifier\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForName(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument.name,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"MetaProperty\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForName(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\tgetRootName(expr.argument),\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"MemberExpression\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForExpression(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"ChainExpression\": {\n\t\t\t\t\t\t\tconst res = this.callHooksForExpression(\n\t\t\t\t\t\t\t\tthis.hooks.evaluateTypeof,\n\t\t\t\t\t\t\t\texpr.argument.expression,\n\t\t\t\t\t\t\t\texpr\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (res !== undefined) return res;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase \"FunctionExpression\": {\n\t\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t\t.setString(\"function\")\n\t\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst arg = this.evaluateExpression(expr.argument);\n\t\t\t\t\tif (arg.isUnknown()) return;\n\t\t\t\t\tif (arg.isString()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"string\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isWrapped()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"string\")\n\t\t\t\t\t\t\t.setSideEffects()\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isUndefined()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"undefined\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isNumber()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"number\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isBigInt()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"bigint\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isBoolean()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"boolean\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isConstArray() || arg.isRegExp() || arg.isNull()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"object\")\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t\tif (arg.isArray()) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setString(\"object\")\n\t\t\t\t\t\t\t.setSideEffects(arg.couldHaveSideEffects())\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t} else if (expr.operator === \"!\") {\n\t\t\t\t\tconst argument = this.evaluateExpression(expr.argument);\n\t\t\t\t\tif (!argument) return;\n\t\t\t\t\tconst bool = argument.asBool();\n\t\t\t\t\tif (typeof bool !== \"boolean\") return;\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setBoolean(!bool)\n\t\t\t\t\t\t.setSideEffects(argument.couldHaveSideEffects())\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t} else if (expr.operator === \"~\") {\n\t\t\t\t\treturn handleConstOperation(v => ~v);\n\t\t\t\t} else if (expr.operator === \"+\") {\n\t\t\t\t\treturn handleConstOperation(v => +v);\n\t\t\t\t} else if (expr.operator === \"-\") {\n\t\t\t\t\treturn handleConstOperation(v => -v);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluateTypeof.for(\"undefined\").tap(\"JavascriptParser\", expr => {\n\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t.setString(\"undefined\")\n\t\t\t\t.setRange(expr.range);\n\t\t});\n\t\tthis.hooks.evaluate.for(\"Identifier\").tap(\"JavascriptParser\", expr => {\n\t\t\tif (/** @type {IdentifierNode} */ (expr).name === \"undefined\") {\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setUndefined()\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t}\n\t\t});\n\t\t/**\n\t\t * @param {string} exprType expression type name\n\t\t * @param {function(ExpressionNode): GetInfoResult | undefined} getInfo get info\n\t\t * @returns {void}\n\t\t */\n\t\tconst tapEvaluateWithVariableInfo = (exprType, getInfo) => {\n\t\t\t/** @type {ExpressionNode | undefined} */\n\t\t\tlet cachedExpression = undefined;\n\t\t\t/** @type {GetInfoResult | undefined} */\n\t\t\tlet cachedInfo = undefined;\n\t\t\tthis.hooks.evaluate.for(exprType).tap(\"JavascriptParser\", expr => {\n\t\t\t\tconst expression = /** @type {MemberExpressionNode} */ (expr);\n\n\t\t\t\tconst info = getInfo(expr);\n\t\t\t\tif (info !== undefined) {\n\t\t\t\t\treturn this.callHooksForInfoWithFallback(\n\t\t\t\t\t\tthis.hooks.evaluateIdentifier,\n\t\t\t\t\t\tinfo.name,\n\t\t\t\t\t\tname => {\n\t\t\t\t\t\t\tcachedExpression = expression;\n\t\t\t\t\t\t\tcachedInfo = info;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname => {\n\t\t\t\t\t\t\tconst hook = this.hooks.evaluateDefinedIdentifier.get(name);\n\t\t\t\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\t\t\t\treturn hook.call(expression);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\texpression\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.hooks.evaluate\n\t\t\t\t.for(exprType)\n\t\t\t\t.tap({ name: \"JavascriptParser\", stage: 100 }, expr => {\n\t\t\t\t\tconst info = cachedExpression === expr ? cachedInfo : getInfo(expr);\n\t\t\t\t\tif (info !== undefined) {\n\t\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t\t.setIdentifier(info.name, info.rootInfo, info.getMembers)\n\t\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tthis.hooks.finish.tap(\"JavascriptParser\", () => {\n\t\t\t\t// Cleanup for GC\n\t\t\t\tcachedExpression = cachedInfo = undefined;\n\t\t\t});\n\t\t};\n\t\ttapEvaluateWithVariableInfo(\"Identifier\", expr => {\n\t\t\tconst info = this.getVariableInfo(\n\t\t\t\t/** @type {IdentifierNode} */ (expr).name\n\t\t\t);\n\t\t\tif (\n\t\t\t\ttypeof info === \"string\" ||\n\t\t\t\t(info instanceof VariableInfo && typeof info.freeName === \"string\")\n\t\t\t) {\n\t\t\t\treturn { name: info, rootInfo: info, getMembers: () => [] };\n\t\t\t}\n\t\t});\n\t\ttapEvaluateWithVariableInfo(\"ThisExpression\", expr => {\n\t\t\tconst info = this.getVariableInfo(\"this\");\n\t\t\tif (\n\t\t\t\ttypeof info === \"string\" ||\n\t\t\t\t(info instanceof VariableInfo && typeof info.freeName === \"string\")\n\t\t\t) {\n\t\t\t\treturn { name: info, rootInfo: info, getMembers: () => [] };\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluate.for(\"MetaProperty\").tap(\"JavascriptParser\", expr => {\n\t\t\tconst metaProperty = /** @type {MetaPropertyNode} */ (expr);\n\n\t\t\treturn this.callHooksForName(\n\t\t\t\tthis.hooks.evaluateIdentifier,\n\t\t\t\tgetRootName(expr),\n\t\t\t\tmetaProperty\n\t\t\t);\n\t\t});\n\t\ttapEvaluateWithVariableInfo(\"MemberExpression\", expr =>\n\t\t\tthis.getMemberExpressionInfo(\n\t\t\t\t/** @type {MemberExpressionNode} */ (expr),\n\t\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t\t)\n\t\t);\n\n\t\tthis.hooks.evaluate.for(\"CallExpression\").tap(\"JavascriptParser\", _expr => {\n\t\t\tconst expr = /** @type {CallExpressionNode} */ (_expr);\n\t\t\tif (\n\t\t\t\texpr.callee.type !== \"MemberExpression\" ||\n\t\t\t\texpr.callee.property.type !==\n\t\t\t\t\t(expr.callee.computed ? \"Literal\" : \"Identifier\")\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// type Super also possible here\n\t\t\tconst param = this.evaluateExpression(\n\t\t\t\t/** @type {ExpressionNode} */ (expr.callee.object)\n\t\t\t);\n\t\t\tif (!param) return;\n\t\t\tconst property =\n\t\t\t\texpr.callee.property.type === \"Literal\"\n\t\t\t\t\t? `${expr.callee.property.value}`\n\t\t\t\t\t: expr.callee.property.name;\n\t\t\tconst hook = this.hooks.evaluateCallExpressionMember.get(property);\n\t\t\tif (hook !== undefined) {\n\t\t\t\treturn hook.call(expr, param);\n\t\t\t}\n\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"indexOf\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length === 0) return;\n\t\t\t\tconst [arg1, arg2] = expr.arguments;\n\t\t\t\tif (arg1.type === \"SpreadElement\") return;\n\t\t\t\tconst arg1Eval = this.evaluateExpression(arg1);\n\t\t\t\tif (!arg1Eval.isString()) return;\n\t\t\t\tconst arg1Value = arg1Eval.string;\n\n\t\t\t\tlet result;\n\t\t\t\tif (arg2) {\n\t\t\t\t\tif (arg2.type === \"SpreadElement\") return;\n\t\t\t\t\tconst arg2Eval = this.evaluateExpression(arg2);\n\t\t\t\t\tif (!arg2Eval.isNumber()) return;\n\t\t\t\t\tresult = param.string.indexOf(arg1Value, arg2Eval.number);\n\t\t\t\t} else {\n\t\t\t\t\tresult = param.string.indexOf(arg1Value);\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setNumber(result)\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"replace\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length !== 2) return;\n\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\tif (expr.arguments[1].type === \"SpreadElement\") return;\n\t\t\t\tlet arg1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\tlet arg2 = this.evaluateExpression(expr.arguments[1]);\n\t\t\t\tif (!arg1.isString() && !arg1.isRegExp()) return;\n\t\t\t\tconst arg1Value = arg1.regExp || arg1.string;\n\t\t\t\tif (!arg2.isString()) return;\n\t\t\t\tconst arg2Value = arg2.string;\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setString(param.string.replace(arg1Value, arg2Value))\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t});\n\t\t[\"substr\", \"substring\", \"slice\"].forEach(fn => {\n\t\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t\t.for(fn)\n\t\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\t\tif (!param.isString()) return;\n\t\t\t\t\tlet arg1;\n\t\t\t\t\tlet result,\n\t\t\t\t\t\tstr = param.string;\n\t\t\t\t\tswitch (expr.arguments.length) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\targ1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\t\tif (!arg1.isNumber()) return;\n\t\t\t\t\t\t\tresult = str[fn](arg1.number);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2: {\n\t\t\t\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\tif (expr.arguments[1].type === \"SpreadElement\") return;\n\t\t\t\t\t\t\targ1 = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\t\tconst arg2 = this.evaluateExpression(expr.arguments[1]);\n\t\t\t\t\t\t\tif (!arg1.isNumber()) return;\n\t\t\t\t\t\t\tif (!arg2.isNumber()) return;\n\t\t\t\t\t\t\tresult = str[fn](arg1.number, arg2.number);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(result)\n\t\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t});\n\t\t});\n\n\t\t/**\n\t\t * @param {\"cooked\" | \"raw\"} kind kind of values to get\n\t\t * @param {TemplateLiteralNode} templateLiteralExpr TemplateLiteral expr\n\t\t * @returns {{quasis: BasicEvaluatedExpression[], parts: BasicEvaluatedExpression[]}} Simplified template\n\t\t */\n\t\tconst getSimplifiedTemplateResult = (kind, templateLiteralExpr) => {\n\t\t\t/** @type {BasicEvaluatedExpression[]} */\n\t\t\tconst quasis = [];\n\t\t\t/** @type {BasicEvaluatedExpression[]} */\n\t\t\tconst parts = [];\n\n\t\t\tfor (let i = 0; i < templateLiteralExpr.quasis.length; i++) {\n\t\t\t\tconst quasiExpr = templateLiteralExpr.quasis[i];\n\t\t\t\tconst quasi = quasiExpr.value[kind];\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tconst prevExpr = parts[parts.length - 1];\n\t\t\t\t\tconst expr = this.evaluateExpression(\n\t\t\t\t\t\ttemplateLiteralExpr.expressions[i - 1]\n\t\t\t\t\t);\n\t\t\t\t\tconst exprAsString = expr.asString();\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof exprAsString === \"string\" &&\n\t\t\t\t\t\t!expr.couldHaveSideEffects()\n\t\t\t\t\t) {\n\t\t\t\t\t\t// We can merge quasi + expr + quasi when expr\n\t\t\t\t\t\t// is a const string\n\n\t\t\t\t\t\tprevExpr.setString(prevExpr.string + exprAsString + quasi);\n\t\t\t\t\t\tprevExpr.setRange([prevExpr.range[0], quasiExpr.range[1]]);\n\t\t\t\t\t\t// We unset the expression as it doesn't match to a single expression\n\t\t\t\t\t\tprevExpr.setExpression(undefined);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tparts.push(expr);\n\t\t\t\t}\n\n\t\t\t\tconst part = new BasicEvaluatedExpression()\n\t\t\t\t\t.setString(quasi)\n\t\t\t\t\t.setRange(quasiExpr.range)\n\t\t\t\t\t.setExpression(quasiExpr);\n\t\t\t\tquasis.push(part);\n\t\t\t\tparts.push(part);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tquasis,\n\t\t\t\tparts\n\t\t\t};\n\t\t};\n\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"TemplateLiteral\")\n\t\t\t.tap(\"JavascriptParser\", _node => {\n\t\t\t\tconst node = /** @type {TemplateLiteralNode} */ (_node);\n\n\t\t\t\tconst { quasis, parts } = getSimplifiedTemplateResult(\"cooked\", node);\n\t\t\t\tif (parts.length === 1) {\n\t\t\t\t\treturn parts[0].setRange(node.range);\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setTemplateString(quasis, parts, \"cooked\")\n\t\t\t\t\t.setRange(node.range);\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"TaggedTemplateExpression\")\n\t\t\t.tap(\"JavascriptParser\", _node => {\n\t\t\t\tconst node = /** @type {TaggedTemplateExpressionNode} */ (_node);\n\t\t\t\tconst tag = this.evaluateExpression(node.tag);\n\n\t\t\t\tif (tag.isIdentifier() && tag.identifier === \"String.raw\") {\n\t\t\t\t\tconst { quasis, parts } = getSimplifiedTemplateResult(\n\t\t\t\t\t\t\"raw\",\n\t\t\t\t\t\tnode.quasi\n\t\t\t\t\t);\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setTemplateString(quasis, parts, \"raw\")\n\t\t\t\t\t\t.setRange(node.range);\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"concat\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString() && !param.isWrapped()) return;\n\n\t\t\t\tlet stringSuffix = null;\n\t\t\t\tlet hasUnknownParams = false;\n\t\t\t\tconst innerExpressions = [];\n\t\t\t\tfor (let i = expr.arguments.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst arg = expr.arguments[i];\n\t\t\t\t\tif (arg.type === \"SpreadElement\") return;\n\t\t\t\t\tconst argExpr = this.evaluateExpression(arg);\n\t\t\t\t\tif (\n\t\t\t\t\t\thasUnknownParams ||\n\t\t\t\t\t\t(!argExpr.isString() && !argExpr.isNumber())\n\t\t\t\t\t) {\n\t\t\t\t\t\thasUnknownParams = true;\n\t\t\t\t\t\tinnerExpressions.push(argExpr);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst value = argExpr.isString()\n\t\t\t\t\t\t? argExpr.string\n\t\t\t\t\t\t: \"\" + argExpr.number;\n\n\t\t\t\t\tconst newString = value + (stringSuffix ? stringSuffix.string : \"\");\n\t\t\t\t\tconst newRange = [\n\t\t\t\t\t\targExpr.range[0],\n\t\t\t\t\t\t(stringSuffix || argExpr).range[1]\n\t\t\t\t\t];\n\t\t\t\t\tstringSuffix = new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(newString)\n\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t(stringSuffix && stringSuffix.couldHaveSideEffects()) ||\n\t\t\t\t\t\t\t\targExpr.couldHaveSideEffects()\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.setRange(newRange);\n\t\t\t\t}\n\n\t\t\t\tif (hasUnknownParams) {\n\t\t\t\t\tconst prefix = param.isString() ? param : param.prefix;\n\t\t\t\t\tconst inner =\n\t\t\t\t\t\tparam.isWrapped() && param.wrappedInnerExpressions\n\t\t\t\t\t\t\t? param.wrappedInnerExpressions.concat(innerExpressions.reverse())\n\t\t\t\t\t\t\t: innerExpressions.reverse();\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setWrapped(prefix, stringSuffix, inner)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t} else if (param.isWrapped()) {\n\t\t\t\t\tconst postfix = stringSuffix || param.postfix;\n\t\t\t\t\tconst inner = param.wrappedInnerExpressions\n\t\t\t\t\t\t? param.wrappedInnerExpressions.concat(innerExpressions.reverse())\n\t\t\t\t\t\t: innerExpressions.reverse();\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setWrapped(param.prefix, postfix, inner)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t} else {\n\t\t\t\t\tconst newString =\n\t\t\t\t\t\tparam.string + (stringSuffix ? stringSuffix.string : \"\");\n\t\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t\t.setString(newString)\n\t\t\t\t\t\t.setSideEffects(\n\t\t\t\t\t\t\t(stringSuffix && stringSuffix.couldHaveSideEffects()) ||\n\t\t\t\t\t\t\t\tparam.couldHaveSideEffects()\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.setRange(expr.range);\n\t\t\t\t}\n\t\t\t});\n\t\tthis.hooks.evaluateCallExpressionMember\n\t\t\t.for(\"split\")\n\t\t\t.tap(\"JavascriptParser\", (expr, param) => {\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tif (expr.arguments.length !== 1) return;\n\t\t\t\tif (expr.arguments[0].type === \"SpreadElement\") return;\n\t\t\t\tlet result;\n\t\t\t\tconst arg = this.evaluateExpression(expr.arguments[0]);\n\t\t\t\tif (arg.isString()) {\n\t\t\t\t\tresult = param.string.split(arg.string);\n\t\t\t\t} else if (arg.isRegExp()) {\n\t\t\t\t\tresult = param.string.split(arg.regExp);\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setArray(result)\n\t\t\t\t\t.setSideEffects(param.couldHaveSideEffects())\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ConditionalExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ConditionalExpressionNode} */ (_expr);\n\n\t\t\t\tconst condition = this.evaluateExpression(expr.test);\n\t\t\t\tconst conditionValue = condition.asBool();\n\t\t\t\tlet res;\n\t\t\t\tif (conditionValue === undefined) {\n\t\t\t\t\tconst consequent = this.evaluateExpression(expr.consequent);\n\t\t\t\t\tconst alternate = this.evaluateExpression(expr.alternate);\n\t\t\t\t\tif (!consequent || !alternate) return;\n\t\t\t\t\tres = new BasicEvaluatedExpression();\n\t\t\t\t\tif (consequent.isConditional()) {\n\t\t\t\t\t\tres.setOptions(consequent.options);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.setOptions([consequent]);\n\t\t\t\t\t}\n\t\t\t\t\tif (alternate.isConditional()) {\n\t\t\t\t\t\tres.addOptions(alternate.options);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.addOptions([alternate]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres = this.evaluateExpression(\n\t\t\t\t\t\tconditionValue ? expr.consequent : expr.alternate\n\t\t\t\t\t);\n\t\t\t\t\tif (condition.couldHaveSideEffects()) res.setSideEffects();\n\t\t\t\t}\n\t\t\t\tres.setRange(expr.range);\n\t\t\t\treturn res;\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ArrayExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ArrayExpressionNode} */ (_expr);\n\n\t\t\t\tconst items = expr.elements.map(element => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\telement !== null &&\n\t\t\t\t\t\telement.type !== \"SpreadElement\" &&\n\t\t\t\t\t\tthis.evaluateExpression(element)\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\tif (!items.every(Boolean)) return;\n\t\t\t\treturn new BasicEvaluatedExpression()\n\t\t\t\t\t.setItems(items)\n\t\t\t\t\t.setRange(expr.range);\n\t\t\t});\n\t\tthis.hooks.evaluate\n\t\t\t.for(\"ChainExpression\")\n\t\t\t.tap(\"JavascriptParser\", _expr => {\n\t\t\t\tconst expr = /** @type {ChainExpressionNode} */ (_expr);\n\t\t\t\t/** @type {ExpressionNode[]} */\n\t\t\t\tconst optionalExpressionsStack = [];\n\t\t\t\t/** @type {ExpressionNode|SuperNode} */\n\t\t\t\tlet next = expr.expression;\n\n\t\t\t\twhile (\n\t\t\t\t\tnext.type === \"MemberExpression\" ||\n\t\t\t\t\tnext.type === \"CallExpression\"\n\t\t\t\t) {\n\t\t\t\t\tif (next.type === \"MemberExpression\") {\n\t\t\t\t\t\tif (next.optional) {\n\t\t\t\t\t\t\t// SuperNode can not be optional\n\t\t\t\t\t\t\toptionalExpressionsStack.push(\n\t\t\t\t\t\t\t\t/** @type {ExpressionNode} */ (next.object)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext = next.object;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (next.optional) {\n\t\t\t\t\t\t\t// SuperNode can not be optional\n\t\t\t\t\t\t\toptionalExpressionsStack.push(\n\t\t\t\t\t\t\t\t/** @type {ExpressionNode} */ (next.callee)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnext = next.callee;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twhile (optionalExpressionsStack.length > 0) {\n\t\t\t\t\tconst expression = optionalExpressionsStack.pop();\n\t\t\t\t\tconst evaluated = this.evaluateExpression(expression);\n\n\t\t\t\t\tif (evaluated && evaluated.asNullish()) {\n\t\t\t\t\t\treturn evaluated.setRange(_expr.range);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.evaluateExpression(expr.expression);\n\t\t\t});\n\t}\n\n\tgetRenameIdentifier(expr) {\n\t\tconst result = this.evaluateExpression(expr);\n\t\tif (result && result.isIdentifier()) {\n\t\t\treturn result.identifier;\n\t\t}\n\t}\n\n\t/**\n\t * @param {ClassExpressionNode | ClassDeclarationNode} classy a class node\n\t * @returns {void}\n\t */\n\twalkClass(classy) {\n\t\tif (classy.superClass) {\n\t\t\tif (!this.hooks.classExtendsExpression.call(classy.superClass, classy)) {\n\t\t\t\tthis.walkExpression(classy.superClass);\n\t\t\t}\n\t\t}\n\t\tif (classy.body && classy.body.type === \"ClassBody\") {\n\t\t\tfor (const classElement of /** @type {TODO} */ (classy.body.body)) {\n\t\t\t\tif (!this.hooks.classBodyElement.call(classElement, classy)) {\n\t\t\t\t\tif (classElement.computed && classElement.key) {\n\t\t\t\t\t\tthis.walkExpression(classElement.key);\n\t\t\t\t\t}\n\t\t\t\t\tif (classElement.value) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!this.hooks.classBodyValue.call(\n\t\t\t\t\t\t\t\tclassElement.value,\n\t\t\t\t\t\t\t\tclassElement,\n\t\t\t\t\t\t\t\tclassy\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\t\t\t\t\t\tthis.scope.topLevelScope = false;\n\t\t\t\t\t\t\tthis.walkExpression(classElement.value);\n\t\t\t\t\t\t\tthis.scope.topLevelScope = wasTopLevel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Pre walking iterates the scope for variable declarations\n\tpreWalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.preWalkStatement(statement);\n\t\t}\n\t}\n\n\t// Block pre walking iterates the scope for block variable declarations\n\tblockPreWalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.blockPreWalkStatement(statement);\n\t\t}\n\t}\n\n\t// Walking iterates the statements and expressions and processes them\n\twalkStatements(statements) {\n\t\tfor (let index = 0, len = statements.length; index < len; index++) {\n\t\t\tconst statement = statements[index];\n\t\t\tthis.walkStatement(statement);\n\t\t}\n\t}\n\n\tpreWalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.preStatement.call(statement)) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.preWalkBlockStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\t\tthis.preWalkDoWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\t\tthis.preWalkForInStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tthis.preWalkForOfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.preWalkForStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.preWalkFunctionDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.preWalkIfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tthis.preWalkLabeledStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.preWalkSwitchStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.preWalkTryStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.preWalkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.preWalkWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WithStatement\":\n\t\t\t\tthis.preWalkWithStatement(statement);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\tblockPreWalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.blockPreStatement.call(statement)) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"ImportDeclaration\":\n\t\t\t\tthis.blockPreWalkImportDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportAllDeclaration\":\n\t\t\t\tthis.blockPreWalkExportAllDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportDefaultDeclaration\":\n\t\t\t\tthis.blockPreWalkExportDefaultDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportNamedDeclaration\":\n\t\t\t\tthis.blockPreWalkExportNamedDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.blockPreWalkClassDeclaration(statement);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\twalkStatement(statement) {\n\t\tthis.statementPath.push(statement);\n\t\tif (this.hooks.statement.call(statement) !== undefined) {\n\t\t\tthis.prevStatement = this.statementPath.pop();\n\t\t\treturn;\n\t\t}\n\t\tswitch (statement.type) {\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tthis.walkBlockStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.walkClassDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\t\tthis.walkDoWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportDefaultDeclaration\":\n\t\t\t\tthis.walkExportDefaultDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExportNamedDeclaration\":\n\t\t\t\tthis.walkExportNamedDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ExpressionStatement\":\n\t\t\t\tthis.walkExpressionStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\t\tthis.walkForInStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tthis.walkForOfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tthis.walkForStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.walkFunctionDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tthis.walkIfStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tthis.walkLabeledStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ReturnStatement\":\n\t\t\t\tthis.walkReturnStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tthis.walkSwitchStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"ThrowStatement\":\n\t\t\t\tthis.walkThrowStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tthis.walkTryStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tthis.walkVariableDeclaration(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WhileStatement\":\n\t\t\t\tthis.walkWhileStatement(statement);\n\t\t\t\tbreak;\n\t\t\tcase \"WithStatement\":\n\t\t\t\tthis.walkWithStatement(statement);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.prevStatement = this.statementPath.pop();\n\t}\n\n\t/**\n\t * Walks a statements that is nested within a parent statement\n\t * and can potentially be a non-block statement.\n\t * This enforces the nested statement to never be in ASI position.\n\t * @param {StatementNode} statement the nested statement\n\t * @returns {void}\n\t */\n\twalkNestedStatement(statement) {\n\t\tthis.prevStatement = undefined;\n\t\tthis.walkStatement(statement);\n\t}\n\n\t// Real Statements\n\tpreWalkBlockStatement(statement) {\n\t\tthis.preWalkStatements(statement.body);\n\t}\n\n\twalkBlockStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tconst body = statement.body;\n\t\t\tconst prev = this.prevStatement;\n\t\t\tthis.blockPreWalkStatements(body);\n\t\t\tthis.prevStatement = prev;\n\t\t\tthis.walkStatements(body);\n\t\t});\n\t}\n\n\twalkExpressionStatement(statement) {\n\t\tthis.walkExpression(statement.expression);\n\t}\n\n\tpreWalkIfStatement(statement) {\n\t\tthis.preWalkStatement(statement.consequent);\n\t\tif (statement.alternate) {\n\t\t\tthis.preWalkStatement(statement.alternate);\n\t\t}\n\t}\n\n\twalkIfStatement(statement) {\n\t\tconst result = this.hooks.statementIf.call(statement);\n\t\tif (result === undefined) {\n\t\t\tthis.walkExpression(statement.test);\n\t\t\tthis.walkNestedStatement(statement.consequent);\n\t\t\tif (statement.alternate) {\n\t\t\t\tthis.walkNestedStatement(statement.alternate);\n\t\t\t}\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkNestedStatement(statement.consequent);\n\t\t\t} else if (statement.alternate) {\n\t\t\t\tthis.walkNestedStatement(statement.alternate);\n\t\t\t}\n\t\t}\n\t}\n\n\tpreWalkLabeledStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkLabeledStatement(statement) {\n\t\tconst hook = this.hooks.label.get(statement.label.name);\n\t\tif (hook !== undefined) {\n\t\t\tconst result = hook.call(statement);\n\t\t\tif (result === true) return;\n\t\t}\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\tpreWalkWithStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkWithStatement(statement) {\n\t\tthis.walkExpression(statement.object);\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\tpreWalkSwitchStatement(statement) {\n\t\tthis.preWalkSwitchCases(statement.cases);\n\t}\n\n\twalkSwitchStatement(statement) {\n\t\tthis.walkExpression(statement.discriminant);\n\t\tthis.walkSwitchCases(statement.cases);\n\t}\n\n\twalkTerminatingStatement(statement) {\n\t\tif (statement.argument) this.walkExpression(statement.argument);\n\t}\n\n\twalkReturnStatement(statement) {\n\t\tthis.walkTerminatingStatement(statement);\n\t}\n\n\twalkThrowStatement(statement) {\n\t\tthis.walkTerminatingStatement(statement);\n\t}\n\n\tpreWalkTryStatement(statement) {\n\t\tthis.preWalkStatement(statement.block);\n\t\tif (statement.handler) this.preWalkCatchClause(statement.handler);\n\t\tif (statement.finializer) this.preWalkStatement(statement.finializer);\n\t}\n\n\twalkTryStatement(statement) {\n\t\tif (this.scope.inTry) {\n\t\t\tthis.walkStatement(statement.block);\n\t\t} else {\n\t\t\tthis.scope.inTry = true;\n\t\t\tthis.walkStatement(statement.block);\n\t\t\tthis.scope.inTry = false;\n\t\t}\n\t\tif (statement.handler) this.walkCatchClause(statement.handler);\n\t\tif (statement.finalizer) this.walkStatement(statement.finalizer);\n\t}\n\n\tpreWalkWhileStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkWhileStatement(statement) {\n\t\tthis.walkExpression(statement.test);\n\t\tthis.walkNestedStatement(statement.body);\n\t}\n\n\tpreWalkDoWhileStatement(statement) {\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkDoWhileStatement(statement) {\n\t\tthis.walkNestedStatement(statement.body);\n\t\tthis.walkExpression(statement.test);\n\t}\n\n\tpreWalkForStatement(statement) {\n\t\tif (statement.init) {\n\t\t\tif (statement.init.type === \"VariableDeclaration\") {\n\t\t\t\tthis.preWalkStatement(statement.init);\n\t\t\t}\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkForStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.init) {\n\t\t\t\tif (statement.init.type === \"VariableDeclaration\") {\n\t\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.init);\n\t\t\t\t\tthis.prevStatement = undefined;\n\t\t\t\t\tthis.walkStatement(statement.init);\n\t\t\t\t} else {\n\t\t\t\t\tthis.walkExpression(statement.init);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (statement.test) {\n\t\t\t\tthis.walkExpression(statement.test);\n\t\t\t}\n\t\t\tif (statement.update) {\n\t\t\t\tthis.walkExpression(statement.update);\n\t\t\t}\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\tpreWalkForInStatement(statement) {\n\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\tthis.preWalkVariableDeclaration(statement.left);\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkForInStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.left);\n\t\t\t\tthis.walkVariableDeclaration(statement.left);\n\t\t\t} else {\n\t\t\t\tthis.walkPattern(statement.left);\n\t\t\t}\n\t\t\tthis.walkExpression(statement.right);\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\tpreWalkForOfStatement(statement) {\n\t\tif (statement.await && this.scope.topLevelScope === true) {\n\t\t\tthis.hooks.topLevelAwait.call(statement);\n\t\t}\n\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\tthis.preWalkVariableDeclaration(statement.left);\n\t\t}\n\t\tthis.preWalkStatement(statement.body);\n\t}\n\n\twalkForOfStatement(statement) {\n\t\tthis.inBlockScope(() => {\n\t\t\tif (statement.left.type === \"VariableDeclaration\") {\n\t\t\t\tthis.blockPreWalkVariableDeclaration(statement.left);\n\t\t\t\tthis.walkVariableDeclaration(statement.left);\n\t\t\t} else {\n\t\t\t\tthis.walkPattern(statement.left);\n\t\t\t}\n\t\t\tthis.walkExpression(statement.right);\n\t\t\tconst body = statement.body;\n\t\t\tif (body.type === \"BlockStatement\") {\n\t\t\t\t// no need to add additional scope\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.blockPreWalkStatements(body.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatements(body.body);\n\t\t\t} else {\n\t\t\t\tthis.walkNestedStatement(body);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Declarations\n\tpreWalkFunctionDeclaration(statement) {\n\t\tif (statement.id) {\n\t\t\tthis.defineVariable(statement.id.name);\n\t\t}\n\t}\n\n\twalkFunctionDeclaration(statement) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = false;\n\t\tthis.inFunctionScope(true, statement.params, () => {\n\t\t\tfor (const param of statement.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (statement.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(statement.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(statement.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(statement.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(statement.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\tblockPreWalkImportDeclaration(statement) {\n\t\tconst source = statement.source.value;\n\t\tthis.hooks.import.call(statement, source);\n\t\tfor (const specifier of statement.specifiers) {\n\t\t\tconst name = specifier.local.name;\n\t\t\tswitch (specifier.type) {\n\t\t\t\tcase \"ImportDefaultSpecifier\":\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.hooks.importSpecifier.call(statement, source, \"default\", name)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ImportSpecifier\":\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.hooks.importSpecifier.call(\n\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tspecifier.imported.name,\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ImportNamespaceSpecifier\":\n\t\t\t\t\tif (!this.hooks.importSpecifier.call(statement, source, null, name)) {\n\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.defineVariable(name);\n\t\t\t}\n\t\t}\n\t}\n\n\tenterDeclaration(declaration, onIdent) {\n\t\tswitch (declaration.type) {\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tfor (const declarator of declaration.declarations) {\n\t\t\t\t\tswitch (declarator.type) {\n\t\t\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\t\t\tthis.enterPattern(declarator.id, onIdent);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tthis.enterPattern(declaration.id, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassDeclaration\":\n\t\t\t\tthis.enterPattern(declaration.id, onIdent);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tblockPreWalkExportNamedDeclaration(statement) {\n\t\tlet source;\n\t\tif (statement.source) {\n\t\t\tsource = statement.source.value;\n\t\t\tthis.hooks.exportImport.call(statement, source);\n\t\t} else {\n\t\t\tthis.hooks.export.call(statement);\n\t\t}\n\t\tif (statement.declaration) {\n\t\t\tif (\n\t\t\t\t!this.hooks.exportDeclaration.call(statement, statement.declaration)\n\t\t\t) {\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(statement.declaration);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.blockPreWalkStatement(statement.declaration);\n\t\t\t\tlet index = 0;\n\t\t\t\tthis.enterDeclaration(statement.declaration, def => {\n\t\t\t\t\tthis.hooks.exportSpecifier.call(statement, def, def, index++);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (statement.specifiers) {\n\t\t\tfor (\n\t\t\t\tlet specifierIndex = 0;\n\t\t\t\tspecifierIndex < statement.specifiers.length;\n\t\t\t\tspecifierIndex++\n\t\t\t) {\n\t\t\t\tconst specifier = statement.specifiers[specifierIndex];\n\t\t\t\tswitch (specifier.type) {\n\t\t\t\t\tcase \"ExportSpecifier\": {\n\t\t\t\t\t\tconst name = specifier.exported.name;\n\t\t\t\t\t\tif (source) {\n\t\t\t\t\t\t\tthis.hooks.exportImportSpecifier.call(\n\t\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\t\tspecifier.local.name,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tspecifierIndex\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\t\t\t\t\tstatement,\n\t\t\t\t\t\t\t\tspecifier.local.name,\n\t\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\t\tspecifierIndex\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twalkExportNamedDeclaration(statement) {\n\t\tif (statement.declaration) {\n\t\t\tthis.walkStatement(statement.declaration);\n\t\t}\n\t}\n\n\tblockPreWalkExportDefaultDeclaration(statement) {\n\t\tconst prev = this.prevStatement;\n\t\tthis.preWalkStatement(statement.declaration);\n\t\tthis.prevStatement = prev;\n\t\tthis.blockPreWalkStatement(statement.declaration);\n\t\tif (\n\t\t\tstatement.declaration.id &&\n\t\t\tstatement.declaration.type !== \"FunctionExpression\" &&\n\t\t\tstatement.declaration.type !== \"ClassExpression\"\n\t\t) {\n\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\tstatement,\n\t\t\t\tstatement.declaration.id.name,\n\t\t\t\t\"default\",\n\t\t\t\tundefined\n\t\t\t);\n\t\t}\n\t}\n\n\twalkExportDefaultDeclaration(statement) {\n\t\tthis.hooks.export.call(statement);\n\t\tif (\n\t\t\tstatement.declaration.id &&\n\t\t\tstatement.declaration.type !== \"FunctionExpression\" &&\n\t\t\tstatement.declaration.type !== \"ClassExpression\"\n\t\t) {\n\t\t\tif (\n\t\t\t\t!this.hooks.exportDeclaration.call(statement, statement.declaration)\n\t\t\t) {\n\t\t\t\tthis.walkStatement(statement.declaration);\n\t\t\t}\n\t\t} else {\n\t\t\t// Acorn parses `export default function() {}` as `FunctionDeclaration` and\n\t\t\t// `export default class {}` as `ClassDeclaration`, both with `id = null`.\n\t\t\t// These nodes must be treated as expressions.\n\t\t\tif (\n\t\t\t\tstatement.declaration.type === \"FunctionDeclaration\" ||\n\t\t\t\tstatement.declaration.type === \"ClassDeclaration\"\n\t\t\t) {\n\t\t\t\tthis.walkStatement(statement.declaration);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(statement.declaration);\n\t\t\t}\n\t\t\tif (!this.hooks.exportExpression.call(statement, statement.declaration)) {\n\t\t\t\tthis.hooks.exportSpecifier.call(\n\t\t\t\t\tstatement,\n\t\t\t\t\tstatement.declaration,\n\t\t\t\t\t\"default\",\n\t\t\t\t\tundefined\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tblockPreWalkExportAllDeclaration(statement) {\n\t\tconst source = statement.source.value;\n\t\tconst name = statement.exported ? statement.exported.name : null;\n\t\tthis.hooks.exportImport.call(statement, source);\n\t\tthis.hooks.exportImportSpecifier.call(statement, source, null, name, 0);\n\t}\n\n\tpreWalkVariableDeclaration(statement) {\n\t\tif (statement.kind !== \"var\") return;\n\t\tthis._preWalkVariableDeclaration(statement, this.hooks.varDeclarationVar);\n\t}\n\n\tblockPreWalkVariableDeclaration(statement) {\n\t\tif (statement.kind === \"var\") return;\n\t\tconst hookMap =\n\t\t\tstatement.kind === \"const\"\n\t\t\t\t? this.hooks.varDeclarationConst\n\t\t\t\t: this.hooks.varDeclarationLet;\n\t\tthis._preWalkVariableDeclaration(statement, hookMap);\n\t}\n\n\t_preWalkVariableDeclaration(statement, hookMap) {\n\t\tfor (const declarator of statement.declarations) {\n\t\t\tswitch (declarator.type) {\n\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\tif (!this.hooks.preDeclarator.call(declarator, statement)) {\n\t\t\t\t\t\tthis.enterPattern(declarator.id, (name, decl) => {\n\t\t\t\t\t\t\tlet hook = hookMap.get(name);\n\t\t\t\t\t\t\tif (hook === undefined || !hook.call(decl)) {\n\t\t\t\t\t\t\t\thook = this.hooks.varDeclaration.get(name);\n\t\t\t\t\t\t\t\tif (hook === undefined || !hook.call(decl)) {\n\t\t\t\t\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\twalkVariableDeclaration(statement) {\n\t\tfor (const declarator of statement.declarations) {\n\t\t\tswitch (declarator.type) {\n\t\t\t\tcase \"VariableDeclarator\": {\n\t\t\t\t\tconst renameIdentifier =\n\t\t\t\t\t\tdeclarator.init && this.getRenameIdentifier(declarator.init);\n\t\t\t\t\tif (renameIdentifier && declarator.id.type === \"Identifier\") {\n\t\t\t\t\t\tconst hook = this.hooks.canRename.get(renameIdentifier);\n\t\t\t\t\t\tif (hook !== undefined && hook.call(declarator.init)) {\n\t\t\t\t\t\t\t// renaming with \"var a = b;\"\n\t\t\t\t\t\t\tconst hook = this.hooks.rename.get(renameIdentifier);\n\t\t\t\t\t\t\tif (hook === undefined || !hook.call(declarator.init)) {\n\t\t\t\t\t\t\t\tthis.setVariable(declarator.id.name, renameIdentifier);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.hooks.declarator.call(declarator, statement)) {\n\t\t\t\t\t\tthis.walkPattern(declarator.id);\n\t\t\t\t\t\tif (declarator.init) this.walkExpression(declarator.init);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tblockPreWalkClassDeclaration(statement) {\n\t\tif (statement.id) {\n\t\t\tthis.defineVariable(statement.id.name);\n\t\t}\n\t}\n\n\twalkClassDeclaration(statement) {\n\t\tthis.walkClass(statement);\n\t}\n\n\tpreWalkSwitchCases(switchCases) {\n\t\tfor (let index = 0, len = switchCases.length; index < len; index++) {\n\t\t\tconst switchCase = switchCases[index];\n\t\t\tthis.preWalkStatements(switchCase.consequent);\n\t\t}\n\t}\n\n\twalkSwitchCases(switchCases) {\n\t\tthis.inBlockScope(() => {\n\t\t\tconst len = switchCases.length;\n\n\t\t\t// we need to pre walk all statements first since we can have invalid code\n\t\t\t// import A from \"module\";\n\t\t\t// switch(1) {\n\t\t\t//    case 1:\n\t\t\t//      console.log(A); // should fail at runtime\n\t\t\t//    case 2:\n\t\t\t//      const A = 1;\n\t\t\t// }\n\t\t\tfor (let index = 0; index < len; index++) {\n\t\t\t\tconst switchCase = switchCases[index];\n\n\t\t\t\tif (switchCase.consequent.length > 0) {\n\t\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\t\tthis.blockPreWalkStatements(switchCase.consequent);\n\t\t\t\t\tthis.prevStatement = prev;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let index = 0; index < len; index++) {\n\t\t\t\tconst switchCase = switchCases[index];\n\n\t\t\t\tif (switchCase.test) {\n\t\t\t\t\tthis.walkExpression(switchCase.test);\n\t\t\t\t}\n\t\t\t\tif (switchCase.consequent.length > 0) {\n\t\t\t\t\tthis.walkStatements(switchCase.consequent);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpreWalkCatchClause(catchClause) {\n\t\tthis.preWalkStatement(catchClause.body);\n\t}\n\n\twalkCatchClause(catchClause) {\n\t\tthis.inBlockScope(() => {\n\t\t\t// Error binding is optional in catch clause since ECMAScript 2019\n\t\t\tif (catchClause.param !== null) {\n\t\t\t\tthis.enterPattern(catchClause.param, ident => {\n\t\t\t\t\tthis.defineVariable(ident);\n\t\t\t\t});\n\t\t\t\tthis.walkPattern(catchClause.param);\n\t\t\t}\n\t\t\tconst prev = this.prevStatement;\n\t\t\tthis.blockPreWalkStatement(catchClause.body);\n\t\t\tthis.prevStatement = prev;\n\t\t\tthis.walkStatement(catchClause.body);\n\t\t});\n\t}\n\n\twalkPattern(pattern) {\n\t\tswitch (pattern.type) {\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tthis.walkArrayPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tthis.walkAssignmentPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.walkMemberExpression(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tthis.walkObjectPattern(pattern);\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tthis.walkRestElement(pattern);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\twalkAssignmentPattern(pattern) {\n\t\tthis.walkExpression(pattern.right);\n\t\tthis.walkPattern(pattern.left);\n\t}\n\n\twalkObjectPattern(pattern) {\n\t\tfor (let i = 0, len = pattern.properties.length; i < len; i++) {\n\t\t\tconst prop = pattern.properties[i];\n\t\t\tif (prop) {\n\t\t\t\tif (prop.computed) this.walkExpression(prop.key);\n\t\t\t\tif (prop.value) this.walkPattern(prop.value);\n\t\t\t}\n\t\t}\n\t}\n\n\twalkArrayPattern(pattern) {\n\t\tfor (let i = 0, len = pattern.elements.length; i < len; i++) {\n\t\t\tconst element = pattern.elements[i];\n\t\t\tif (element) this.walkPattern(element);\n\t\t}\n\t}\n\n\twalkRestElement(pattern) {\n\t\tthis.walkPattern(pattern.argument);\n\t}\n\n\twalkExpressions(expressions) {\n\t\tfor (const expression of expressions) {\n\t\t\tif (expression) {\n\t\t\t\tthis.walkExpression(expression);\n\t\t\t}\n\t\t}\n\t}\n\n\twalkExpression(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"ArrayExpression\":\n\t\t\t\tthis.walkArrayExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrowFunctionExpression\":\n\t\t\t\tthis.walkArrowFunctionExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentExpression\":\n\t\t\t\tthis.walkAssignmentExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"AwaitExpression\":\n\t\t\t\tthis.walkAwaitExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tthis.walkBinaryExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"CallExpression\":\n\t\t\t\tthis.walkCallExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ChainExpression\":\n\t\t\t\tthis.walkChainExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ClassExpression\":\n\t\t\t\tthis.walkClassExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ConditionalExpression\":\n\t\t\t\tthis.walkConditionalExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionExpression\":\n\t\t\t\tthis.walkFunctionExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.walkIdentifier(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ImportExpression\":\n\t\t\t\tthis.walkImportExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"LogicalExpression\":\n\t\t\t\tthis.walkLogicalExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"MetaProperty\":\n\t\t\t\tthis.walkMetaProperty(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"MemberExpression\":\n\t\t\t\tthis.walkMemberExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"NewExpression\":\n\t\t\t\tthis.walkNewExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectExpression\":\n\t\t\t\tthis.walkObjectExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"SequenceExpression\":\n\t\t\t\tthis.walkSequenceExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"SpreadElement\":\n\t\t\t\tthis.walkSpreadElement(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"TaggedTemplateExpression\":\n\t\t\t\tthis.walkTaggedTemplateExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"TemplateLiteral\":\n\t\t\t\tthis.walkTemplateLiteral(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"ThisExpression\":\n\t\t\t\tthis.walkThisExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"UnaryExpression\":\n\t\t\t\tthis.walkUnaryExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"UpdateExpression\":\n\t\t\t\tthis.walkUpdateExpression(expression);\n\t\t\t\tbreak;\n\t\t\tcase \"YieldExpression\":\n\t\t\t\tthis.walkYieldExpression(expression);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\twalkAwaitExpression(expression) {\n\t\tif (this.scope.topLevelScope === true)\n\t\t\tthis.hooks.topLevelAwait.call(expression);\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\twalkArrayExpression(expression) {\n\t\tif (expression.elements) {\n\t\t\tthis.walkExpressions(expression.elements);\n\t\t}\n\t}\n\n\twalkSpreadElement(expression) {\n\t\tif (expression.argument) {\n\t\t\tthis.walkExpression(expression.argument);\n\t\t}\n\t}\n\n\twalkObjectExpression(expression) {\n\t\tfor (\n\t\t\tlet propIndex = 0, len = expression.properties.length;\n\t\t\tpropIndex < len;\n\t\t\tpropIndex++\n\t\t) {\n\t\t\tconst prop = expression.properties[propIndex];\n\t\t\tthis.walkProperty(prop);\n\t\t}\n\t}\n\n\twalkProperty(prop) {\n\t\tif (prop.type === \"SpreadElement\") {\n\t\t\tthis.walkExpression(prop.argument);\n\t\t\treturn;\n\t\t}\n\t\tif (prop.computed) {\n\t\t\tthis.walkExpression(prop.key);\n\t\t}\n\t\tif (prop.shorthand && prop.value && prop.value.type === \"Identifier\") {\n\t\t\tthis.scope.inShorthand = prop.value.name;\n\t\t\tthis.walkIdentifier(prop.value);\n\t\t\tthis.scope.inShorthand = false;\n\t\t} else {\n\t\t\tthis.walkExpression(prop.value);\n\t\t}\n\t}\n\n\twalkFunctionExpression(expression) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = false;\n\t\tconst scopeParams = expression.params;\n\n\t\t// Add function name in scope for recursive calls\n\t\tif (expression.id) {\n\t\t\tscopeParams.push(expression.id.name);\n\t\t}\n\n\t\tthis.inFunctionScope(true, scopeParams, () => {\n\t\t\tfor (const param of expression.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (expression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(expression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(expression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(expression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(expression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\twalkArrowFunctionExpression(expression) {\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = wasTopLevel ? \"arrow\" : false;\n\t\tthis.inFunctionScope(false, expression.params, () => {\n\t\t\tfor (const param of expression.params) {\n\t\t\t\tthis.walkPattern(param);\n\t\t\t}\n\t\t\tif (expression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(expression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(expression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(expression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(expression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\t/**\n\t * @param {SequenceExpressionNode} expression the sequence\n\t */\n\twalkSequenceExpression(expression) {\n\t\tif (!expression.expressions) return;\n\t\t// We treat sequence expressions like statements when they are one statement level\n\t\t// This has some benefits for optimizations that only work on statement level\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\tif (\n\t\t\tcurrentStatement === expression ||\n\t\t\t(currentStatement.type === \"ExpressionStatement\" &&\n\t\t\t\tcurrentStatement.expression === expression)\n\t\t) {\n\t\t\tconst old = this.statementPath.pop();\n\t\t\tfor (const expr of expression.expressions) {\n\t\t\t\tthis.statementPath.push(expr);\n\t\t\t\tthis.walkExpression(expr);\n\t\t\t\tthis.statementPath.pop();\n\t\t\t}\n\t\t\tthis.statementPath.push(old);\n\t\t} else {\n\t\t\tthis.walkExpressions(expression.expressions);\n\t\t}\n\t}\n\n\twalkUpdateExpression(expression) {\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\twalkUnaryExpression(expression) {\n\t\tif (expression.operator === \"typeof\") {\n\t\t\tconst result = this.callHooksForExpression(\n\t\t\t\tthis.hooks.typeof,\n\t\t\t\texpression.argument,\n\t\t\t\texpression\n\t\t\t);\n\t\t\tif (result === true) return;\n\t\t\tif (expression.argument.type === \"ChainExpression\") {\n\t\t\t\tconst result = this.callHooksForExpression(\n\t\t\t\t\tthis.hooks.typeof,\n\t\t\t\t\texpression.argument.expression,\n\t\t\t\t\texpression\n\t\t\t\t);\n\t\t\t\tif (result === true) return;\n\t\t\t}\n\t\t}\n\t\tthis.walkExpression(expression.argument);\n\t}\n\n\twalkLeftRightExpression(expression) {\n\t\tthis.walkExpression(expression.left);\n\t\tthis.walkExpression(expression.right);\n\t}\n\n\twalkBinaryExpression(expression) {\n\t\tthis.walkLeftRightExpression(expression);\n\t}\n\n\twalkLogicalExpression(expression) {\n\t\tconst result = this.hooks.expressionLogicalOperator.call(expression);\n\t\tif (result === undefined) {\n\t\t\tthis.walkLeftRightExpression(expression);\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkExpression(expression.right);\n\t\t\t}\n\t\t}\n\t}\n\n\twalkAssignmentExpression(expression) {\n\t\tif (expression.left.type === \"Identifier\") {\n\t\t\tconst renameIdentifier = this.getRenameIdentifier(expression.right);\n\t\t\tif (renameIdentifier) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.canRename,\n\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\texpression.right\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\t// renaming \"a = b;\"\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.callHooksForInfo(\n\t\t\t\t\t\t\tthis.hooks.rename,\n\t\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\t\texpression.right\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.setVariable(\n\t\t\t\t\t\t\texpression.left.name,\n\t\t\t\t\t\t\tthis.getVariableInfo(renameIdentifier)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.enterPattern(expression.left, (name, decl) => {\n\t\t\t\tif (!this.callHooksForName(this.hooks.assign, name, expression)) {\n\t\t\t\t\tthis.walkExpression(expression.left);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (expression.left.type.endsWith(\"Pattern\")) {\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.enterPattern(expression.left, (name, decl) => {\n\t\t\t\tif (!this.callHooksForName(this.hooks.assign, name, expression)) {\n\t\t\t\t\tthis.defineVariable(name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.walkPattern(expression.left);\n\t\t} else if (expression.left.type === \"MemberExpression\") {\n\t\t\tconst exprName = this.getMemberExpressionInfo(\n\t\t\t\texpression.left,\n\t\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t\t);\n\t\t\tif (exprName) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.assignMemberChain,\n\t\t\t\t\t\texprName.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprName.getMembers()\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.walkExpression(expression.left);\n\t\t} else {\n\t\t\tthis.walkExpression(expression.right);\n\t\t\tthis.walkExpression(expression.left);\n\t\t}\n\t}\n\n\twalkConditionalExpression(expression) {\n\t\tconst result = this.hooks.expressionConditionalOperator.call(expression);\n\t\tif (result === undefined) {\n\t\t\tthis.walkExpression(expression.test);\n\t\t\tthis.walkExpression(expression.consequent);\n\t\t\tif (expression.alternate) {\n\t\t\t\tthis.walkExpression(expression.alternate);\n\t\t\t}\n\t\t} else {\n\t\t\tif (result) {\n\t\t\t\tthis.walkExpression(expression.consequent);\n\t\t\t} else if (expression.alternate) {\n\t\t\t\tthis.walkExpression(expression.alternate);\n\t\t\t}\n\t\t}\n\t}\n\n\twalkNewExpression(expression) {\n\t\tconst result = this.callHooksForExpression(\n\t\t\tthis.hooks.new,\n\t\t\texpression.callee,\n\t\t\texpression\n\t\t);\n\t\tif (result === true) return;\n\t\tthis.walkExpression(expression.callee);\n\t\tif (expression.arguments) {\n\t\t\tthis.walkExpressions(expression.arguments);\n\t\t}\n\t}\n\n\twalkYieldExpression(expression) {\n\t\tif (expression.argument) {\n\t\t\tthis.walkExpression(expression.argument);\n\t\t}\n\t}\n\n\twalkTemplateLiteral(expression) {\n\t\tif (expression.expressions) {\n\t\t\tthis.walkExpressions(expression.expressions);\n\t\t}\n\t}\n\n\twalkTaggedTemplateExpression(expression) {\n\t\tif (expression.tag) {\n\t\t\tthis.walkExpression(expression.tag);\n\t\t}\n\t\tif (expression.quasi && expression.quasi.expressions) {\n\t\t\tthis.walkExpressions(expression.quasi.expressions);\n\t\t}\n\t}\n\n\twalkClassExpression(expression) {\n\t\tthis.walkClass(expression);\n\t}\n\n\t/**\n\t * @param {ChainExpressionNode} expression expression\n\t */\n\twalkChainExpression(expression) {\n\t\tconst result = this.hooks.optionalChaining.call(expression);\n\n\t\tif (result === undefined) {\n\t\t\tif (expression.expression.type === \"CallExpression\") {\n\t\t\t\tthis.walkCallExpression(expression.expression);\n\t\t\t} else {\n\t\t\t\tthis.walkMemberExpression(expression.expression);\n\t\t\t}\n\t\t}\n\t}\n\n\t_walkIIFE(functionExpression, options, currentThis) {\n\t\tconst getVarInfo = argOrThis => {\n\t\t\tconst renameIdentifier = this.getRenameIdentifier(argOrThis);\n\t\t\tif (renameIdentifier) {\n\t\t\t\tif (\n\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.canRename,\n\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\targOrThis\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.callHooksForInfo(\n\t\t\t\t\t\t\tthis.hooks.rename,\n\t\t\t\t\t\t\trenameIdentifier,\n\t\t\t\t\t\t\targOrThis\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn this.getVariableInfo(renameIdentifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.walkExpression(argOrThis);\n\t\t};\n\t\tconst { params, type } = functionExpression;\n\t\tconst arrow = type === \"ArrowFunctionExpression\";\n\t\tconst renameThis = currentThis ? getVarInfo(currentThis) : null;\n\t\tconst varInfoForArgs = options.map(getVarInfo);\n\t\tconst wasTopLevel = this.scope.topLevelScope;\n\t\tthis.scope.topLevelScope = wasTopLevel && arrow ? \"arrow\" : false;\n\t\tconst scopeParams = params.filter(\n\t\t\t(identifier, idx) => !varInfoForArgs[idx]\n\t\t);\n\n\t\t// Add function name in scope for recursive calls\n\t\tif (functionExpression.id) {\n\t\t\tscopeParams.push(functionExpression.id.name);\n\t\t}\n\n\t\tthis.inFunctionScope(true, scopeParams, () => {\n\t\t\tif (renameThis && !arrow) {\n\t\t\t\tthis.setVariable(\"this\", renameThis);\n\t\t\t}\n\t\t\tfor (let i = 0; i < varInfoForArgs.length; i++) {\n\t\t\t\tconst varInfo = varInfoForArgs[i];\n\t\t\t\tif (!varInfo) continue;\n\t\t\t\tif (!params[i] || params[i].type !== \"Identifier\") continue;\n\t\t\t\tthis.setVariable(params[i].name, varInfo);\n\t\t\t}\n\t\t\tif (functionExpression.body.type === \"BlockStatement\") {\n\t\t\t\tthis.detectMode(functionExpression.body.body);\n\t\t\t\tconst prev = this.prevStatement;\n\t\t\t\tthis.preWalkStatement(functionExpression.body);\n\t\t\t\tthis.prevStatement = prev;\n\t\t\t\tthis.walkStatement(functionExpression.body);\n\t\t\t} else {\n\t\t\t\tthis.walkExpression(functionExpression.body);\n\t\t\t}\n\t\t});\n\t\tthis.scope.topLevelScope = wasTopLevel;\n\t}\n\n\twalkImportExpression(expression) {\n\t\tlet result = this.hooks.importCall.call(expression);\n\t\tif (result === true) return;\n\n\t\tthis.walkExpression(expression.source);\n\t}\n\n\twalkCallExpression(expression) {\n\t\tconst isSimpleFunction = fn => {\n\t\t\treturn fn.params.every(p => p.type === \"Identifier\");\n\t\t};\n\t\tif (\n\t\t\texpression.callee.type === \"MemberExpression\" &&\n\t\t\texpression.callee.object.type.endsWith(\"FunctionExpression\") &&\n\t\t\t!expression.callee.computed &&\n\t\t\t(expression.callee.property.name === \"call\" ||\n\t\t\t\texpression.callee.property.name === \"bind\") &&\n\t\t\texpression.arguments.length > 0 &&\n\t\t\tisSimpleFunction(expression.callee.object)\n\t\t) {\n\t\t\t// (function(…) { }.call/bind(?, …))\n\t\t\tthis._walkIIFE(\n\t\t\t\texpression.callee.object,\n\t\t\t\texpression.arguments.slice(1),\n\t\t\t\texpression.arguments[0]\n\t\t\t);\n\t\t} else if (\n\t\t\texpression.callee.type.endsWith(\"FunctionExpression\") &&\n\t\t\tisSimpleFunction(expression.callee)\n\t\t) {\n\t\t\t// (function(…) { }(…))\n\t\t\tthis._walkIIFE(expression.callee, expression.arguments, null);\n\t\t} else {\n\t\t\tif (expression.callee.type === \"MemberExpression\") {\n\t\t\t\tconst exprInfo = this.getMemberExpressionInfo(\n\t\t\t\t\texpression.callee,\n\t\t\t\t\tALLOWED_MEMBER_TYPES_CALL_EXPRESSION\n\t\t\t\t);\n\t\t\t\tif (exprInfo && exprInfo.type === \"call\") {\n\t\t\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.callMemberChainOfCallMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.getCalleeMembers(),\n\t\t\t\t\t\texprInfo.call,\n\t\t\t\t\t\texprInfo.getMembers()\n\t\t\t\t\t);\n\t\t\t\t\tif (result === true) return;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst callee = this.evaluateExpression(expression.callee);\n\t\t\tif (callee.isIdentifier()) {\n\t\t\t\tconst result1 = this.callHooksForInfo(\n\t\t\t\t\tthis.hooks.callMemberChain,\n\t\t\t\t\tcallee.rootInfo,\n\t\t\t\t\texpression,\n\t\t\t\t\tcallee.getMembers()\n\t\t\t\t);\n\t\t\t\tif (result1 === true) return;\n\t\t\t\tconst result2 = this.callHooksForInfo(\n\t\t\t\t\tthis.hooks.call,\n\t\t\t\t\tcallee.identifier,\n\t\t\t\t\texpression\n\t\t\t\t);\n\t\t\t\tif (result2 === true) return;\n\t\t\t}\n\n\t\t\tif (expression.callee) {\n\t\t\t\tif (expression.callee.type === \"MemberExpression\") {\n\t\t\t\t\t// because of call context we need to walk the call context as expression\n\t\t\t\t\tthis.walkExpression(expression.callee.object);\n\t\t\t\t\tif (expression.callee.computed === true)\n\t\t\t\t\t\tthis.walkExpression(expression.callee.property);\n\t\t\t\t} else {\n\t\t\t\t\tthis.walkExpression(expression.callee);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (expression.arguments) this.walkExpressions(expression.arguments);\n\t\t}\n\t}\n\n\twalkMemberExpression(expression) {\n\t\tconst exprInfo = this.getMemberExpressionInfo(\n\t\t\texpression,\n\t\t\tALLOWED_MEMBER_TYPES_ALL\n\t\t);\n\t\tif (exprInfo) {\n\t\t\tswitch (exprInfo.type) {\n\t\t\t\tcase \"expression\": {\n\t\t\t\t\tconst result1 = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.expression,\n\t\t\t\t\t\texprInfo.name,\n\t\t\t\t\t\texpression\n\t\t\t\t\t);\n\t\t\t\t\tif (result1 === true) return;\n\t\t\t\t\tconst members = exprInfo.getMembers();\n\t\t\t\t\tconst result2 = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.expressionMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\tmembers\n\t\t\t\t\t);\n\t\t\t\t\tif (result2 === true) return;\n\t\t\t\t\tthis.walkMemberExpressionWithExpressionName(\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.name,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\tmembers.slice(),\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis.callHooksForInfo(\n\t\t\t\t\t\t\t\tthis.hooks.unhandledExpressionMemberChain,\n\t\t\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\t\t\texpression,\n\t\t\t\t\t\t\t\tmembers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcase \"call\": {\n\t\t\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\t\t\tthis.hooks.memberChainOfCallMemberChain,\n\t\t\t\t\t\texprInfo.rootInfo,\n\t\t\t\t\t\texpression,\n\t\t\t\t\t\texprInfo.getCalleeMembers(),\n\t\t\t\t\t\texprInfo.call,\n\t\t\t\t\t\texprInfo.getMembers()\n\t\t\t\t\t);\n\t\t\t\t\tif (result === true) return;\n\t\t\t\t\t// Fast skip over the member chain as we already called memberChainOfCallMemberChain\n\t\t\t\t\t// and call computed property are literals anyway\n\t\t\t\t\tthis.walkExpression(exprInfo.call);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.walkExpression(expression.object);\n\t\tif (expression.computed === true) this.walkExpression(expression.property);\n\t}\n\n\twalkMemberExpressionWithExpressionName(\n\t\texpression,\n\t\tname,\n\t\trootInfo,\n\t\tmembers,\n\t\tonUnhandled\n\t) {\n\t\tif (expression.object.type === \"MemberExpression\") {\n\t\t\t// optimize the case where expression.object is a MemberExpression too.\n\t\t\t// we can keep info here when calling walkMemberExpression directly\n\t\t\tconst property =\n\t\t\t\texpression.property.name || `${expression.property.value}`;\n\t\t\tname = name.slice(0, -property.length - 1);\n\t\t\tmembers.pop();\n\t\t\tconst result = this.callHooksForInfo(\n\t\t\t\tthis.hooks.expression,\n\t\t\t\tname,\n\t\t\t\texpression.object\n\t\t\t);\n\t\t\tif (result === true) return;\n\t\t\tthis.walkMemberExpressionWithExpressionName(\n\t\t\t\texpression.object,\n\t\t\t\tname,\n\t\t\t\trootInfo,\n\t\t\t\tmembers,\n\t\t\t\tonUnhandled\n\t\t\t);\n\t\t} else if (!onUnhandled || !onUnhandled()) {\n\t\t\tthis.walkExpression(expression.object);\n\t\t}\n\t\tif (expression.computed === true) this.walkExpression(expression.property);\n\t}\n\n\twalkThisExpression(expression) {\n\t\tthis.callHooksForName(this.hooks.expression, \"this\", expression);\n\t}\n\n\twalkIdentifier(expression) {\n\t\tthis.callHooksForName(this.hooks.expression, expression.name, expression);\n\t}\n\n\t/**\n\t * @param {MetaPropertyNode} metaProperty meta property\n\t */\n\twalkMetaProperty(metaProperty) {\n\t\tthis.hooks.expression.for(getRootName(metaProperty)).call(metaProperty);\n\t}\n\n\tcallHooksForExpression(hookMap, expr, ...args) {\n\t\treturn this.callHooksForExpressionWithFallback(\n\t\t\thookMap,\n\t\t\texpr,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {MemberExpressionNode} expr expression info\n\t * @param {function(string, string | ScopeInfo | VariableInfo, function(): string[]): any} fallback callback when variable in not handled by hooks\n\t * @param {function(string): any} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForExpressionWithFallback(\n\t\thookMap,\n\t\texpr,\n\t\tfallback,\n\t\tdefined,\n\t\t...args\n\t) {\n\t\tconst exprName = this.getMemberExpressionInfo(\n\t\t\texpr,\n\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t);\n\t\tif (exprName !== undefined) {\n\t\t\tconst members = exprName.getMembers();\n\t\t\treturn this.callHooksForInfoWithFallback(\n\t\t\t\thookMap,\n\t\t\t\tmembers.length === 0 ? exprName.rootInfo : exprName.name,\n\t\t\t\tfallback &&\n\t\t\t\t\t(name => fallback(name, exprName.rootInfo, exprName.getMembers)),\n\t\t\t\tdefined && (() => defined(exprName.name)),\n\t\t\t\t...args\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {string} name key in map\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForName(hookMap, name, ...args) {\n\t\treturn this.callHooksForNameWithFallback(\n\t\t\thookMap,\n\t\t\tname,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks that should be called\n\t * @param {ExportedVariableInfo} info variable info\n\t * @param  {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForInfo(hookMap, info, ...args) {\n\t\treturn this.callHooksForInfoWithFallback(\n\t\t\thookMap,\n\t\t\tinfo,\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {ExportedVariableInfo} info variable info\n\t * @param {function(string): any} fallback callback when variable in not handled by hooks\n\t * @param {function(): any} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForInfoWithFallback(hookMap, info, fallback, defined, ...args) {\n\t\tlet name;\n\t\tif (typeof info === \"string\") {\n\t\t\tname = info;\n\t\t} else {\n\t\t\tif (!(info instanceof VariableInfo)) {\n\t\t\t\tif (defined !== undefined) {\n\t\t\t\t\treturn defined();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet tagInfo = info.tagInfo;\n\t\t\twhile (tagInfo !== undefined) {\n\t\t\t\tconst hook = hookMap.get(tagInfo.tag);\n\t\t\t\tif (hook !== undefined) {\n\t\t\t\t\tthis.currentTagData = tagInfo.data;\n\t\t\t\t\tconst result = hook.call(...args);\n\t\t\t\t\tthis.currentTagData = undefined;\n\t\t\t\t\tif (result !== undefined) return result;\n\t\t\t\t}\n\t\t\t\ttagInfo = tagInfo.next;\n\t\t\t}\n\t\t\tif (info.freeName === true) {\n\t\t\t\tif (defined !== undefined) {\n\t\t\t\t\treturn defined();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tname = info.freeName;\n\t\t}\n\t\tconst hook = hookMap.get(name);\n\t\tif (hook !== undefined) {\n\t\t\tconst result = hook.call(...args);\n\t\t\tif (result !== undefined) return result;\n\t\t}\n\t\tif (fallback !== undefined) {\n\t\t\treturn fallback(name);\n\t\t}\n\t}\n\n\t/**\n\t * @template T\n\t * @template R\n\t * @param {HookMap<SyncBailHook<T, R>>} hookMap hooks the should be called\n\t * @param {string} name key in map\n\t * @param {function(string): any} fallback callback when variable in not handled by hooks\n\t * @param {function(): any} defined callback when variable is defined\n\t * @param {AsArray<T>} args args for the hook\n\t * @returns {R} result of hook\n\t */\n\tcallHooksForNameWithFallback(hookMap, name, fallback, defined, ...args) {\n\t\treturn this.callHooksForInfoWithFallback(\n\t\t\thookMap,\n\t\t\tthis.getVariableInfo(name),\n\t\t\tfallback,\n\t\t\tdefined,\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * @deprecated\n\t * @param {any} params scope params\n\t * @param {function(): void} fn inner function\n\t * @returns {void}\n\t */\n\tinScope(params, fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tthis.undefineVariable(\"this\");\n\n\t\tthis.enterPatterns(params, (ident, pattern) => {\n\t\t\tthis.defineVariable(ident);\n\t\t});\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\tinFunctionScope(hasThis, params, fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tif (hasThis) {\n\t\t\tthis.undefineVariable(\"this\");\n\t\t}\n\n\t\tthis.enterPatterns(params, (ident, pattern) => {\n\t\t\tthis.defineVariable(ident);\n\t\t});\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\tinBlockScope(fn) {\n\t\tconst oldScope = this.scope;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: oldScope.topLevelScope,\n\t\t\tinTry: oldScope.inTry,\n\t\t\tinShorthand: false,\n\t\t\tisStrict: oldScope.isStrict,\n\t\t\tisAsmJs: oldScope.isAsmJs,\n\t\t\tdefinitions: oldScope.definitions.createChild()\n\t\t};\n\n\t\tfn();\n\n\t\tthis.scope = oldScope;\n\t}\n\n\tdetectMode(statements) {\n\t\tconst isLiteral =\n\t\t\tstatements.length >= 1 &&\n\t\t\tstatements[0].type === \"ExpressionStatement\" &&\n\t\t\tstatements[0].expression.type === \"Literal\";\n\t\tif (isLiteral && statements[0].expression.value === \"use strict\") {\n\t\t\tthis.scope.isStrict = true;\n\t\t}\n\t\tif (isLiteral && statements[0].expression.value === \"use asm\") {\n\t\t\tthis.scope.isAsmJs = true;\n\t\t}\n\t}\n\n\tenterPatterns(patterns, onIdent) {\n\t\tfor (const pattern of patterns) {\n\t\t\tif (typeof pattern !== \"string\") {\n\t\t\t\tthis.enterPattern(pattern, onIdent);\n\t\t\t} else if (pattern) {\n\t\t\t\tonIdent(pattern);\n\t\t\t}\n\t\t}\n\t}\n\n\tenterPattern(pattern, onIdent) {\n\t\tif (!pattern) return;\n\t\tswitch (pattern.type) {\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tthis.enterArrayPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tthis.enterAssignmentPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"Identifier\":\n\t\t\t\tthis.enterIdentifier(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tthis.enterObjectPattern(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tthis.enterRestElement(pattern, onIdent);\n\t\t\t\tbreak;\n\t\t\tcase \"Property\":\n\t\t\t\tif (pattern.shorthand && pattern.value.type === \"Identifier\") {\n\t\t\t\t\tthis.scope.inShorthand = pattern.value.name;\n\t\t\t\t\tthis.enterIdentifier(pattern.value, onIdent);\n\t\t\t\t\tthis.scope.inShorthand = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.enterPattern(pattern.value, onIdent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tenterIdentifier(pattern, onIdent) {\n\t\tif (!this.callHooksForName(this.hooks.pattern, pattern.name, pattern)) {\n\t\t\tonIdent(pattern.name, pattern);\n\t\t}\n\t}\n\n\tenterObjectPattern(pattern, onIdent) {\n\t\tfor (\n\t\t\tlet propIndex = 0, len = pattern.properties.length;\n\t\t\tpropIndex < len;\n\t\t\tpropIndex++\n\t\t) {\n\t\t\tconst prop = pattern.properties[propIndex];\n\t\t\tthis.enterPattern(prop, onIdent);\n\t\t}\n\t}\n\n\tenterArrayPattern(pattern, onIdent) {\n\t\tfor (\n\t\t\tlet elementIndex = 0, len = pattern.elements.length;\n\t\t\telementIndex < len;\n\t\t\telementIndex++\n\t\t) {\n\t\t\tconst element = pattern.elements[elementIndex];\n\t\t\tthis.enterPattern(element, onIdent);\n\t\t}\n\t}\n\n\tenterRestElement(pattern, onIdent) {\n\t\tthis.enterPattern(pattern.argument, onIdent);\n\t}\n\n\tenterAssignmentPattern(pattern, onIdent) {\n\t\tthis.enterPattern(pattern.left, onIdent);\n\t}\n\n\t/**\n\t * @param {ExpressionNode} expression expression node\n\t * @returns {BasicEvaluatedExpression | undefined} evaluation result\n\t */\n\tevaluateExpression(expression) {\n\t\ttry {\n\t\t\tconst hook = this.hooks.evaluate.get(expression.type);\n\t\t\tif (hook !== undefined) {\n\t\t\t\tconst result = hook.call(expression);\n\t\t\t\tif (result !== undefined) {\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tresult.setExpression(expression);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\t// ignore error\n\t\t}\n\t\treturn new BasicEvaluatedExpression()\n\t\t\t.setRange(expression.range)\n\t\t\t.setExpression(expression);\n\t}\n\n\tparseString(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tif (expression.operator === \"+\") {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tthis.parseString(expression.left) +\n\t\t\t\t\t\tthis.parseString(expression.right)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"Literal\":\n\t\t\t\treturn expression.value + \"\";\n\t\t}\n\t\tthrow new Error(\n\t\t\texpression.type + \" is not supported as parameter for require\"\n\t\t);\n\t}\n\n\tparseCalculatedString(expression) {\n\t\tswitch (expression.type) {\n\t\t\tcase \"BinaryExpression\":\n\t\t\t\tif (expression.operator === \"+\") {\n\t\t\t\t\tconst left = this.parseCalculatedString(expression.left);\n\t\t\t\t\tconst right = this.parseCalculatedString(expression.right);\n\t\t\t\t\tif (left.code) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: left.range,\n\t\t\t\t\t\t\tvalue: left.value,\n\t\t\t\t\t\t\tcode: true,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (right.code) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: [\n\t\t\t\t\t\t\t\tleft.range[0],\n\t\t\t\t\t\t\t\tright.range ? right.range[1] : left.range[1]\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tvalue: left.value + right.value,\n\t\t\t\t\t\t\tcode: true,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\trange: [left.range[0], right.range[1]],\n\t\t\t\t\t\t\tvalue: left.value + right.value,\n\t\t\t\t\t\t\tcode: false,\n\t\t\t\t\t\t\tconditional: false\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ConditionalExpression\": {\n\t\t\t\tconst consequent = this.parseCalculatedString(expression.consequent);\n\t\t\t\tconst alternate = this.parseCalculatedString(expression.alternate);\n\t\t\t\tconst items = [];\n\t\t\t\tif (consequent.conditional) {\n\t\t\t\t\titems.push(...consequent.conditional);\n\t\t\t\t} else if (!consequent.code) {\n\t\t\t\t\titems.push(consequent);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (alternate.conditional) {\n\t\t\t\t\titems.push(...alternate.conditional);\n\t\t\t\t} else if (!alternate.code) {\n\t\t\t\t\titems.push(alternate);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\trange: undefined,\n\t\t\t\t\tvalue: \"\",\n\t\t\t\t\tcode: true,\n\t\t\t\t\tconditional: items\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase \"Literal\":\n\t\t\t\treturn {\n\t\t\t\t\trange: expression.range,\n\t\t\t\t\tvalue: expression.value + \"\",\n\t\t\t\t\tcode: false,\n\t\t\t\t\tconditional: false\n\t\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\trange: undefined,\n\t\t\tvalue: \"\",\n\t\t\tcode: true,\n\t\t\tconditional: false\n\t\t};\n\t}\n\n\t/**\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\n\t * @param {ParserState} state the parser state\n\t * @returns {ParserState} the parser state\n\t */\n\tparse(source, state) {\n\t\tlet ast;\n\t\tlet comments;\n\t\tconst semicolons = new Set();\n\t\tif (source === null) {\n\t\t\tthrow new Error(\"source must not be null\");\n\t\t}\n\t\tif (Buffer.isBuffer(source)) {\n\t\t\tsource = source.toString(\"utf-8\");\n\t\t}\n\t\tif (typeof source === \"object\") {\n\t\t\tast = /** @type {ProgramNode} */ (source);\n\t\t\tcomments = source.comments;\n\t\t} else {\n\t\t\tcomments = [];\n\t\t\tast = JavascriptParser._parse(source, {\n\t\t\t\tsourceType: this.sourceType,\n\t\t\t\tonComment: comments,\n\t\t\t\tonInsertedSemicolon: pos => semicolons.add(pos)\n\t\t\t});\n\t\t}\n\n\t\tconst oldScope = this.scope;\n\t\tconst oldState = this.state;\n\t\tconst oldComments = this.comments;\n\t\tconst oldSemicolons = this.semicolons;\n\t\tconst oldStatementPath = this.statementPath;\n\t\tconst oldPrevStatement = this.prevStatement;\n\t\tthis.scope = {\n\t\t\ttopLevelScope: true,\n\t\t\tinTry: false,\n\t\t\tinShorthand: false,\n\t\t\tisStrict: false,\n\t\t\tisAsmJs: false,\n\t\t\tdefinitions: new StackedMap()\n\t\t};\n\t\t/** @type {ParserState} */\n\t\tthis.state = state;\n\t\tthis.comments = comments;\n\t\tthis.semicolons = semicolons;\n\t\tthis.statementPath = [];\n\t\tthis.prevStatement = undefined;\n\t\tif (this.hooks.program.call(ast, comments) === undefined) {\n\t\t\tthis.detectMode(ast.body);\n\t\t\tthis.preWalkStatements(ast.body);\n\t\t\tthis.prevStatement = undefined;\n\t\t\tthis.blockPreWalkStatements(ast.body);\n\t\t\tthis.prevStatement = undefined;\n\t\t\tthis.walkStatements(ast.body);\n\t\t}\n\t\tthis.hooks.finish.call(ast, comments);\n\t\tthis.scope = oldScope;\n\t\t/** @type {ParserState} */\n\t\tthis.state = oldState;\n\t\tthis.comments = oldComments;\n\t\tthis.semicolons = oldSemicolons;\n\t\tthis.statementPath = oldStatementPath;\n\t\tthis.prevStatement = oldPrevStatement;\n\t\treturn state;\n\t}\n\n\tevaluate(source) {\n\t\tconst ast = JavascriptParser._parse(\"(\" + source + \")\", {\n\t\t\tsourceType: this.sourceType,\n\t\t\tlocations: false\n\t\t});\n\t\tif (ast.body.length !== 1 || ast.body[0].type !== \"ExpressionStatement\") {\n\t\t\tthrow new Error(\"evaluate: Source is not a expression\");\n\t\t}\n\t\treturn this.evaluateExpression(ast.body[0].expression);\n\t}\n\n\t/**\n\t * @param {ExpressionNode | DeclarationNode | PrivateIdentifierNode | null | undefined} expr an expression\n\t * @param {number} commentsStartPos source position from which annotation comments are checked\n\t * @returns {boolean} true, when the expression is pure\n\t */\n\tisPure(expr, commentsStartPos) {\n\t\tif (!expr) return true;\n\t\tconst result = this.hooks.isPure\n\t\t\t.for(expr.type)\n\t\t\t.call(expr, commentsStartPos);\n\t\tif (typeof result === \"boolean\") return result;\n\t\tswitch (expr.type) {\n\t\t\tcase \"ClassDeclaration\":\n\t\t\tcase \"ClassExpression\": {\n\t\t\t\tif (expr.body.type !== \"ClassBody\") return false;\n\t\t\t\tif (expr.superClass && !this.isPure(expr.superClass, expr.range[0])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst items =\n\t\t\t\t\t/** @type {(MethodDefinitionNode | PropertyDefinitionNode)[]} */ (\n\t\t\t\t\t\texpr.body.body\n\t\t\t\t\t);\n\t\t\t\treturn items.every(\n\t\t\t\t\titem =>\n\t\t\t\t\t\t(!item.computed ||\n\t\t\t\t\t\t\t!item.key ||\n\t\t\t\t\t\t\tthis.isPure(item.key, item.range[0])) &&\n\t\t\t\t\t\t(!item.static ||\n\t\t\t\t\t\t\t!item.value ||\n\t\t\t\t\t\t\tthis.isPure(\n\t\t\t\t\t\t\t\titem.value,\n\t\t\t\t\t\t\t\titem.key ? item.key.range[1] : item.range[0]\n\t\t\t\t\t\t\t))\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\tcase \"FunctionExpression\":\n\t\t\tcase \"ArrowFunctionExpression\":\n\t\t\tcase \"Literal\":\n\t\t\tcase \"PrivateIdentifier\":\n\t\t\t\treturn true;\n\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\treturn expr.declarations.every(decl =>\n\t\t\t\t\tthis.isPure(decl.init, decl.range[0])\n\t\t\t\t);\n\n\t\t\tcase \"ConditionalExpression\":\n\t\t\t\treturn (\n\t\t\t\t\tthis.isPure(expr.test, commentsStartPos) &&\n\t\t\t\t\tthis.isPure(expr.consequent, expr.test.range[1]) &&\n\t\t\t\t\tthis.isPure(expr.alternate, expr.consequent.range[1])\n\t\t\t\t);\n\n\t\t\tcase \"SequenceExpression\":\n\t\t\t\treturn expr.expressions.every(expr => {\n\t\t\t\t\tconst pureFlag = this.isPure(expr, commentsStartPos);\n\t\t\t\t\tcommentsStartPos = expr.range[1];\n\t\t\t\t\treturn pureFlag;\n\t\t\t\t});\n\n\t\t\tcase \"CallExpression\": {\n\t\t\t\tconst pureFlag =\n\t\t\t\t\texpr.range[0] - commentsStartPos > 12 &&\n\t\t\t\t\tthis.getComments([commentsStartPos, expr.range[0]]).some(\n\t\t\t\t\t\tcomment =>\n\t\t\t\t\t\t\tcomment.type === \"Block\" &&\n\t\t\t\t\t\t\t/^\\s*(#|@)__PURE__\\s*$/.test(comment.value)\n\t\t\t\t\t);\n\t\t\t\tif (!pureFlag) return false;\n\t\t\t\tcommentsStartPos = expr.callee.range[1];\n\t\t\t\treturn expr.arguments.every(arg => {\n\t\t\t\t\tif (arg.type === \"SpreadElement\") return false;\n\t\t\t\t\tconst pureFlag = this.isPure(arg, commentsStartPos);\n\t\t\t\t\tcommentsStartPos = arg.range[1];\n\t\t\t\t\treturn pureFlag;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tconst evaluated = this.evaluateExpression(expr);\n\t\treturn !evaluated.couldHaveSideEffects();\n\t}\n\n\tgetComments(range) {\n\t\tconst [rangeStart, rangeEnd] = range;\n\t\tconst compare = (comment, needle) => comment.range[0] - needle;\n\t\tlet idx = binarySearchBounds.ge(this.comments, rangeStart, compare);\n\t\tlet commentsInRange = [];\n\t\twhile (this.comments[idx] && this.comments[idx].range[1] <= rangeEnd) {\n\t\t\tcommentsInRange.push(this.comments[idx]);\n\t\t\tidx++;\n\t\t}\n\n\t\treturn commentsInRange;\n\t}\n\n\t/**\n\t * @param {number} pos source code position\n\t * @returns {boolean} true when a semicolon has been inserted before this position, false if not\n\t */\n\tisAsiPosition(pos) {\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\tif (currentStatement === undefined) throw new Error(\"Not in statement\");\n\t\treturn (\n\t\t\t// Either asking directly for the end position of the current statement\n\t\t\t(currentStatement.range[1] === pos && this.semicolons.has(pos)) ||\n\t\t\t// Or asking for the start position of the current statement,\n\t\t\t// here we have to check multiple things\n\t\t\t(currentStatement.range[0] === pos &&\n\t\t\t\t// is there a previous statement which might be relevant?\n\t\t\t\tthis.prevStatement !== undefined &&\n\t\t\t\t// is the end position of the previous statement an ASI position?\n\t\t\t\tthis.semicolons.has(this.prevStatement.range[1]))\n\t\t);\n\t}\n\n\t/**\n\t * @param {number} pos source code position\n\t * @returns {void}\n\t */\n\tunsetAsiPosition(pos) {\n\t\tthis.semicolons.delete(pos);\n\t}\n\n\tisStatementLevelExpression(expr) {\n\t\tconst currentStatement = this.statementPath[this.statementPath.length - 1];\n\t\treturn (\n\t\t\texpr === currentStatement ||\n\t\t\t(currentStatement.type === \"ExpressionStatement\" &&\n\t\t\t\tcurrentStatement.expression === expr)\n\t\t);\n\t}\n\n\tgetTagData(name, tag) {\n\t\tconst info = this.scope.definitions.get(name);\n\t\tif (info instanceof VariableInfo) {\n\t\t\tlet tagInfo = info.tagInfo;\n\t\t\twhile (tagInfo !== undefined) {\n\t\t\t\tif (tagInfo.tag === tag) return tagInfo.data;\n\t\t\t\ttagInfo = tagInfo.next;\n\t\t\t}\n\t\t}\n\t}\n\n\ttagVariable(name, tag, data) {\n\t\tconst oldInfo = this.scope.definitions.get(name);\n\t\t/** @type {VariableInfo} */\n\t\tlet newInfo;\n\t\tif (oldInfo === undefined) {\n\t\t\tnewInfo = new VariableInfo(this.scope, name, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: undefined\n\t\t\t});\n\t\t} else if (oldInfo instanceof VariableInfo) {\n\t\t\tnewInfo = new VariableInfo(oldInfo.declaredScope, oldInfo.freeName, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: oldInfo.tagInfo\n\t\t\t});\n\t\t} else {\n\t\t\tnewInfo = new VariableInfo(oldInfo, true, {\n\t\t\t\ttag,\n\t\t\t\tdata,\n\t\t\t\tnext: undefined\n\t\t\t});\n\t\t}\n\t\tthis.scope.definitions.set(name, newInfo);\n\t}\n\n\tdefineVariable(name) {\n\t\tconst oldInfo = this.scope.definitions.get(name);\n\t\t// Don't redefine variable in same scope to keep existing tags\n\t\tif (oldInfo instanceof VariableInfo && oldInfo.declaredScope === this.scope)\n\t\t\treturn;\n\t\tthis.scope.definitions.set(name, this.scope);\n\t}\n\n\tundefineVariable(name) {\n\t\tthis.scope.definitions.delete(name);\n\t}\n\n\tisVariableDefined(name) {\n\t\tconst info = this.scope.definitions.get(name);\n\t\tif (info === undefined) return false;\n\t\tif (info instanceof VariableInfo) {\n\t\t\treturn info.freeName === true;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t * @returns {ExportedVariableInfo} info for this variable\n\t */\n\tgetVariableInfo(name) {\n\t\tconst value = this.scope.definitions.get(name);\n\t\tif (value === undefined) {\n\t\t\treturn name;\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} name variable name\n\t * @param {ExportedVariableInfo} variableInfo new info for this variable\n\t * @returns {void}\n\t */\n\tsetVariable(name, variableInfo) {\n\t\tif (typeof variableInfo === \"string\") {\n\t\t\tif (variableInfo === name) {\n\t\t\t\tthis.scope.definitions.delete(name);\n\t\t\t} else {\n\t\t\t\tthis.scope.definitions.set(\n\t\t\t\t\tname,\n\t\t\t\t\tnew VariableInfo(this.scope, variableInfo, undefined)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.scope.definitions.set(name, variableInfo);\n\t\t}\n\t}\n\n\tparseCommentOptions(range) {\n\t\tconst comments = this.getComments(range);\n\t\tif (comments.length === 0) {\n\t\t\treturn EMPTY_COMMENT_OPTIONS;\n\t\t}\n\t\tlet options = {};\n\t\tlet errors = [];\n\t\tfor (const comment of comments) {\n\t\t\tconst { value } = comment;\n\t\t\tif (value && webpackCommentRegExp.test(value)) {\n\t\t\t\t// try compile only if webpack options comment is present\n\t\t\t\ttry {\n\t\t\t\t\tconst val = vm.runInNewContext(`(function(){return {${value}};})()`);\n\t\t\t\t\tObject.assign(options, val);\n\t\t\t\t} catch (e) {\n\t\t\t\t\te.comment = comment;\n\t\t\t\t\terrors.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { options, errors };\n\t}\n\n\t/**\n\t * @param {MemberExpressionNode} expression a member expression\n\t * @returns {{ members: string[], object: ExpressionNode | SuperNode }} member names (reverse order) and remaining object\n\t */\n\textractMemberExpressionChain(expression) {\n\t\t/** @type {AnyNode} */\n\t\tlet expr = expression;\n\t\tconst members = [];\n\t\twhile (expr.type === \"MemberExpression\") {\n\t\t\tif (expr.computed) {\n\t\t\t\tif (expr.property.type !== \"Literal\") break;\n\t\t\t\tmembers.push(`${expr.property.value}`);\n\t\t\t} else {\n\t\t\t\tif (expr.property.type !== \"Identifier\") break;\n\t\t\t\tmembers.push(expr.property.name);\n\t\t\t}\n\t\t\texpr = expr.object;\n\t\t}\n\t\treturn {\n\t\t\tmembers,\n\t\t\tobject: expr\n\t\t};\n\t}\n\n\t/**\n\t * @param {string} varName variable name\n\t * @returns {{name: string, info: VariableInfo | string}} name of the free variable and variable info for that\n\t */\n\tgetFreeInfoFromVariable(varName) {\n\t\tconst info = this.getVariableInfo(varName);\n\t\tlet name;\n\t\tif (info instanceof VariableInfo) {\n\t\t\tname = info.freeName;\n\t\t\tif (typeof name !== \"string\") return undefined;\n\t\t} else if (typeof info !== \"string\") {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\tname = info;\n\t\t}\n\t\treturn { info, name };\n\t}\n\n\t/** @typedef {{ type: \"call\", call: CallExpressionNode, calleeName: string, rootInfo: string | VariableInfo, getCalleeMembers: () => string[], name: string, getMembers: () => string[]}} CallExpressionInfo */\n\t/** @typedef {{ type: \"expression\", rootInfo: string | VariableInfo, name: string, getMembers: () => string[]}} ExpressionExpressionInfo */\n\n\t/**\n\t * @param {MemberExpressionNode} expression a member expression\n\t * @param {number} allowedTypes which types should be returned, presented in bit mask\n\t * @returns {CallExpressionInfo | ExpressionExpressionInfo | undefined} expression info\n\t */\n\tgetMemberExpressionInfo(expression, allowedTypes) {\n\t\tconst { object, members } = this.extractMemberExpressionChain(expression);\n\t\tswitch (object.type) {\n\t\t\tcase \"CallExpression\": {\n\t\t\t\tif ((allowedTypes & ALLOWED_MEMBER_TYPES_CALL_EXPRESSION) === 0)\n\t\t\t\t\treturn undefined;\n\t\t\t\tlet callee = object.callee;\n\t\t\t\tlet rootMembers = EMPTY_ARRAY;\n\t\t\t\tif (callee.type === \"MemberExpression\") {\n\t\t\t\t\t({ object: callee, members: rootMembers } =\n\t\t\t\t\t\tthis.extractMemberExpressionChain(callee));\n\t\t\t\t}\n\t\t\t\tconst rootName = getRootName(callee);\n\t\t\t\tif (!rootName) return undefined;\n\t\t\t\tconst result = this.getFreeInfoFromVariable(rootName);\n\t\t\t\tif (!result) return undefined;\n\t\t\t\tconst { info: rootInfo, name: resolvedRoot } = result;\n\t\t\t\tconst calleeName = objectAndMembersToName(resolvedRoot, rootMembers);\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"call\",\n\t\t\t\t\tcall: object,\n\t\t\t\t\tcalleeName,\n\t\t\t\t\trootInfo,\n\t\t\t\t\tgetCalleeMembers: memoize(() => rootMembers.reverse()),\n\t\t\t\t\tname: objectAndMembersToName(`${calleeName}()`, members),\n\t\t\t\t\tgetMembers: memoize(() => members.reverse())\n\t\t\t\t};\n\t\t\t}\n\t\t\tcase \"Identifier\":\n\t\t\tcase \"MetaProperty\":\n\t\t\tcase \"ThisExpression\": {\n\t\t\t\tif ((allowedTypes & ALLOWED_MEMBER_TYPES_EXPRESSION) === 0)\n\t\t\t\t\treturn undefined;\n\t\t\t\tconst rootName = getRootName(object);\n\t\t\t\tif (!rootName) return undefined;\n\n\t\t\t\tconst result = this.getFreeInfoFromVariable(rootName);\n\t\t\t\tif (!result) return undefined;\n\t\t\t\tconst { info: rootInfo, name: resolvedRoot } = result;\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"expression\",\n\t\t\t\t\tname: objectAndMembersToName(resolvedRoot, members),\n\t\t\t\t\trootInfo,\n\t\t\t\t\tgetMembers: memoize(() => members.reverse())\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {MemberExpressionNode} expression an expression\n\t * @returns {{ name: string, rootInfo: ExportedVariableInfo, getMembers: () => string[]}} name info\n\t */\n\tgetNameForExpression(expression) {\n\t\treturn this.getMemberExpressionInfo(\n\t\t\texpression,\n\t\t\tALLOWED_MEMBER_TYPES_EXPRESSION\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} code source code\n\t * @param {ParseOptions} options parsing options\n\t * @returns {ProgramNode} parsed ast\n\t */\n\tstatic _parse(code, options) {\n\t\tconst type = options ? options.sourceType : \"module\";\n\t\t/** @type {AcornOptions} */\n\t\tconst parserOptions = {\n\t\t\t...defaultParserOptions,\n\t\t\tallowReturnOutsideFunction: type === \"script\",\n\t\t\t...options,\n\t\t\tsourceType: type === \"auto\" ? \"module\" : type\n\t\t};\n\n\t\t/** @type {AnyNode} */\n\t\tlet ast;\n\t\tlet error;\n\t\tlet threw = false;\n\t\ttry {\n\t\t\tast = /** @type {AnyNode} */ (parser.parse(code, parserOptions));\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t\tthrew = true;\n\t\t}\n\n\t\tif (threw && type === \"auto\") {\n\t\t\tparserOptions.sourceType = \"script\";\n\t\t\tif (!(\"allowReturnOutsideFunction\" in options)) {\n\t\t\t\tparserOptions.allowReturnOutsideFunction = true;\n\t\t\t}\n\t\t\tif (Array.isArray(parserOptions.onComment)) {\n\t\t\t\tparserOptions.onComment.length = 0;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tast = /** @type {AnyNode} */ (parser.parse(code, parserOptions));\n\t\t\t\tthrew = false;\n\t\t\t} catch (e) {\n\t\t\t\t// we use the error from first parse try\n\t\t\t\t// so nothing to do here\n\t\t\t}\n\t\t}\n\n\t\tif (threw) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn /** @type {ProgramNode} */ (ast);\n\t}\n}\n\nmodule.exports = JavascriptParser;\nmodule.exports.ALLOWED_MEMBER_TYPES_ALL = ALLOWED_MEMBER_TYPES_ALL;\nmodule.exports.ALLOWED_MEMBER_TYPES_EXPRESSION =\n\tALLOWED_MEMBER_TYPES_EXPRESSION;\nmodule.exports.ALLOWED_MEMBER_TYPES_CALL_EXPRESSION =\n\tALLOWED_MEMBER_TYPES_CALL_EXPRESSION;\n"]},"metadata":{},"sourceType":"script"}