{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction concatUint8Arrays() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  var totalLength = arrays.reduce(function (a, b) {\n    return a + b.length;\n  }, 0);\n  var result = new Uint8Array(totalLength);\n  var offset = 0;\n\n  for (var _i = 0; _i < arrays.length; _i++) {\n    var arr = arrays[_i];\n\n    if (arr instanceof Uint8Array === false) {\n      throw new Error(\"arr must be of type Uint8Array\");\n    }\n\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n\n  return result;\n}\n\nexport function overrideBytesInBuffer(buffer, startLoc, endLoc, newBytes) {\n  var beforeBytes = buffer.slice(0, startLoc);\n  var afterBytes = buffer.slice(endLoc, buffer.length); // replacement is empty, we can omit it\n\n  if (newBytes.length === 0) {\n    return concatUint8Arrays(beforeBytes, afterBytes);\n  }\n\n  var replacement = Uint8Array.from(newBytes);\n  return concatUint8Arrays(beforeBytes, replacement, afterBytes);\n}\nexport function makeBuffer() {\n  for (var _len2 = arguments.length, splitedBytes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    splitedBytes[_key2] = arguments[_key2];\n  }\n\n  var bytes = [].concat.apply([], splitedBytes);\n  return new Uint8Array(bytes).buffer;\n}\nexport function fromHexdump(str) {\n  var lines = str.split(\"\\n\"); // remove any leading left whitespace\n\n  lines = lines.map(function (line) {\n    return line.trim();\n  });\n  var bytes = lines.reduce(function (acc, line) {\n    var cols = line.split(\" \"); // remove the offset, left column\n\n    cols.shift();\n    cols = cols.filter(function (x) {\n      return x !== \"\";\n    });\n    var bytes = cols.map(function (x) {\n      return parseInt(x, 16);\n    });\n    acc.push.apply(acc, _toConsumableArray(bytes));\n    return acc;\n  }, []);\n  return Buffer.from(bytes);\n}","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/@webassemblyjs/helper-buffer/esm/index.js"],"names":["_toConsumableArray","arr","Array","isArray","i","arr2","length","from","concatUint8Arrays","_len","arguments","arrays","_key","totalLength","reduce","a","b","result","Uint8Array","offset","_i","Error","set","overrideBytesInBuffer","buffer","startLoc","endLoc","newBytes","beforeBytes","slice","afterBytes","replacement","makeBuffer","_len2","splitedBytes","_key2","bytes","concat","apply","fromHexdump","str","lines","split","map","line","trim","acc","cols","shift","filter","x","parseInt","push","Buffer"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction concatUint8Arrays() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  var totalLength = arrays.reduce(function (a, b) {\n    return a + b.length;\n  }, 0);\n  var result = new Uint8Array(totalLength);\n  var offset = 0;\n\n  for (var _i = 0; _i < arrays.length; _i++) {\n    var arr = arrays[_i];\n\n    if (arr instanceof Uint8Array === false) {\n      throw new Error(\"arr must be of type Uint8Array\");\n    }\n\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n\n  return result;\n}\n\nexport function overrideBytesInBuffer(buffer, startLoc, endLoc, newBytes) {\n  var beforeBytes = buffer.slice(0, startLoc);\n  var afterBytes = buffer.slice(endLoc, buffer.length); // replacement is empty, we can omit it\n\n  if (newBytes.length === 0) {\n    return concatUint8Arrays(beforeBytes, afterBytes);\n  }\n\n  var replacement = Uint8Array.from(newBytes);\n  return concatUint8Arrays(beforeBytes, replacement, afterBytes);\n}\nexport function makeBuffer() {\n  for (var _len2 = arguments.length, splitedBytes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    splitedBytes[_key2] = arguments[_key2];\n  }\n\n  var bytes = [].concat.apply([], splitedBytes);\n  return new Uint8Array(bytes).buffer;\n}\nexport function fromHexdump(str) {\n  var lines = str.split(\"\\n\"); // remove any leading left whitespace\n\n  lines = lines.map(function (line) {\n    return line.trim();\n  });\n  var bytes = lines.reduce(function (acc, line) {\n    var cols = line.split(\" \"); // remove the offset, left column\n\n    cols.shift();\n    cols = cols.filter(function (x) {\n      return x !== \"\";\n    });\n    var bytes = cols.map(function (x) {\n      return parseInt(x, 16);\n    });\n    acc.push.apply(acc, _toConsumableArray(bytes));\n    return acc;\n  }, []);\n  return Buffer.from(bytes);\n}"]},"metadata":{},"sourceType":"module"}