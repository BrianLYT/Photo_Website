{"ast":null,"code":"import * as decoder from \"./decoder\";\nimport * as t from \"@webassemblyjs/ast\";\n/**\n * TODO(sven): I added initial props, but we should rather fix\n * https://github.com/xtuc/webassemblyjs/issues/405\n */\n\nvar defaultDecoderOpts = {\n  dump: false,\n  ignoreCodeSection: false,\n  ignoreDataSection: false,\n  ignoreCustomNameSection: false\n}; // traverses the AST, locating function name metadata, which is then\n// used to update index-based identifiers with function names\n\nfunction restoreFunctionNames(ast) {\n  var functionNames = [];\n  t.traverse(ast, {\n    FunctionNameMetadata: function FunctionNameMetadata(_ref) {\n      var node = _ref.node;\n      functionNames.push({\n        name: node.value,\n        index: node.index\n      });\n    }\n  });\n\n  if (functionNames.length === 0) {\n    return;\n  }\n\n  t.traverse(ast, {\n    Func: function (_Func) {\n      function Func(_x) {\n        return _Func.apply(this, arguments);\n      }\n\n      Func.toString = function () {\n        return _Func.toString();\n      };\n\n      return Func;\n    }(function (_ref2) {\n      var node = _ref2.node; // $FlowIgnore\n\n      var nodeName = node.name;\n      var indexBasedFunctionName = nodeName.value;\n      var index = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n      var functionName = functionNames.find(function (f) {\n        return f.index === index;\n      });\n\n      if (functionName) {\n        var oldValue = nodeName.value;\n        nodeName.value = functionName.name;\n        nodeName.numeric = oldValue; // $FlowIgnore\n\n        delete nodeName.raw;\n      }\n    }),\n    // Also update the reference in the export\n    ModuleExport: function (_ModuleExport) {\n      function ModuleExport(_x2) {\n        return _ModuleExport.apply(this, arguments);\n      }\n\n      ModuleExport.toString = function () {\n        return _ModuleExport.toString();\n      };\n\n      return ModuleExport;\n    }(function (_ref3) {\n      var node = _ref3.node;\n\n      if (node.descr.exportType === \"Func\") {\n        // $FlowIgnore\n        var nodeName = node.descr.id;\n        var index = nodeName.value;\n        var functionName = functionNames.find(function (f) {\n          return f.index === index;\n        });\n\n        if (functionName) {\n          node.descr.id = t.identifier(functionName.name);\n        }\n      }\n    }),\n    ModuleImport: function (_ModuleImport) {\n      function ModuleImport(_x3) {\n        return _ModuleImport.apply(this, arguments);\n      }\n\n      ModuleImport.toString = function () {\n        return _ModuleImport.toString();\n      };\n\n      return ModuleImport;\n    }(function (_ref4) {\n      var node = _ref4.node;\n\n      if (node.descr.type === \"FuncImportDescr\") {\n        // $FlowIgnore\n        var indexBasedFunctionName = node.descr.id;\n        var index = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n        var functionName = functionNames.find(function (f) {\n          return f.index === index;\n        });\n\n        if (functionName) {\n          // $FlowIgnore\n          node.descr.id = t.identifier(functionName.name);\n        }\n      }\n    }),\n    CallInstruction: function (_CallInstruction) {\n      function CallInstruction(_x4) {\n        return _CallInstruction.apply(this, arguments);\n      }\n\n      CallInstruction.toString = function () {\n        return _CallInstruction.toString();\n      };\n\n      return CallInstruction;\n    }(function (nodePath) {\n      var node = nodePath.node;\n      var index = node.index.value;\n      var functionName = functionNames.find(function (f) {\n        return f.index === index;\n      });\n\n      if (functionName) {\n        var oldValue = node.index;\n        node.index = t.identifier(functionName.name);\n        node.numeric = oldValue; // $FlowIgnore\n\n        delete node.raw;\n      }\n    })\n  });\n}\n\nfunction restoreLocalNames(ast) {\n  var localNames = [];\n  t.traverse(ast, {\n    LocalNameMetadata: function LocalNameMetadata(_ref5) {\n      var node = _ref5.node;\n      localNames.push({\n        name: node.value,\n        localIndex: node.localIndex,\n        functionIndex: node.functionIndex\n      });\n    }\n  });\n\n  if (localNames.length === 0) {\n    return;\n  }\n\n  t.traverse(ast, {\n    Func: function (_Func2) {\n      function Func(_x5) {\n        return _Func2.apply(this, arguments);\n      }\n\n      Func.toString = function () {\n        return _Func2.toString();\n      };\n\n      return Func;\n    }(function (_ref6) {\n      var node = _ref6.node;\n      var signature = node.signature;\n\n      if (signature.type !== \"Signature\") {\n        return;\n      } // $FlowIgnore\n\n\n      var nodeName = node.name;\n      var indexBasedFunctionName = nodeName.value;\n      var functionIndex = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n      signature.params.forEach(function (param, paramIndex) {\n        var paramName = localNames.find(function (f) {\n          return f.localIndex === paramIndex && f.functionIndex === functionIndex;\n        });\n\n        if (paramName && paramName.name !== \"\") {\n          param.id = paramName.name;\n        }\n      });\n    })\n  });\n}\n\nfunction restoreModuleName(ast) {\n  t.traverse(ast, {\n    ModuleNameMetadata: function (_ModuleNameMetadata) {\n      function ModuleNameMetadata(_x6) {\n        return _ModuleNameMetadata.apply(this, arguments);\n      }\n\n      ModuleNameMetadata.toString = function () {\n        return _ModuleNameMetadata.toString();\n      };\n\n      return ModuleNameMetadata;\n    }(function (moduleNameMetadataPath) {\n      // update module\n      t.traverse(ast, {\n        Module: function (_Module) {\n          function Module(_x7) {\n            return _Module.apply(this, arguments);\n          }\n\n          Module.toString = function () {\n            return _Module.toString();\n          };\n\n          return Module;\n        }(function (_ref7) {\n          var node = _ref7.node;\n          var name = moduleNameMetadataPath.node.value; // compatiblity with wast-parser\n\n          if (name === \"\") {\n            name = null;\n          }\n\n          node.id = name;\n        })\n      });\n    })\n  });\n}\n\nexport function decode(buf, customOpts) {\n  var opts = Object.assign({}, defaultDecoderOpts, customOpts);\n  var ast = decoder.decode(buf, opts);\n\n  if (opts.ignoreCustomNameSection === false) {\n    restoreFunctionNames(ast);\n    restoreLocalNames(ast);\n    restoreModuleName(ast);\n  }\n\n  return ast;\n}","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/@webassemblyjs/wasm-parser/esm/index.js"],"names":["decoder","t","defaultDecoderOpts","dump","ignoreCodeSection","ignoreDataSection","ignoreCustomNameSection","restoreFunctionNames","ast","functionNames","traverse","FunctionNameMetadata","_ref","node","push","name","value","index","length","Func","_Func","_x","apply","arguments","toString","_ref2","nodeName","indexBasedFunctionName","Number","replace","functionName","find","f","oldValue","numeric","raw","ModuleExport","_ModuleExport","_x2","_ref3","descr","exportType","id","identifier","ModuleImport","_ModuleImport","_x3","_ref4","type","CallInstruction","_CallInstruction","_x4","nodePath","restoreLocalNames","localNames","LocalNameMetadata","_ref5","localIndex","functionIndex","_Func2","_x5","_ref6","signature","params","forEach","param","paramIndex","paramName","restoreModuleName","ModuleNameMetadata","_ModuleNameMetadata","_x6","moduleNameMetadataPath","Module","_Module","_x7","_ref7","decode","buf","customOpts","opts","Object","assign"],"mappings":"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","sourcesContent":["import * as decoder from \"./decoder\";\nimport * as t from \"@webassemblyjs/ast\";\n/**\n * TODO(sven): I added initial props, but we should rather fix\n * https://github.com/xtuc/webassemblyjs/issues/405\n */\n\nvar defaultDecoderOpts = {\n  dump: false,\n  ignoreCodeSection: false,\n  ignoreDataSection: false,\n  ignoreCustomNameSection: false\n}; // traverses the AST, locating function name metadata, which is then\n// used to update index-based identifiers with function names\n\nfunction restoreFunctionNames(ast) {\n  var functionNames = [];\n  t.traverse(ast, {\n    FunctionNameMetadata: function FunctionNameMetadata(_ref) {\n      var node = _ref.node;\n      functionNames.push({\n        name: node.value,\n        index: node.index\n      });\n    }\n  });\n\n  if (functionNames.length === 0) {\n    return;\n  }\n\n  t.traverse(ast, {\n    Func: function (_Func) {\n      function Func(_x) {\n        return _Func.apply(this, arguments);\n      }\n\n      Func.toString = function () {\n        return _Func.toString();\n      };\n\n      return Func;\n    }(function (_ref2) {\n      var node = _ref2.node;\n      // $FlowIgnore\n      var nodeName = node.name;\n      var indexBasedFunctionName = nodeName.value;\n      var index = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n      var functionName = functionNames.find(function (f) {\n        return f.index === index;\n      });\n\n      if (functionName) {\n        var oldValue = nodeName.value;\n        nodeName.value = functionName.name;\n        nodeName.numeric = oldValue; // $FlowIgnore\n\n        delete nodeName.raw;\n      }\n    }),\n    // Also update the reference in the export\n    ModuleExport: function (_ModuleExport) {\n      function ModuleExport(_x2) {\n        return _ModuleExport.apply(this, arguments);\n      }\n\n      ModuleExport.toString = function () {\n        return _ModuleExport.toString();\n      };\n\n      return ModuleExport;\n    }(function (_ref3) {\n      var node = _ref3.node;\n\n      if (node.descr.exportType === \"Func\") {\n        // $FlowIgnore\n        var nodeName = node.descr.id;\n        var index = nodeName.value;\n        var functionName = functionNames.find(function (f) {\n          return f.index === index;\n        });\n\n        if (functionName) {\n          node.descr.id = t.identifier(functionName.name);\n        }\n      }\n    }),\n    ModuleImport: function (_ModuleImport) {\n      function ModuleImport(_x3) {\n        return _ModuleImport.apply(this, arguments);\n      }\n\n      ModuleImport.toString = function () {\n        return _ModuleImport.toString();\n      };\n\n      return ModuleImport;\n    }(function (_ref4) {\n      var node = _ref4.node;\n\n      if (node.descr.type === \"FuncImportDescr\") {\n        // $FlowIgnore\n        var indexBasedFunctionName = node.descr.id;\n        var index = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n        var functionName = functionNames.find(function (f) {\n          return f.index === index;\n        });\n\n        if (functionName) {\n          // $FlowIgnore\n          node.descr.id = t.identifier(functionName.name);\n        }\n      }\n    }),\n    CallInstruction: function (_CallInstruction) {\n      function CallInstruction(_x4) {\n        return _CallInstruction.apply(this, arguments);\n      }\n\n      CallInstruction.toString = function () {\n        return _CallInstruction.toString();\n      };\n\n      return CallInstruction;\n    }(function (nodePath) {\n      var node = nodePath.node;\n      var index = node.index.value;\n      var functionName = functionNames.find(function (f) {\n        return f.index === index;\n      });\n\n      if (functionName) {\n        var oldValue = node.index;\n        node.index = t.identifier(functionName.name);\n        node.numeric = oldValue; // $FlowIgnore\n\n        delete node.raw;\n      }\n    })\n  });\n}\n\nfunction restoreLocalNames(ast) {\n  var localNames = [];\n  t.traverse(ast, {\n    LocalNameMetadata: function LocalNameMetadata(_ref5) {\n      var node = _ref5.node;\n      localNames.push({\n        name: node.value,\n        localIndex: node.localIndex,\n        functionIndex: node.functionIndex\n      });\n    }\n  });\n\n  if (localNames.length === 0) {\n    return;\n  }\n\n  t.traverse(ast, {\n    Func: function (_Func2) {\n      function Func(_x5) {\n        return _Func2.apply(this, arguments);\n      }\n\n      Func.toString = function () {\n        return _Func2.toString();\n      };\n\n      return Func;\n    }(function (_ref6) {\n      var node = _ref6.node;\n      var signature = node.signature;\n\n      if (signature.type !== \"Signature\") {\n        return;\n      } // $FlowIgnore\n\n\n      var nodeName = node.name;\n      var indexBasedFunctionName = nodeName.value;\n      var functionIndex = Number(indexBasedFunctionName.replace(\"func_\", \"\"));\n      signature.params.forEach(function (param, paramIndex) {\n        var paramName = localNames.find(function (f) {\n          return f.localIndex === paramIndex && f.functionIndex === functionIndex;\n        });\n\n        if (paramName && paramName.name !== \"\") {\n          param.id = paramName.name;\n        }\n      });\n    })\n  });\n}\n\nfunction restoreModuleName(ast) {\n  t.traverse(ast, {\n    ModuleNameMetadata: function (_ModuleNameMetadata) {\n      function ModuleNameMetadata(_x6) {\n        return _ModuleNameMetadata.apply(this, arguments);\n      }\n\n      ModuleNameMetadata.toString = function () {\n        return _ModuleNameMetadata.toString();\n      };\n\n      return ModuleNameMetadata;\n    }(function (moduleNameMetadataPath) {\n      // update module\n      t.traverse(ast, {\n        Module: function (_Module) {\n          function Module(_x7) {\n            return _Module.apply(this, arguments);\n          }\n\n          Module.toString = function () {\n            return _Module.toString();\n          };\n\n          return Module;\n        }(function (_ref7) {\n          var node = _ref7.node;\n          var name = moduleNameMetadataPath.node.value; // compatiblity with wast-parser\n\n          if (name === \"\") {\n            name = null;\n          }\n\n          node.id = name;\n        })\n      });\n    })\n  });\n}\n\nexport function decode(buf, customOpts) {\n  var opts = Object.assign({}, defaultDecoderOpts, customOpts);\n  var ast = decoder.decode(buf, opts);\n\n  if (opts.ignoreCustomNameSection === false) {\n    restoreFunctionNames(ast);\n    restoreLocalNames(ast);\n    restoreModuleName(ast);\n  }\n\n  return ast;\n}"]},"metadata":{},"sourceType":"module"}