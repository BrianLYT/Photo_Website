{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  SyncWaterfallHook\n} = require(\"tapable\");\n\nconst Compilation = require(\"../Compilation\");\n\nconst Generator = require(\"../Generator\");\n\nconst {\n  tryRunOrWebpackError\n} = require(\"../HookWebpackError\");\n\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\n\nconst memoize = require(\"../util/memoize\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"../Template\").RenderManifestEntry} RenderManifestEntry */\n\n/** @typedef {import(\"../Template\").RenderManifestOptions} RenderManifestOptions */\n\n\nconst getAsyncWebAssemblyGenerator = memoize(() => require(\"./AsyncWebAssemblyGenerator\"));\nconst getAsyncWebAssemblyJavascriptGenerator = memoize(() => require(\"./AsyncWebAssemblyJavascriptGenerator\"));\nconst getAsyncWebAssemblyParser = memoize(() => require(\"./AsyncWebAssemblyParser\"));\n/**\n * @typedef {Object} WebAssemblyRenderContext\n * @property {Chunk} chunk the chunk\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {CodeGenerationResults} codeGenerationResults results of code generation\n */\n\n/**\n * @typedef {Object} CompilationHooks\n * @property {SyncWaterfallHook<[Source, Module, WebAssemblyRenderContext]>} renderModuleContent\n */\n\n/** @type {WeakMap<Compilation, CompilationHooks>} */\n\nconst compilationHooksMap = new WeakMap();\n\nclass AsyncWebAssemblyModulesPlugin {\n  /**\n   * @param {Compilation} compilation the compilation\n   * @returns {CompilationHooks} the attached hooks\n   */\n  static getCompilationHooks(compilation) {\n    if (!(compilation instanceof Compilation)) {\n      throw new TypeError(\"The 'compilation' argument must be an instance of Compilation\");\n    }\n\n    let hooks = compilationHooksMap.get(compilation);\n\n    if (hooks === undefined) {\n      hooks = {\n        renderModuleContent: new SyncWaterfallHook([\"source\", \"module\", \"renderContext\"])\n      };\n      compilationHooksMap.set(compilation, hooks);\n    }\n\n    return hooks;\n  }\n\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"AsyncWebAssemblyModulesPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      const hooks = AsyncWebAssemblyModulesPlugin.getCompilationHooks(compilation);\n      compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n      normalModuleFactory.hooks.createParser.for(\"webassembly/async\").tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n        const AsyncWebAssemblyParser = getAsyncWebAssemblyParser();\n        return new AsyncWebAssemblyParser();\n      });\n      normalModuleFactory.hooks.createGenerator.for(\"webassembly/async\").tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n        const AsyncWebAssemblyJavascriptGenerator = getAsyncWebAssemblyJavascriptGenerator();\n        const AsyncWebAssemblyGenerator = getAsyncWebAssemblyGenerator();\n        return Generator.byType({\n          javascript: new AsyncWebAssemblyJavascriptGenerator(compilation.outputOptions.webassemblyModuleFilename),\n          webassembly: new AsyncWebAssemblyGenerator(this.options)\n        });\n      });\n      compilation.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", (result, options) => {\n        const {\n          moduleGraph,\n          chunkGraph,\n          runtimeTemplate\n        } = compilation;\n        const {\n          chunk,\n          outputOptions,\n          dependencyTemplates,\n          codeGenerationResults\n        } = options;\n\n        for (const module of chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesByIdentifier)) {\n          if (module.type === \"webassembly/async\") {\n            const filenameTemplate = outputOptions.webassemblyModuleFilename;\n            result.push({\n              render: () => this.renderModule(module, {\n                chunk,\n                dependencyTemplates,\n                runtimeTemplate,\n                moduleGraph,\n                chunkGraph,\n                codeGenerationResults\n              }, hooks),\n              filenameTemplate,\n              pathOptions: {\n                module,\n                runtime: chunk.runtime,\n                chunkGraph\n              },\n              auxiliary: true,\n              identifier: `webassemblyAsyncModule${chunkGraph.getModuleId(module)}`,\n              hash: chunkGraph.getModuleHash(module, chunk.runtime)\n            });\n          }\n        }\n\n        return result;\n      });\n    });\n  }\n\n  renderModule(module, renderContext, hooks) {\n    const {\n      codeGenerationResults,\n      chunk\n    } = renderContext;\n\n    try {\n      const moduleSource = codeGenerationResults.getSource(module, chunk.runtime, \"webassembly\");\n      return tryRunOrWebpackError(() => hooks.renderModuleContent.call(moduleSource, module, renderContext), \"AsyncWebAssemblyModulesPlugin.getCompilationHooks().renderModuleContent\");\n    } catch (e) {\n      e.module = module;\n      throw e;\n    }\n  }\n\n}\n\nmodule.exports = AsyncWebAssemblyModulesPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyModulesPlugin.js"],"names":["SyncWaterfallHook","require","Compilation","Generator","tryRunOrWebpackError","WebAssemblyImportDependency","compareModulesByIdentifier","memoize","getAsyncWebAssemblyGenerator","getAsyncWebAssemblyJavascriptGenerator","getAsyncWebAssemblyParser","compilationHooksMap","WeakMap","AsyncWebAssemblyModulesPlugin","getCompilationHooks","compilation","TypeError","hooks","get","undefined","renderModuleContent","set","constructor","options","apply","compiler","tap","normalModuleFactory","dependencyFactories","createParser","for","AsyncWebAssemblyParser","createGenerator","AsyncWebAssemblyJavascriptGenerator","AsyncWebAssemblyGenerator","byType","javascript","outputOptions","webassemblyModuleFilename","webassembly","renderManifest","result","moduleGraph","chunkGraph","runtimeTemplate","chunk","dependencyTemplates","codeGenerationResults","module","getOrderedChunkModulesIterable","type","filenameTemplate","push","render","renderModule","pathOptions","runtime","auxiliary","identifier","getModuleId","hash","getModuleHash","renderContext","moduleSource","getSource","call","e","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { SyncWaterfallHook } = require(\"tapable\");\nconst Compilation = require(\"../Compilation\");\nconst Generator = require(\"../Generator\");\nconst { tryRunOrWebpackError } = require(\"../HookWebpackError\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../Template\").RenderManifestEntry} RenderManifestEntry */\n/** @typedef {import(\"../Template\").RenderManifestOptions} RenderManifestOptions */\n\nconst getAsyncWebAssemblyGenerator = memoize(() =>\n\trequire(\"./AsyncWebAssemblyGenerator\")\n);\nconst getAsyncWebAssemblyJavascriptGenerator = memoize(() =>\n\trequire(\"./AsyncWebAssemblyJavascriptGenerator\")\n);\nconst getAsyncWebAssemblyParser = memoize(() =>\n\trequire(\"./AsyncWebAssemblyParser\")\n);\n\n/**\n * @typedef {Object} WebAssemblyRenderContext\n * @property {Chunk} chunk the chunk\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {CodeGenerationResults} codeGenerationResults results of code generation\n */\n\n/**\n * @typedef {Object} CompilationHooks\n * @property {SyncWaterfallHook<[Source, Module, WebAssemblyRenderContext]>} renderModuleContent\n */\n\n/** @type {WeakMap<Compilation, CompilationHooks>} */\nconst compilationHooksMap = new WeakMap();\n\nclass AsyncWebAssemblyModulesPlugin {\n\t/**\n\t * @param {Compilation} compilation the compilation\n\t * @returns {CompilationHooks} the attached hooks\n\t */\n\tstatic getCompilationHooks(compilation) {\n\t\tif (!(compilation instanceof Compilation)) {\n\t\t\tthrow new TypeError(\n\t\t\t\t\"The 'compilation' argument must be an instance of Compilation\"\n\t\t\t);\n\t\t}\n\t\tlet hooks = compilationHooksMap.get(compilation);\n\t\tif (hooks === undefined) {\n\t\t\thooks = {\n\t\t\t\trenderModuleContent: new SyncWaterfallHook([\n\t\t\t\t\t\"source\",\n\t\t\t\t\t\"module\",\n\t\t\t\t\t\"renderContext\"\n\t\t\t\t])\n\t\t\t};\n\t\t\tcompilationHooksMap.set(compilation, hooks);\n\t\t}\n\t\treturn hooks;\n\t}\n\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AsyncWebAssemblyModulesPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst hooks =\n\t\t\t\t\tAsyncWebAssemblyModulesPlugin.getCompilationHooks(compilation);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"webassembly/async\")\n\t\t\t\t\t.tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tconst AsyncWebAssemblyParser = getAsyncWebAssemblyParser();\n\n\t\t\t\t\t\treturn new AsyncWebAssemblyParser();\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"webassembly/async\")\n\t\t\t\t\t.tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tconst AsyncWebAssemblyJavascriptGenerator =\n\t\t\t\t\t\t\tgetAsyncWebAssemblyJavascriptGenerator();\n\t\t\t\t\t\tconst AsyncWebAssemblyGenerator = getAsyncWebAssemblyGenerator();\n\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new AsyncWebAssemblyJavascriptGenerator(\n\t\t\t\t\t\t\t\tcompilation.outputOptions.webassemblyModuleFilename\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\twebassembly: new AsyncWebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.renderManifest.tap(\n\t\t\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t\t\t(result, options) => {\n\t\t\t\t\t\tconst { moduleGraph, chunkGraph, runtimeTemplate } = compilation;\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\toutputOptions,\n\t\t\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\t\t\tcodeGenerationResults\n\t\t\t\t\t\t} = options;\n\n\t\t\t\t\t\tfor (const module of chunkGraph.getOrderedChunkModulesIterable(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tif (module.type === \"webassembly/async\") {\n\t\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t\toutputOptions.webassemblyModuleFilename;\n\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\t\tthis.renderModule(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\t\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\t\t\t\t\tcodeGenerationResults\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\thooks\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\truntime: chunk.runtime,\n\t\t\t\t\t\t\t\t\t\tchunkGraph\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tauxiliary: true,\n\t\t\t\t\t\t\t\t\tidentifier: `webassemblyAsyncModule${chunkGraph.getModuleId(\n\t\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\t\thash: chunkGraph.getModuleHash(module, chunk.runtime)\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\trenderModule(module, renderContext, hooks) {\n\t\tconst { codeGenerationResults, chunk } = renderContext;\n\t\ttry {\n\t\t\tconst moduleSource = codeGenerationResults.getSource(\n\t\t\t\tmodule,\n\t\t\t\tchunk.runtime,\n\t\t\t\t\"webassembly\"\n\t\t\t);\n\t\t\treturn tryRunOrWebpackError(\n\t\t\t\t() =>\n\t\t\t\t\thooks.renderModuleContent.call(moduleSource, module, renderContext),\n\t\t\t\t\"AsyncWebAssemblyModulesPlugin.getCompilationHooks().renderModuleContent\"\n\t\t\t);\n\t\t} catch (e) {\n\t\t\te.module = module;\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nmodule.exports = AsyncWebAssemblyModulesPlugin;\n"]},"metadata":{},"sourceType":"script"}