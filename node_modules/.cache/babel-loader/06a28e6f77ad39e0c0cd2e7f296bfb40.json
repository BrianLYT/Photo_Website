{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\"); // macOS, Linux, and Windows all rely on these errors\n\n\nconst EXPECTED_ERRORS = new Set([\"EINVAL\", \"ENOENT\"]); // On Windows there is also this error in some cases\n\nif (process.platform === \"win32\") EXPECTED_ERRORS.add(\"UNKNOWN\");\n\nclass LinkResolver {\n  constructor() {\n    this.cache = new Map();\n  }\n  /**\n   * @param {string} file path to file or directory\n   * @returns {string[]} array of file and all symlinks contributed in the resolving process (first item is the resolved file)\n   */\n\n\n  resolve(file) {\n    const cacheEntry = this.cache.get(file);\n\n    if (cacheEntry !== undefined) {\n      return cacheEntry;\n    }\n\n    const parent = path.dirname(file);\n\n    if (parent === file) {\n      // At root of filesystem there can't be a link\n      const result = Object.freeze([file]);\n      this.cache.set(file, result);\n      return result;\n    } // resolve the parent directory to find links there and get the real path\n\n\n    const parentResolved = this.resolve(parent);\n    let realFile = file; // is the parent directory really somewhere else?\n\n    if (parentResolved[0] !== parent) {\n      // get the real location of file\n      const basename = path.basename(file);\n      realFile = path.resolve(parentResolved[0], basename);\n    } // try to read the link content\n\n\n    try {\n      const linkContent = fs.readlinkSync(realFile); // resolve the link content relative to the parent directory\n\n      const resolvedLink = path.resolve(parentResolved[0], linkContent); // recursive resolve the link content for more links in the structure\n\n      const linkResolved = this.resolve(resolvedLink); // merge parent and link resolve results\n\n      let result;\n\n      if (linkResolved.length > 1 && parentResolved.length > 1) {\n        // when both contain links we need to duplicate them with a Set\n        const resultSet = new Set(linkResolved); // add the link\n\n        resultSet.add(realFile); // add all symlinks of the parent\n\n        for (let i = 1; i < parentResolved.length; i++) {\n          resultSet.add(parentResolved[i]);\n        }\n\n        result = Object.freeze(Array.from(resultSet));\n      } else if (parentResolved.length > 1) {\n        // we have links in the parent but not for the link content location\n        result = parentResolved.slice();\n        result[0] = linkResolved[0]; // add the link\n\n        result.push(realFile);\n        Object.freeze(result);\n      } else if (linkResolved.length > 1) {\n        // we can return the link content location result\n        result = linkResolved.slice(); // add the link\n\n        result.push(realFile);\n        Object.freeze(result);\n      } else {\n        // neither link content location nor parent have links\n        // this link is the only link here\n        result = Object.freeze([// the resolve real location\n        linkResolved[0], // add the link\n        realFile]);\n      }\n\n      this.cache.set(file, result);\n      return result;\n    } catch (e) {\n      if (!EXPECTED_ERRORS.has(e.code)) {\n        throw e;\n      } // no link\n\n\n      const result = parentResolved.slice();\n      result[0] = realFile;\n      Object.freeze(result);\n      this.cache.set(file, result);\n      return result;\n    }\n  }\n\n}\n\nmodule.exports = LinkResolver;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/watchpack/lib/LinkResolver.js"],"names":["fs","require","path","EXPECTED_ERRORS","Set","process","platform","add","LinkResolver","constructor","cache","Map","resolve","file","cacheEntry","get","undefined","parent","dirname","result","Object","freeze","set","parentResolved","realFile","basename","linkContent","readlinkSync","resolvedLink","linkResolved","length","resultSet","i","Array","from","slice","push","e","has","code","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n// macOS, Linux, and Windows all rely on these errors\nconst EXPECTED_ERRORS = new Set([\"EINVAL\", \"ENOENT\"]);\n\n// On Windows there is also this error in some cases\nif (process.platform === \"win32\") EXPECTED_ERRORS.add(\"UNKNOWN\");\n\nclass LinkResolver {\n\tconstructor() {\n\t\tthis.cache = new Map();\n\t}\n\n\t/**\n\t * @param {string} file path to file or directory\n\t * @returns {string[]} array of file and all symlinks contributed in the resolving process (first item is the resolved file)\n\t */\n\tresolve(file) {\n\t\tconst cacheEntry = this.cache.get(file);\n\t\tif (cacheEntry !== undefined) {\n\t\t\treturn cacheEntry;\n\t\t}\n\t\tconst parent = path.dirname(file);\n\t\tif (parent === file) {\n\t\t\t// At root of filesystem there can't be a link\n\t\t\tconst result = Object.freeze([file]);\n\t\t\tthis.cache.set(file, result);\n\t\t\treturn result;\n\t\t}\n\t\t// resolve the parent directory to find links there and get the real path\n\t\tconst parentResolved = this.resolve(parent);\n\t\tlet realFile = file;\n\n\t\t// is the parent directory really somewhere else?\n\t\tif (parentResolved[0] !== parent) {\n\t\t\t// get the real location of file\n\t\t\tconst basename = path.basename(file);\n\t\t\trealFile = path.resolve(parentResolved[0], basename);\n\t\t}\n\t\t// try to read the link content\n\t\ttry {\n\t\t\tconst linkContent = fs.readlinkSync(realFile);\n\n\t\t\t// resolve the link content relative to the parent directory\n\t\t\tconst resolvedLink = path.resolve(parentResolved[0], linkContent);\n\n\t\t\t// recursive resolve the link content for more links in the structure\n\t\t\tconst linkResolved = this.resolve(resolvedLink);\n\n\t\t\t// merge parent and link resolve results\n\t\t\tlet result;\n\t\t\tif (linkResolved.length > 1 && parentResolved.length > 1) {\n\t\t\t\t// when both contain links we need to duplicate them with a Set\n\t\t\t\tconst resultSet = new Set(linkResolved);\n\t\t\t\t// add the link\n\t\t\t\tresultSet.add(realFile);\n\t\t\t\t// add all symlinks of the parent\n\t\t\t\tfor (let i = 1; i < parentResolved.length; i++) {\n\t\t\t\t\tresultSet.add(parentResolved[i]);\n\t\t\t\t}\n\t\t\t\tresult = Object.freeze(Array.from(resultSet));\n\t\t\t} else if (parentResolved.length > 1) {\n\t\t\t\t// we have links in the parent but not for the link content location\n\t\t\t\tresult = parentResolved.slice();\n\t\t\t\tresult[0] = linkResolved[0];\n\t\t\t\t// add the link\n\t\t\t\tresult.push(realFile);\n\t\t\t\tObject.freeze(result);\n\t\t\t} else if (linkResolved.length > 1) {\n\t\t\t\t// we can return the link content location result\n\t\t\t\tresult = linkResolved.slice();\n\t\t\t\t// add the link\n\t\t\t\tresult.push(realFile);\n\t\t\t\tObject.freeze(result);\n\t\t\t} else {\n\t\t\t\t// neither link content location nor parent have links\n\t\t\t\t// this link is the only link here\n\t\t\t\tresult = Object.freeze([\n\t\t\t\t\t// the resolve real location\n\t\t\t\t\tlinkResolved[0],\n\t\t\t\t\t// add the link\n\t\t\t\t\trealFile\n\t\t\t\t]);\n\t\t\t}\n\t\t\tthis.cache.set(file, result);\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tif (!EXPECTED_ERRORS.has(e.code)) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\t// no link\n\t\t\tconst result = parentResolved.slice();\n\t\t\tresult[0] = realFile;\n\t\t\tObject.freeze(result);\n\t\t\tthis.cache.set(file, result);\n\t\t\treturn result;\n\t\t}\n\t}\n}\nmodule.exports = LinkResolver;\n"]},"metadata":{},"sourceType":"script"}