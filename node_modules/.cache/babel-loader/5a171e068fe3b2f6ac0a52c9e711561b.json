{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst NullDependency = require(\"./NullDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n\nclass CreateScriptUrlDependency extends NullDependency {\n  /**\n   * @param {[number, number]} range range\n   */\n  constructor(range) {\n    super();\n    this.range = range;\n  }\n\n  get type() {\n    return \"create script url\";\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.range);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.range = read();\n    super.deserialize(context);\n  }\n\n}\n\nCreateScriptUrlDependency.Template = class CreateScriptUrlDependencyTemplate extends NullDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, _ref) {\n    let {\n      runtimeRequirements\n    } = _ref;\n    const dep =\n    /** @type {CreateScriptUrlDependency} */\n    dependency;\n    runtimeRequirements.add(RuntimeGlobals.createScriptUrl);\n    source.insert(dep.range[0], `${RuntimeGlobals.createScriptUrl}(`);\n    source.insert(dep.range[1], \")\");\n  }\n\n};\nmakeSerializable(CreateScriptUrlDependency, \"webpack/lib/dependencies/CreateScriptUrlDependency\");\nmodule.exports = CreateScriptUrlDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/CreateScriptUrlDependency.js"],"names":["RuntimeGlobals","require","makeSerializable","NullDependency","CreateScriptUrlDependency","constructor","range","type","serialize","context","write","deserialize","read","Template","CreateScriptUrlDependencyTemplate","apply","dependency","source","runtimeRequirements","dep","add","createScriptUrl","insert","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;AAEA;;AACA;;AACA;;;AAEA,MAAMG,yBAAN,SAAwCD,cAAxC,CAAuD;AACtD;AACD;AACA;AACCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB;AACA,SAAKA,KAAL,GAAaA,KAAb;AACA;;AAEO,MAAJC,IAAI,GAAG;AACV,WAAO,mBAAP;AACA;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAU;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,OAAlB;AACAC,IAAAA,KAAK,CAAC,KAAKJ,KAAN,CAAL;AACA,UAAME,SAAN,CAAgBC,OAAhB;AACA;;AAEDE,EAAAA,WAAW,CAACF,OAAD,EAAU;AACpB,UAAM;AAAEG,MAAAA;AAAF,QAAWH,OAAjB;AACA,SAAKH,KAAL,GAAaM,IAAI,EAAjB;AACA,UAAMD,WAAN,CAAkBF,OAAlB;AACA;;AAvBqD;;AA0BvDL,yBAAyB,CAACS,QAA1B,GAAqC,MAAMC,iCAAN,SACpCX,cAAc,CAACU,QADqB,CAEnC;AACD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,KAAK,CAACC,UAAD,EAAaC,MAAb,QAA8C;AAAA,QAAzB;AAAEC,MAAAA;AAAF,KAAyB;AAClD,UAAMC,GAAG;AAAG;AAA0CH,IAAAA,UAAtD;AAEAE,IAAAA,mBAAmB,CAACE,GAApB,CAAwBpB,cAAc,CAACqB,eAAvC;AAEAJ,IAAAA,MAAM,CAACK,MAAP,CAAcH,GAAG,CAACb,KAAJ,CAAU,CAAV,CAAd,EAA6B,GAAEN,cAAc,CAACqB,eAAgB,GAA9D;AACAJ,IAAAA,MAAM,CAACK,MAAP,CAAcH,GAAG,CAACb,KAAJ,CAAU,CAAV,CAAd,EAA4B,GAA5B;AACA;;AAdA,CAFF;AAmBAJ,gBAAgB,CACfE,yBADe,EAEf,oDAFe,CAAhB;AAKAmB,MAAM,CAACC,OAAP,GAAiBpB,yBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass CreateScriptUrlDependency extends NullDependency {\n\t/**\n\t * @param {[number, number]} range range\n\t */\n\tconstructor(range) {\n\t\tsuper();\n\t\tthis.range = range;\n\t}\n\n\tget type() {\n\t\treturn \"create script url\";\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.range);\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.range = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nCreateScriptUrlDependency.Template = class CreateScriptUrlDependencyTemplate extends (\n\tNullDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, { runtimeRequirements }) {\n\t\tconst dep = /** @type {CreateScriptUrlDependency} */ (dependency);\n\n\t\truntimeRequirements.add(RuntimeGlobals.createScriptUrl);\n\n\t\tsource.insert(dep.range[0], `${RuntimeGlobals.createScriptUrl}(`);\n\t\tsource.insert(dep.range[1], \")\");\n\t}\n};\n\nmakeSerializable(\n\tCreateScriptUrlDependency,\n\t\"webpack/lib/dependencies/CreateScriptUrlDependency\"\n);\n\nmodule.exports = CreateScriptUrlDependency;\n"]},"metadata":{},"sourceType":"script"}