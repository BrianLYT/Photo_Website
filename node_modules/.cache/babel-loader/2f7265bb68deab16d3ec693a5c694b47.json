{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass WarnDeprecatedOptionPlugin {\n  /**\n   * Create an instance of the plugin\n   * @param {string} option the target option\n   * @param {string | number} value the deprecated option value\n   * @param {string} suggestion the suggestion replacement\n   */\n  constructor(option, value, suggestion) {\n    this.option = option;\n    this.value = value;\n    this.suggestion = suggestion;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"WarnDeprecatedOptionPlugin\", compilation => {\n      compilation.warnings.push(new DeprecatedOptionWarning(this.option, this.value, this.suggestion));\n    });\n  }\n\n}\n\nclass DeprecatedOptionWarning extends WebpackError {\n  constructor(option, value, suggestion) {\n    super();\n    this.name = \"DeprecatedOptionWarning\";\n    this.message = \"configuration\\n\" + `The value '${value}' for option '${option}' is deprecated. ` + `Use '${suggestion}' instead.`;\n  }\n\n}\n\nmodule.exports = WarnDeprecatedOptionPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/WarnDeprecatedOptionPlugin.js"],"names":["WebpackError","require","WarnDeprecatedOptionPlugin","constructor","option","value","suggestion","apply","compiler","hooks","thisCompilation","tap","compilation","warnings","push","DeprecatedOptionWarning","name","message","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;AAEA;;;AAEA,MAAMC,0BAAN,CAAiC;AAChC;AACD;AACA;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,UAAhB,EAA4B;AACtC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,4BADD,EAECC,WAAW,IAAI;AACdA,MAAAA,WAAW,CAACC,QAAZ,CAAqBC,IAArB,CACC,IAAIC,uBAAJ,CAA4B,KAAKX,MAAjC,EAAyC,KAAKC,KAA9C,EAAqD,KAAKC,UAA1D,CADD;AAGA,KANF;AAQA;;AA3B+B;;AA8BjC,MAAMS,uBAAN,SAAsCf,YAAtC,CAAmD;AAClDG,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,UAAhB,EAA4B;AACtC;AAEA,SAAKU,IAAL,GAAY,yBAAZ;AACA,SAAKC,OAAL,GACC,oBACC,cAAaZ,KAAM,iBAAgBD,MAAO,mBAD3C,GAEC,QAAOE,UAAW,YAHpB;AAIA;;AATiD;;AAYnDY,MAAM,CAACC,OAAP,GAAiBjB,0BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass WarnDeprecatedOptionPlugin {\n\t/**\n\t * Create an instance of the plugin\n\t * @param {string} option the target option\n\t * @param {string | number} value the deprecated option value\n\t * @param {string} suggestion the suggestion replacement\n\t */\n\tconstructor(option, value, suggestion) {\n\t\tthis.option = option;\n\t\tthis.value = value;\n\t\tthis.suggestion = suggestion;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"WarnDeprecatedOptionPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.warnings.push(\n\t\t\t\t\tnew DeprecatedOptionWarning(this.option, this.value, this.suggestion)\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DeprecatedOptionWarning extends WebpackError {\n\tconstructor(option, value, suggestion) {\n\t\tsuper();\n\n\t\tthis.name = \"DeprecatedOptionWarning\";\n\t\tthis.message =\n\t\t\t\"configuration\\n\" +\n\t\t\t`The value '${value}' for option '${option}' is deprecated. ` +\n\t\t\t`Use '${suggestion}' instead.`;\n\t}\n}\n\nmodule.exports = WarnDeprecatedOptionPlugin;\n"]},"metadata":{},"sourceType":"script"}