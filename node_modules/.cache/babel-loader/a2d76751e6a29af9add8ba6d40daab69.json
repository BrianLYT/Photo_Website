{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\nconst InitFragment = require(\"../InitFragment\");\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst ModuleDependency = require(\"./ModuleDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/**\n * @param {string[]|null} path the property path array\n * @returns {string} the converted path\n */\n\n\nconst pathToString = path => path !== null && path.length > 0 ? path.map(part => `[${JSON.stringify(part)}]`).join(\"\") : \"\";\n\nclass ProvidedDependency extends ModuleDependency {\n  constructor(request, identifier, path, range) {\n    super(request);\n    this.identifier = identifier;\n    this.path = path;\n    this.range = range;\n    this._hashUpdate = undefined;\n  }\n\n  get type() {\n    return \"provided\";\n  }\n\n  get category() {\n    return \"esm\";\n  }\n  /**\n   * Update the hash\n   * @param {Hash} hash hash to be updated\n   * @param {UpdateHashContext} context context\n   * @returns {void}\n   */\n\n\n  updateHash(hash, context) {\n    if (this._hashUpdate === undefined) {\n      this._hashUpdate = this.identifier + (this.path ? this.path.join(\",\") : \"null\");\n    }\n\n    hash.update(this._hashUpdate);\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.identifier);\n    write(this.path);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.identifier = read();\n    this.path = read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(ProvidedDependency, \"webpack/lib/dependencies/ProvidedDependency\");\n\nclass ProvidedDependencyTemplate extends ModuleDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, _ref) {\n    let {\n      runtimeTemplate,\n      moduleGraph,\n      chunkGraph,\n      initFragments,\n      runtimeRequirements\n    } = _ref;\n    const dep =\n    /** @type {ProvidedDependency} */\n    dependency;\n    initFragments.push(new InitFragment(`/* provided dependency */ var ${dep.identifier} = ${runtimeTemplate.moduleExports({\n      module: moduleGraph.getModule(dep),\n      chunkGraph,\n      request: dep.request,\n      runtimeRequirements\n    })}${pathToString(dep.path)};\\n`, InitFragment.STAGE_PROVIDES, 1, `provided ${dep.identifier}`));\n    source.replace(dep.range[0], dep.range[1] - 1, dep.identifier);\n  }\n\n}\n\nProvidedDependency.Template = ProvidedDependencyTemplate;\nmodule.exports = ProvidedDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/ProvidedDependency.js"],"names":["InitFragment","require","makeSerializable","ModuleDependency","pathToString","path","length","map","part","JSON","stringify","join","ProvidedDependency","constructor","request","identifier","range","_hashUpdate","undefined","type","category","updateHash","hash","context","update","serialize","write","deserialize","read","ProvidedDependencyTemplate","Template","apply","dependency","source","runtimeTemplate","moduleGraph","chunkGraph","initFragments","runtimeRequirements","dep","push","moduleExports","module","getModule","STAGE_PROVIDES","replace","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\n\"use strict\";\n\nconst InitFragment = require(\"../InitFragment\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n/**\n * @param {string[]|null} path the property path array\n * @returns {string} the converted path\n */\nconst pathToString = path =>\n\tpath !== null && path.length > 0\n\t\t? path.map(part => `[${JSON.stringify(part)}]`).join(\"\")\n\t\t: \"\";\n\nclass ProvidedDependency extends ModuleDependency {\n\tconstructor(request, identifier, path, range) {\n\t\tsuper(request);\n\t\tthis.identifier = identifier;\n\t\tthis.path = path;\n\t\tthis.range = range;\n\t\tthis._hashUpdate = undefined;\n\t}\n\n\tget type() {\n\t\treturn \"provided\";\n\t}\n\n\tget category() {\n\t\treturn \"esm\";\n\t}\n\n\t/**\n\t * Update the hash\n\t * @param {Hash} hash hash to be updated\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tif (this._hashUpdate === undefined) {\n\t\t\tthis._hashUpdate =\n\t\t\t\tthis.identifier + (this.path ? this.path.join(\",\") : \"null\");\n\t\t}\n\t\thash.update(this._hashUpdate);\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.identifier);\n\t\twrite(this.path);\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.identifier = read();\n\t\tthis.path = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tProvidedDependency,\n\t\"webpack/lib/dependencies/ProvidedDependency\"\n);\n\nclass ProvidedDependencyTemplate extends ModuleDependency.Template {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(\n\t\tdependency,\n\t\tsource,\n\t\t{\n\t\t\truntimeTemplate,\n\t\t\tmoduleGraph,\n\t\t\tchunkGraph,\n\t\t\tinitFragments,\n\t\t\truntimeRequirements\n\t\t}\n\t) {\n\t\tconst dep = /** @type {ProvidedDependency} */ (dependency);\n\t\tinitFragments.push(\n\t\t\tnew InitFragment(\n\t\t\t\t`/* provided dependency */ var ${\n\t\t\t\t\tdep.identifier\n\t\t\t\t} = ${runtimeTemplate.moduleExports({\n\t\t\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\t\t\tchunkGraph,\n\t\t\t\t\trequest: dep.request,\n\t\t\t\t\truntimeRequirements\n\t\t\t\t})}${pathToString(dep.path)};\\n`,\n\t\t\t\tInitFragment.STAGE_PROVIDES,\n\t\t\t\t1,\n\t\t\t\t`provided ${dep.identifier}`\n\t\t\t)\n\t\t);\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, dep.identifier);\n\t}\n}\n\nProvidedDependency.Template = ProvidedDependencyTemplate;\n\nmodule.exports = ProvidedDependency;\n"]},"metadata":{},"sourceType":"script"}