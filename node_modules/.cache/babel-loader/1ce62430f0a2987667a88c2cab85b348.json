{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nclass MapObjectSerializer {\n  serialize(obj, _ref) {\n    let {\n      write\n    } = _ref;\n    write(obj.size);\n\n    for (const key of obj.keys()) {\n      write(key);\n    }\n\n    for (const value of obj.values()) {\n      write(value);\n    }\n  }\n\n  deserialize(_ref2) {\n    let {\n      read\n    } = _ref2;\n    let size = read();\n    const map = new Map();\n    const keys = [];\n\n    for (let i = 0; i < size; i++) {\n      keys.push(read());\n    }\n\n    for (let i = 0; i < size; i++) {\n      map.set(keys[i], read());\n    }\n\n    return map;\n  }\n\n}\n\nmodule.exports = MapObjectSerializer;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/serialization/MapObjectSerializer.js"],"names":["MapObjectSerializer","serialize","obj","write","size","key","keys","value","values","deserialize","read","map","Map","i","push","set","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,mBAAN,CAA0B;AACzBC,EAAAA,SAAS,CAACC,GAAD,QAAiB;AAAA,QAAX;AAAEC,MAAAA;AAAF,KAAW;AACzBA,IAAAA,KAAK,CAACD,GAAG,CAACE,IAAL,CAAL;;AACA,SAAK,MAAMC,GAAX,IAAkBH,GAAG,CAACI,IAAJ,EAAlB,EAA8B;AAC7BH,MAAAA,KAAK,CAACE,GAAD,CAAL;AACA;;AACD,SAAK,MAAME,KAAX,IAAoBL,GAAG,CAACM,MAAJ,EAApB,EAAkC;AACjCL,MAAAA,KAAK,CAACI,KAAD,CAAL;AACA;AACD;;AACDE,EAAAA,WAAW,QAAW;AAAA,QAAV;AAAEC,MAAAA;AAAF,KAAU;AACrB,QAAIN,IAAI,GAAGM,IAAI,EAAf;AACA,UAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACA,UAAMN,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAApB,EAA0BS,CAAC,EAA3B,EAA+B;AAC9BP,MAAAA,IAAI,CAACQ,IAAL,CAAUJ,IAAI,EAAd;AACA;;AACD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAApB,EAA0BS,CAAC,EAA3B,EAA+B;AAC9BF,MAAAA,GAAG,CAACI,GAAJ,CAAQT,IAAI,CAACO,CAAD,CAAZ,EAAiBH,IAAI,EAArB;AACA;;AACD,WAAOC,GAAP;AACA;;AArBwB;;AAwB1BK,MAAM,CAACC,OAAP,GAAiBjB,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nclass MapObjectSerializer {\n\tserialize(obj, { write }) {\n\t\twrite(obj.size);\n\t\tfor (const key of obj.keys()) {\n\t\t\twrite(key);\n\t\t}\n\t\tfor (const value of obj.values()) {\n\t\t\twrite(value);\n\t\t}\n\t}\n\tdeserialize({ read }) {\n\t\tlet size = read();\n\t\tconst map = new Map();\n\t\tconst keys = [];\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tkeys.push(read());\n\t\t}\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tmap.set(keys[i], read());\n\t\t}\n\t\treturn map;\n\t}\n}\n\nmodule.exports = MapObjectSerializer;\n"]},"metadata":{},"sourceType":"script"}