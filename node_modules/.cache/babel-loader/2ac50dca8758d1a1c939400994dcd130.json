{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<LibraryType>>} */\n\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n  let set = enabledTypes.get(compiler);\n\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n\n  return set;\n};\n\nclass EnableLibraryPlugin {\n  /**\n   * @param {LibraryType} type library type that should be available\n   */\n  constructor(type) {\n    this.type = type;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {LibraryType} type type of library\n   * @returns {void}\n   */\n\n\n  static setEnabled(compiler, type) {\n    getEnabledTypes(compiler).add(type);\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {LibraryType} type type of library\n   * @returns {void}\n   */\n\n\n  static checkEnabled(compiler, type) {\n    if (!getEnabledTypes(compiler).has(type)) {\n      throw new Error(`Library type \"${type}\" is not enabled. ` + \"EnableLibraryPlugin need to be used to enable this type of library. \" + 'This usually happens through the \"output.enabledLibraryTypes\" option. ' + 'If you are using a function as entry which sets \"library\", you need to add all potential library types to \"output.enabledLibraryTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n    }\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const {\n      type\n    } = this; // Only enable once\n\n    const enabled = getEnabledTypes(compiler);\n    if (enabled.has(type)) return;\n    enabled.add(type);\n\n    if (typeof type === \"string\") {\n      const enableExportProperty = () => {\n        const ExportPropertyTemplatePlugin = require(\"./ExportPropertyLibraryPlugin\");\n\n        new ExportPropertyTemplatePlugin({\n          type,\n          nsObjectUsed: type !== \"module\"\n        }).apply(compiler);\n      };\n\n      switch (type) {\n        case \"var\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [],\n              declare: \"var\",\n              unnamed: \"error\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"assign-properties\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [],\n              declare: false,\n              unnamed: \"error\",\n              named: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"assign\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [],\n              declare: false,\n              unnamed: \"error\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"this\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"this\"],\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"window\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"window\"],\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"self\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"self\"],\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"global\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: \"global\",\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"commonjs\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"exports\"],\n              declare: false,\n              unnamed: \"copy\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"commonjs-static\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"exports\"],\n              declare: false,\n              unnamed: \"static\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"commonjs2\":\n        case \"commonjs-module\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\n            new AssignLibraryPlugin({\n              type,\n              prefix: [\"module\", \"exports\"],\n              declare: false,\n              unnamed: \"assign\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"amd\":\n        case \"amd-require\":\n          {\n            enableExportProperty();\n\n            const AmdLibraryPlugin = require(\"./AmdLibraryPlugin\");\n\n            new AmdLibraryPlugin({\n              type,\n              requireAsWrapper: type === \"amd-require\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"umd\":\n        case \"umd2\":\n          {\n            enableExportProperty();\n\n            const UmdLibraryPlugin = require(\"./UmdLibraryPlugin\");\n\n            new UmdLibraryPlugin({\n              type,\n              optionalAmdExternalAsGlobal: type === \"umd2\"\n            }).apply(compiler);\n            break;\n          }\n\n        case \"system\":\n          {\n            enableExportProperty();\n\n            const SystemLibraryPlugin = require(\"./SystemLibraryPlugin\");\n\n            new SystemLibraryPlugin({\n              type\n            }).apply(compiler);\n            break;\n          }\n\n        case \"jsonp\":\n          {\n            enableExportProperty();\n\n            const JsonpLibraryPlugin = require(\"./JsonpLibraryPlugin\");\n\n            new JsonpLibraryPlugin({\n              type\n            }).apply(compiler);\n            break;\n          }\n\n        case \"module\":\n          {\n            enableExportProperty();\n\n            const ModuleLibraryPlugin = require(\"./ModuleLibraryPlugin\");\n\n            new ModuleLibraryPlugin({\n              type\n            }).apply(compiler);\n            break;\n          }\n\n        default:\n          throw new Error(`Unsupported library type ${type}.\nPlugins which provide custom library types must call EnableLibraryPlugin.setEnabled(compiler, type) to disable this error.`);\n      }\n    } else {// TODO support plugin instances here\n      // apply them to the compiler\n    }\n  }\n\n}\n\nmodule.exports = EnableLibraryPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/library/EnableLibraryPlugin.js"],"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableLibraryPlugin","constructor","type","setEnabled","add","checkEnabled","has","Error","Array","from","join","apply","enabled","enableExportProperty","ExportPropertyTemplatePlugin","require","nsObjectUsed","AssignLibraryPlugin","prefix","declare","unnamed","named","AmdLibraryPlugin","requireAsWrapper","UmdLibraryPlugin","optionalAmdExternalAsGlobal","SystemLibraryPlugin","JsonpLibraryPlugin","ModuleLibraryPlugin","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<LibraryType>>} */\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n\tlet set = enabledTypes.get(compiler);\n\tif (set === undefined) {\n\t\tset = new Set();\n\t\tenabledTypes.set(compiler, set);\n\t}\n\treturn set;\n};\n\nclass EnableLibraryPlugin {\n\t/**\n\t * @param {LibraryType} type library type that should be available\n\t */\n\tconstructor(type) {\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {LibraryType} type type of library\n\t * @returns {void}\n\t */\n\tstatic setEnabled(compiler, type) {\n\t\tgetEnabledTypes(compiler).add(type);\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {LibraryType} type type of library\n\t * @returns {void}\n\t */\n\tstatic checkEnabled(compiler, type) {\n\t\tif (!getEnabledTypes(compiler).has(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Library type \"${type}\" is not enabled. ` +\n\t\t\t\t\t\"EnableLibraryPlugin need to be used to enable this type of library. \" +\n\t\t\t\t\t'This usually happens through the \"output.enabledLibraryTypes\" option. ' +\n\t\t\t\t\t'If you are using a function as entry which sets \"library\", you need to add all potential library types to \"output.enabledLibraryTypes\". ' +\n\t\t\t\t\t\"These types are enabled: \" +\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { type } = this;\n\n\t\t// Only enable once\n\t\tconst enabled = getEnabledTypes(compiler);\n\t\tif (enabled.has(type)) return;\n\t\tenabled.add(type);\n\n\t\tif (typeof type === \"string\") {\n\t\t\tconst enableExportProperty = () => {\n\t\t\t\tconst ExportPropertyTemplatePlugin = require(\"./ExportPropertyLibraryPlugin\");\n\t\t\t\tnew ExportPropertyTemplatePlugin({\n\t\t\t\t\ttype,\n\t\t\t\t\tnsObjectUsed: type !== \"module\"\n\t\t\t\t}).apply(compiler);\n\t\t\t};\n\t\t\tswitch (type) {\n\t\t\t\tcase \"var\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [],\n\t\t\t\t\t\tdeclare: \"var\",\n\t\t\t\t\t\tunnamed: \"error\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"assign-properties\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"error\",\n\t\t\t\t\t\tnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"assign\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"error\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"this\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"this\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"window\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"window\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"self\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"self\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"global\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: \"global\",\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"commonjs\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"exports\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"copy\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"commonjs-static\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"exports\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"static\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"commonjs2\":\n\t\t\t\tcase \"commonjs-module\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst AssignLibraryPlugin = require(\"./AssignLibraryPlugin\");\n\t\t\t\t\tnew AssignLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tprefix: [\"module\", \"exports\"],\n\t\t\t\t\t\tdeclare: false,\n\t\t\t\t\t\tunnamed: \"assign\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"amd\":\n\t\t\t\tcase \"amd-require\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst AmdLibraryPlugin = require(\"./AmdLibraryPlugin\");\n\t\t\t\t\tnew AmdLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\trequireAsWrapper: type === \"amd-require\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"umd\":\n\t\t\t\tcase \"umd2\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst UmdLibraryPlugin = require(\"./UmdLibraryPlugin\");\n\t\t\t\t\tnew UmdLibraryPlugin({\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\toptionalAmdExternalAsGlobal: type === \"umd2\"\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"system\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst SystemLibraryPlugin = require(\"./SystemLibraryPlugin\");\n\t\t\t\t\tnew SystemLibraryPlugin({\n\t\t\t\t\t\ttype\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"jsonp\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst JsonpLibraryPlugin = require(\"./JsonpLibraryPlugin\");\n\t\t\t\t\tnew JsonpLibraryPlugin({\n\t\t\t\t\t\ttype\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"module\": {\n\t\t\t\t\tenableExportProperty();\n\t\t\t\t\tconst ModuleLibraryPlugin = require(\"./ModuleLibraryPlugin\");\n\t\t\t\t\tnew ModuleLibraryPlugin({\n\t\t\t\t\t\ttype\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported library type ${type}.\nPlugins which provide custom library types must call EnableLibraryPlugin.setEnabled(compiler, type) to disable this error.`);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO support plugin instances here\n\t\t\t// apply them to the compiler\n\t\t}\n\t}\n}\n\nmodule.exports = EnableLibraryPlugin;\n"]},"metadata":{},"sourceType":"script"}