{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createMappingsSerializer = require(\"./createMappingsSerializer\");\n\nconst streamChunks = require(\"./streamChunks\");\n\nconst streamAndGetSourceAndMap = (inputSource, options, onChunk, onSource, onName) => {\n  let code = \"\";\n  let mappings = \"\";\n  let sources = [];\n  let sourcesContent = [];\n  let names = [];\n  const addMapping = createMappingsSerializer(Object.assign({}, options, {\n    columns: true\n  }));\n  const finalSource = !!(options && options.finalSource);\n  const {\n    generatedLine,\n    generatedColumn,\n    source\n  } = streamChunks(inputSource, options, (chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) => {\n    if (chunk !== undefined) code += chunk;\n    mappings += addMapping(generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex);\n    return onChunk(finalSource ? undefined : chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex);\n  }, (sourceIndex, source, sourceContent) => {\n    while (sources.length < sourceIndex) {\n      sources.push(null);\n    }\n\n    sources[sourceIndex] = source;\n\n    if (sourceContent !== undefined) {\n      while (sourcesContent.length < sourceIndex) {\n        sourcesContent.push(null);\n      }\n\n      sourcesContent[sourceIndex] = sourceContent;\n    }\n\n    return onSource(sourceIndex, source, sourceContent);\n  }, (nameIndex, name) => {\n    while (names.length < nameIndex) {\n      names.push(null);\n    }\n\n    names[nameIndex] = name;\n    return onName(nameIndex, name);\n  });\n  const resultSource = source !== undefined ? source : code;\n  return {\n    result: {\n      generatedLine,\n      generatedColumn,\n      source: finalSource ? resultSource : undefined\n    },\n    source: resultSource,\n    map: mappings.length > 0 ? {\n      version: 3,\n      file: \"x\",\n      mappings,\n      sources,\n      sourcesContent: sourcesContent.length > 0 ? sourcesContent : undefined,\n      names\n    } : null\n  };\n};\n\nmodule.exports = streamAndGetSourceAndMap;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack-sources/lib/helpers/streamAndGetSourceAndMap.js"],"names":["createMappingsSerializer","require","streamChunks","streamAndGetSourceAndMap","inputSource","options","onChunk","onSource","onName","code","mappings","sources","sourcesContent","names","addMapping","Object","assign","columns","finalSource","generatedLine","generatedColumn","source","chunk","sourceIndex","originalLine","originalColumn","nameIndex","undefined","sourceContent","length","push","name","resultSource","result","map","version","file","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,wBAAwB,GAAGC,OAAO,CAAC,4BAAD,CAAxC;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B;;AAEA,MAAME,wBAAwB,GAAG,CAChCC,WADgC,EAEhCC,OAFgC,EAGhCC,OAHgC,EAIhCC,QAJgC,EAKhCC,MALgC,KAM5B;AACJ,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,QAAMC,UAAU,GAAGd,wBAAwB,CAC1Ce,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,OAAlB,EAA2B;AAAEY,IAAAA,OAAO,EAAE;AAAX,GAA3B,CAD0C,CAA3C;AAGA,QAAMC,WAAW,GAAG,CAAC,EAAEb,OAAO,IAAIA,OAAO,CAACa,WAArB,CAArB;AACA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,eAAjB;AAAkCC,IAAAA;AAAlC,MAA6CnB,YAAY,CAC9DE,WAD8D,EAE9DC,OAF8D,EAG9D,CACCiB,KADD,EAECH,aAFD,EAGCC,eAHD,EAICG,WAJD,EAKCC,YALD,EAMCC,cAND,EAOCC,SAPD,KAQK;AACJ,QAAIJ,KAAK,KAAKK,SAAd,EAAyBlB,IAAI,IAAIa,KAAR;AACzBZ,IAAAA,QAAQ,IAAII,UAAU,CACrBK,aADqB,EAErBC,eAFqB,EAGrBG,WAHqB,EAIrBC,YAJqB,EAKrBC,cALqB,EAMrBC,SANqB,CAAtB;AAQA,WAAOpB,OAAO,CACbY,WAAW,GAAGS,SAAH,GAAeL,KADb,EAEbH,aAFa,EAGbC,eAHa,EAIbG,WAJa,EAKbC,YALa,EAMbC,cANa,EAObC,SAPa,CAAd;AASA,GA9B6D,EA+B9D,CAACH,WAAD,EAAcF,MAAd,EAAsBO,aAAtB,KAAwC;AACvC,WAAOjB,OAAO,CAACkB,MAAR,GAAiBN,WAAxB,EAAqC;AACpCZ,MAAAA,OAAO,CAACmB,IAAR,CAAa,IAAb;AACA;;AACDnB,IAAAA,OAAO,CAACY,WAAD,CAAP,GAAuBF,MAAvB;;AACA,QAAIO,aAAa,KAAKD,SAAtB,EAAiC;AAChC,aAAOf,cAAc,CAACiB,MAAf,GAAwBN,WAA/B,EAA4C;AAC3CX,QAAAA,cAAc,CAACkB,IAAf,CAAoB,IAApB;AACA;;AACDlB,MAAAA,cAAc,CAACW,WAAD,CAAd,GAA8BK,aAA9B;AACA;;AACD,WAAOrB,QAAQ,CAACgB,WAAD,EAAcF,MAAd,EAAsBO,aAAtB,CAAf;AACA,GA3C6D,EA4C9D,CAACF,SAAD,EAAYK,IAAZ,KAAqB;AACpB,WAAOlB,KAAK,CAACgB,MAAN,GAAeH,SAAtB,EAAiC;AAChCb,MAAAA,KAAK,CAACiB,IAAN,CAAW,IAAX;AACA;;AACDjB,IAAAA,KAAK,CAACa,SAAD,CAAL,GAAmBK,IAAnB;AACA,WAAOvB,MAAM,CAACkB,SAAD,EAAYK,IAAZ,CAAb;AACA,GAlD6D,CAA/D;AAoDA,QAAMC,YAAY,GAAGX,MAAM,KAAKM,SAAX,GAAuBN,MAAvB,GAAgCZ,IAArD;AACA,SAAO;AACNwB,IAAAA,MAAM,EAAE;AACPd,MAAAA,aADO;AAEPC,MAAAA,eAFO;AAGPC,MAAAA,MAAM,EAAEH,WAAW,GAAGc,YAAH,GAAkBL;AAH9B,KADF;AAMNN,IAAAA,MAAM,EAAEW,YANF;AAONE,IAAAA,GAAG,EACFxB,QAAQ,CAACmB,MAAT,GAAkB,CAAlB,GACG;AACAM,MAAAA,OAAO,EAAE,CADT;AAEAC,MAAAA,IAAI,EAAE,GAFN;AAGA1B,MAAAA,QAHA;AAIAC,MAAAA,OAJA;AAKAC,MAAAA,cAAc,EACbA,cAAc,CAACiB,MAAf,GAAwB,CAAxB,GAA4BjB,cAA5B,GAA6Ce,SAN9C;AAOAd,MAAAA;AAPA,KADH,GAUG;AAlBE,GAAP;AAoBA,CAzFD;;AA2FAwB,MAAM,CAACC,OAAP,GAAiBnC,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst createMappingsSerializer = require(\"./createMappingsSerializer\");\nconst streamChunks = require(\"./streamChunks\");\n\nconst streamAndGetSourceAndMap = (\n\tinputSource,\n\toptions,\n\tonChunk,\n\tonSource,\n\tonName\n) => {\n\tlet code = \"\";\n\tlet mappings = \"\";\n\tlet sources = [];\n\tlet sourcesContent = [];\n\tlet names = [];\n\tconst addMapping = createMappingsSerializer(\n\t\tObject.assign({}, options, { columns: true })\n\t);\n\tconst finalSource = !!(options && options.finalSource);\n\tconst { generatedLine, generatedColumn, source } = streamChunks(\n\t\tinputSource,\n\t\toptions,\n\t\t(\n\t\t\tchunk,\n\t\t\tgeneratedLine,\n\t\t\tgeneratedColumn,\n\t\t\tsourceIndex,\n\t\t\toriginalLine,\n\t\t\toriginalColumn,\n\t\t\tnameIndex\n\t\t) => {\n\t\t\tif (chunk !== undefined) code += chunk;\n\t\t\tmappings += addMapping(\n\t\t\t\tgeneratedLine,\n\t\t\t\tgeneratedColumn,\n\t\t\t\tsourceIndex,\n\t\t\t\toriginalLine,\n\t\t\t\toriginalColumn,\n\t\t\t\tnameIndex\n\t\t\t);\n\t\t\treturn onChunk(\n\t\t\t\tfinalSource ? undefined : chunk,\n\t\t\t\tgeneratedLine,\n\t\t\t\tgeneratedColumn,\n\t\t\t\tsourceIndex,\n\t\t\t\toriginalLine,\n\t\t\t\toriginalColumn,\n\t\t\t\tnameIndex\n\t\t\t);\n\t\t},\n\t\t(sourceIndex, source, sourceContent) => {\n\t\t\twhile (sources.length < sourceIndex) {\n\t\t\t\tsources.push(null);\n\t\t\t}\n\t\t\tsources[sourceIndex] = source;\n\t\t\tif (sourceContent !== undefined) {\n\t\t\t\twhile (sourcesContent.length < sourceIndex) {\n\t\t\t\t\tsourcesContent.push(null);\n\t\t\t\t}\n\t\t\t\tsourcesContent[sourceIndex] = sourceContent;\n\t\t\t}\n\t\t\treturn onSource(sourceIndex, source, sourceContent);\n\t\t},\n\t\t(nameIndex, name) => {\n\t\t\twhile (names.length < nameIndex) {\n\t\t\t\tnames.push(null);\n\t\t\t}\n\t\t\tnames[nameIndex] = name;\n\t\t\treturn onName(nameIndex, name);\n\t\t}\n\t);\n\tconst resultSource = source !== undefined ? source : code;\n\treturn {\n\t\tresult: {\n\t\t\tgeneratedLine,\n\t\t\tgeneratedColumn,\n\t\t\tsource: finalSource ? resultSource : undefined\n\t\t},\n\t\tsource: resultSource,\n\t\tmap:\n\t\t\tmappings.length > 0\n\t\t\t\t? {\n\t\t\t\t\t\tversion: 3,\n\t\t\t\t\t\tfile: \"x\",\n\t\t\t\t\t\tmappings,\n\t\t\t\t\t\tsources,\n\t\t\t\t\t\tsourcesContent:\n\t\t\t\t\t\t\tsourcesContent.length > 0 ? sourcesContent : undefined,\n\t\t\t\t\t\tnames\n\t\t\t\t  }\n\t\t\t\t: null\n\t};\n};\n\nmodule.exports = streamAndGetSourceAndMap;\n"]},"metadata":{},"sourceType":"script"}