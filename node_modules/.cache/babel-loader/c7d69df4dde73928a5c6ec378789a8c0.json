{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  compareChunksNatural\n} = require(\"../util/comparators\");\n\nconst {\n  getShortChunkName,\n  getLongChunkName,\n  assignNames,\n  getUsedChunkIds,\n  assignAscendingChunkIds\n} = require(\"./IdHelpers\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nclass NamedChunkIdsPlugin {\n  constructor(options) {\n    this.delimiter = options && options.delimiter || \"-\";\n    this.context = options && options.context;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"NamedChunkIdsPlugin\", compilation => {\n      const {\n        hashFunction\n      } = compilation.outputOptions;\n      compilation.hooks.chunkIds.tap(\"NamedChunkIdsPlugin\", chunks => {\n        const chunkGraph = compilation.chunkGraph;\n        const context = this.context ? this.context : compiler.context;\n        const delimiter = this.delimiter;\n        const unnamedChunks = assignNames(Array.from(chunks).filter(chunk => {\n          if (chunk.name) {\n            chunk.id = chunk.name;\n            chunk.ids = [chunk.name];\n          }\n\n          return chunk.id === null;\n        }), chunk => getShortChunkName(chunk, chunkGraph, context, delimiter, hashFunction, compiler.root), chunk => getLongChunkName(chunk, chunkGraph, context, delimiter, hashFunction, compiler.root), compareChunksNatural(chunkGraph), getUsedChunkIds(compilation), (chunk, name) => {\n          chunk.id = name;\n          chunk.ids = [name];\n        });\n\n        if (unnamedChunks.length > 0) {\n          assignAscendingChunkIds(unnamedChunks, compilation);\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = NamedChunkIdsPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ids/NamedChunkIdsPlugin.js"],"names":["compareChunksNatural","require","getShortChunkName","getLongChunkName","assignNames","getUsedChunkIds","assignAscendingChunkIds","NamedChunkIdsPlugin","constructor","options","delimiter","context","apply","compiler","hooks","compilation","tap","hashFunction","outputOptions","chunkIds","chunks","chunkGraph","unnamedChunks","Array","from","filter","chunk","name","id","ids","root","length","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,qBAAD,CAAxC;;AACA,MAAM;AACLC,EAAAA,iBADK;AAELC,EAAAA,gBAFK;AAGLC,EAAAA,WAHK;AAILC,EAAAA,eAJK;AAKLC,EAAAA;AALK,IAMFL,OAAO,CAAC,aAAD,CANX;AAQA;;AACA;;AACA;;;AAEA,MAAMM,mBAAN,CAA0B;AACzBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,SAAKC,SAAL,GAAkBD,OAAO,IAAIA,OAAO,CAACC,SAApB,IAAkC,GAAnD;AACA,SAAKC,OAAL,GAAeF,OAAO,IAAIA,OAAO,CAACE,OAAlC;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,qBAA/B,EAAsDD,WAAW,IAAI;AACpE,YAAM;AAAEE,QAAAA;AAAF,UAAmBF,WAAW,CAACG,aAArC;AACAH,MAAAA,WAAW,CAACD,KAAZ,CAAkBK,QAAlB,CAA2BH,GAA3B,CAA+B,qBAA/B,EAAsDI,MAAM,IAAI;AAC/D,cAAMC,UAAU,GAAGN,WAAW,CAACM,UAA/B;AACA,cAAMV,OAAO,GAAG,KAAKA,OAAL,GAAe,KAAKA,OAApB,GAA8BE,QAAQ,CAACF,OAAvD;AACA,cAAMD,SAAS,GAAG,KAAKA,SAAvB;AAEA,cAAMY,aAAa,GAAGlB,WAAW,CAChCmB,KAAK,CAACC,IAAN,CAAWJ,MAAX,EAAmBK,MAAnB,CAA0BC,KAAK,IAAI;AAClC,cAAIA,KAAK,CAACC,IAAV,EAAgB;AACfD,YAAAA,KAAK,CAACE,EAAN,GAAWF,KAAK,CAACC,IAAjB;AACAD,YAAAA,KAAK,CAACG,GAAN,GAAY,CAACH,KAAK,CAACC,IAAP,CAAZ;AACA;;AACD,iBAAOD,KAAK,CAACE,EAAN,KAAa,IAApB;AACA,SAND,CADgC,EAQhCF,KAAK,IACJxB,iBAAiB,CAChBwB,KADgB,EAEhBL,UAFgB,EAGhBV,OAHgB,EAIhBD,SAJgB,EAKhBO,YALgB,EAMhBJ,QAAQ,CAACiB,IANO,CATc,EAiBhCJ,KAAK,IACJvB,gBAAgB,CACfuB,KADe,EAEfL,UAFe,EAGfV,OAHe,EAIfD,SAJe,EAKfO,YALe,EAMfJ,QAAQ,CAACiB,IANM,CAlBe,EA0BhC9B,oBAAoB,CAACqB,UAAD,CA1BY,EA2BhChB,eAAe,CAACU,WAAD,CA3BiB,EA4BhC,CAACW,KAAD,EAAQC,IAAR,KAAiB;AAChBD,UAAAA,KAAK,CAACE,EAAN,GAAWD,IAAX;AACAD,UAAAA,KAAK,CAACG,GAAN,GAAY,CAACF,IAAD,CAAZ;AACA,SA/B+B,CAAjC;;AAiCA,YAAIL,aAAa,CAACS,MAAd,GAAuB,CAA3B,EAA8B;AAC7BzB,UAAAA,uBAAuB,CAACgB,aAAD,EAAgBP,WAAhB,CAAvB;AACA;AACD,OAzCD;AA0CA,KA5CD;AA6CA;;AAzDwB;;AA4D1BiB,MAAM,CAACC,OAAP,GAAiB1B,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { compareChunksNatural } = require(\"../util/comparators\");\nconst {\n\tgetShortChunkName,\n\tgetLongChunkName,\n\tassignNames,\n\tgetUsedChunkIds,\n\tassignAscendingChunkIds\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass NamedChunkIdsPlugin {\n\tconstructor(options) {\n\t\tthis.delimiter = (options && options.delimiter) || \"-\";\n\t\tthis.context = options && options.context;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"NamedChunkIdsPlugin\", compilation => {\n\t\t\tconst { hashFunction } = compilation.outputOptions;\n\t\t\tcompilation.hooks.chunkIds.tap(\"NamedChunkIdsPlugin\", chunks => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\tconst context = this.context ? this.context : compiler.context;\n\t\t\t\tconst delimiter = this.delimiter;\n\n\t\t\t\tconst unnamedChunks = assignNames(\n\t\t\t\t\tArray.from(chunks).filter(chunk => {\n\t\t\t\t\t\tif (chunk.name) {\n\t\t\t\t\t\t\tchunk.id = chunk.name;\n\t\t\t\t\t\t\tchunk.ids = [chunk.name];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn chunk.id === null;\n\t\t\t\t\t}),\n\t\t\t\t\tchunk =>\n\t\t\t\t\t\tgetShortChunkName(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tdelimiter,\n\t\t\t\t\t\t\thashFunction,\n\t\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t\t),\n\t\t\t\t\tchunk =>\n\t\t\t\t\t\tgetLongChunkName(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tdelimiter,\n\t\t\t\t\t\t\thashFunction,\n\t\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t\t),\n\t\t\t\t\tcompareChunksNatural(chunkGraph),\n\t\t\t\t\tgetUsedChunkIds(compilation),\n\t\t\t\t\t(chunk, name) => {\n\t\t\t\t\t\tchunk.id = name;\n\t\t\t\t\t\tchunk.ids = [name];\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tif (unnamedChunks.length > 0) {\n\t\t\t\t\tassignAscendingChunkIds(unnamedChunks, compilation);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = NamedChunkIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}