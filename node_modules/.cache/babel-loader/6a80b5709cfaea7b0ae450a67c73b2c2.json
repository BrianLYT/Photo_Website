{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = require('stream');\n\n  _stream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _worker_threads() {\n  const data = require('worker_threads');\n\n  _worker_threads = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== 'object' && typeof obj !== 'function') {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass ExperimentalWorker {\n  constructor(options) {\n    _defineProperty(this, '_worker', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_onCustomMessage', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_exitPromise', void 0);\n\n    _defineProperty(this, '_resolveExitPromise', void 0);\n\n    _defineProperty(this, '_forceExited', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._fakeStream = null;\n    this._stdout = null;\n    this._stderr = null;\n    this._exitPromise = new Promise(resolve => {\n      this._resolveExitPromise = resolve;\n    });\n    this._forceExited = false;\n    this.initialize();\n  }\n\n  initialize() {\n    this._worker = new (_worker_threads().Worker)(path().resolve(__dirname, './threadChild.js'), {\n      eval: false,\n      // @ts-expect-error: added in newer versions\n      resourceLimits: this._options.resourceLimits,\n      stderr: true,\n      stdout: true,\n      workerData: this._options.workerData,\n      ...this._options.forkOptions\n    });\n\n    if (this._worker.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(this._worker.stdout);\n    }\n\n    if (this._worker.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(this._worker.stderr);\n    }\n\n    this._worker.on('message', this._onMessage.bind(this));\n\n    this._worker.on('exit', this._onExit.bind(this));\n\n    this._worker.postMessage([_types.CHILD_MESSAGE_INITIALIZE, false, this._options.workerPath, this._options.setupArgs, String(this._options.workerId + 1) // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n    ]);\n\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error('Call retries were exceeded');\n\n      this._onMessage([_types.PARENT_MESSAGE_CLIENT_ERROR, error.name, error.message, error.stack, {\n        type: 'WorkerError'\n      }]);\n    }\n  }\n\n  _shutdown() {\n    // End the permanent stream so the merged stream end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n\n    this._resolveExitPromise();\n  }\n\n  _onMessage(response) {\n    let error;\n\n    switch (response[0]) {\n      case _types.PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types.PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-expect-error: no index\n\n          const NativeCtor = global[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            // @ts-expect-error: no index\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types.PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]); // @ts-expect-error: adding custom properties to errors.\n\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types.PARENT_MESSAGE_CUSTOM:\n        this._onCustomMessage(response[1]);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  _onExit(exitCode) {\n    if (exitCode !== 0 && !this._forceExited) {\n      this.initialize();\n\n      if (this._request) {\n        this._worker.postMessage(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  waitForExit() {\n    return this._exitPromise;\n  }\n\n  forceExit() {\n    this._forceExited = true;\n\n    this._worker.terminate();\n  }\n\n  send(request, onProcessStart, onProcessEnd, onCustomMessage) {\n    var _this = this;\n\n    onProcessStart(this);\n\n    this._onProcessEnd = function () {\n      var _onProcessEnd; // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n\n\n      _this._request = null;\n      const res = (_onProcessEnd = onProcessEnd) === null || _onProcessEnd === void 0 ? void 0 : _onProcessEnd(...arguments); // Clean up the reference so related closures can be garbage collected.\n\n      onProcessEnd = null;\n      return res;\n    };\n\n    this._onCustomMessage = function () {\n      return onCustomMessage(...arguments);\n    };\n\n    this._request = request;\n    this._retries = 0;\n\n    this._worker.postMessage(request);\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream().PassThrough)();\n    }\n\n    return this._fakeStream;\n  }\n\n}\n\nexports.default = ExperimentalWorker;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/jest-worker/build/workers/NodeThreadsWorker.js"],"names":["Object","defineProperty","exports","value","default","path","data","_interopRequireWildcard","require","_stream","_worker_threads","_mergeStream","_interopRequireDefault","_types","obj","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_defineProperty","enumerable","configurable","writable","ExperimentalWorker","constructor","options","_options","_request","_fakeStream","_stdout","_stderr","_exitPromise","Promise","resolve","_resolveExitPromise","_forceExited","initialize","_worker","Worker","__dirname","eval","resourceLimits","stderr","stdout","workerData","forkOptions","_getFakeStream","add","on","_onMessage","bind","_onExit","postMessage","CHILD_MESSAGE_INITIALIZE","workerPath","setupArgs","String","workerId","_retries","maxRetries","error","Error","PARENT_MESSAGE_CLIENT_ERROR","name","message","stack","type","_shutdown","end","response","PARENT_MESSAGE_OK","_onProcessEnd","extra","NativeCtor","global","Ctor","PARENT_MESSAGE_SETUP_ERROR","PARENT_MESSAGE_CUSTOM","_onCustomMessage","TypeError","exitCode","waitForExit","forceExit","terminate","send","request","onProcessStart","onProcessEnd","onCustomMessage","res","getWorkerId","getStdout","getStderr","PassThrough"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction path() {\n  const data = _interopRequireWildcard(require('path'));\n\n  path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = require('stream');\n\n  _stream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _worker_threads() {\n  const data = require('worker_threads');\n\n  _worker_threads = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass ExperimentalWorker {\n  constructor(options) {\n    _defineProperty(this, '_worker', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_onCustomMessage', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_exitPromise', void 0);\n\n    _defineProperty(this, '_resolveExitPromise', void 0);\n\n    _defineProperty(this, '_forceExited', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._fakeStream = null;\n    this._stdout = null;\n    this._stderr = null;\n    this._exitPromise = new Promise(resolve => {\n      this._resolveExitPromise = resolve;\n    });\n    this._forceExited = false;\n    this.initialize();\n  }\n\n  initialize() {\n    this._worker = new (_worker_threads().Worker)(\n      path().resolve(__dirname, './threadChild.js'),\n      {\n        eval: false,\n        // @ts-expect-error: added in newer versions\n        resourceLimits: this._options.resourceLimits,\n        stderr: true,\n        stdout: true,\n        workerData: this._options.workerData,\n        ...this._options.forkOptions\n      }\n    );\n\n    if (this._worker.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(this._worker.stdout);\n    }\n\n    if (this._worker.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(this._worker.stderr);\n    }\n\n    this._worker.on('message', this._onMessage.bind(this));\n\n    this._worker.on('exit', this._onExit.bind(this));\n\n    this._worker.postMessage([\n      _types.CHILD_MESSAGE_INITIALIZE,\n      false,\n      this._options.workerPath,\n      this._options.setupArgs,\n      String(this._options.workerId + 1) // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n    ]);\n\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error('Call retries were exceeded');\n\n      this._onMessage([\n        _types.PARENT_MESSAGE_CLIENT_ERROR,\n        error.name,\n        error.message,\n        error.stack,\n        {\n          type: 'WorkerError'\n        }\n      ]);\n    }\n  }\n\n  _shutdown() {\n    // End the permanent stream so the merged stream end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n\n    this._resolveExitPromise();\n  }\n\n  _onMessage(response) {\n    let error;\n\n    switch (response[0]) {\n      case _types.PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types.PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-expect-error: no index\n\n          const NativeCtor = global[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            // @ts-expect-error: no index\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types.PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]); // @ts-expect-error: adding custom properties to errors.\n\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types.PARENT_MESSAGE_CUSTOM:\n        this._onCustomMessage(response[1]);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  _onExit(exitCode) {\n    if (exitCode !== 0 && !this._forceExited) {\n      this.initialize();\n\n      if (this._request) {\n        this._worker.postMessage(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  waitForExit() {\n    return this._exitPromise;\n  }\n\n  forceExit() {\n    this._forceExited = true;\n\n    this._worker.terminate();\n  }\n\n  send(request, onProcessStart, onProcessEnd, onCustomMessage) {\n    onProcessStart(this);\n\n    this._onProcessEnd = (...args) => {\n      var _onProcessEnd;\n\n      // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n      this._request = null;\n      const res =\n        (_onProcessEnd = onProcessEnd) === null || _onProcessEnd === void 0\n          ? void 0\n          : _onProcessEnd(...args); // Clean up the reference so related closures can be garbage collected.\n\n      onProcessEnd = null;\n      return res;\n    };\n\n    this._onCustomMessage = (...arg) => onCustomMessage(...arg);\n\n    this._request = request;\n    this._retries = 0;\n\n    this._worker.postMessage(request);\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream().PassThrough)();\n    }\n\n    return this._fakeStream;\n  }\n}\n\nexports.default = ExperimentalWorker;\n"]},"metadata":{},"sourceType":"script"}