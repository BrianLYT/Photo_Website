{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"http\").ServerOptions} HttpServerOptions */\n\n/** @typedef {import(\"https\").ServerOptions} HttpsServerOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LazyCompilationDefaultBackendOptions} LazyCompilationDefaultBackendOptions */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/**\n * @callback BackendHandler\n * @param {Compiler} compiler compiler\n * @param {function((Error | null)=, any=): void} callback callback\n * @returns {void}\n */\n\n/**\n * @param {Omit<LazyCompilationDefaultBackendOptions, \"client\"> & { client: NonNullable<LazyCompilationDefaultBackendOptions[\"client\"]>}} options additional options for the backend\n * @returns {BackendHandler} backend\n */\n\nmodule.exports = options => (compiler, callback) => {\n  const logger = compiler.getInfrastructureLogger(\"LazyCompilationBackend\");\n  const activeModules = new Map();\n  const prefix = \"/lazy-compilation-using-\";\n  const isHttps = options.protocol === \"https\" || typeof options.server === \"object\" && (\"key\" in options.server || \"pfx\" in options.server);\n  const createServer = typeof options.server === \"function\" ? options.server : (() => {\n    const http = isHttps ? require(\"https\") : require(\"http\");\n    return http.createServer.bind(http, options.server);\n  })();\n  const listen = typeof options.listen === \"function\" ? options.listen : server => {\n    let listen = options.listen;\n    if (typeof listen === \"object\" && !(\"port\" in listen)) listen = { ...listen,\n      port: undefined\n    };\n    server.listen(listen);\n  };\n  const protocol = options.protocol || (isHttps ? \"https\" : \"http\");\n\n  const requestListener = (req, res) => {\n    const keys = req.url.slice(prefix.length).split(\"@\");\n    req.socket.on(\"close\", () => {\n      setTimeout(() => {\n        for (const key of keys) {\n          const oldValue = activeModules.get(key) || 0;\n          activeModules.set(key, oldValue - 1);\n\n          if (oldValue === 1) {\n            logger.log(`${key} is no longer in use. Next compilation will skip this module.`);\n          }\n        }\n      }, 120000);\n    });\n    req.socket.setNoDelay(true);\n    res.writeHead(200, {\n      \"content-type\": \"text/event-stream\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    });\n    res.write(\"\\n\");\n    let moduleActivated = false;\n\n    for (const key of keys) {\n      const oldValue = activeModules.get(key) || 0;\n      activeModules.set(key, oldValue + 1);\n\n      if (oldValue === 0) {\n        logger.log(`${key} is now in use and will be compiled.`);\n        moduleActivated = true;\n      }\n    }\n\n    if (moduleActivated && compiler.watching) compiler.watching.invalidate();\n  };\n\n  const server =\n  /** @type {import(\"net\").Server} */\n  createServer();\n  server.on(\"request\", requestListener);\n  let isClosing = false;\n  /** @type {Set<import(\"net\").Socket>} */\n\n  const sockets = new Set();\n  server.on(\"connection\", socket => {\n    sockets.add(socket);\n    socket.on(\"close\", () => {\n      sockets.delete(socket);\n    });\n    if (isClosing) socket.destroy();\n  });\n  server.on(\"clientError\", e => {\n    if (e.message !== \"Server is disposing\") logger.warn(e);\n  });\n  server.on(\"listening\", err => {\n    if (err) return callback(err);\n    const addr = server.address();\n    if (typeof addr === \"string\") throw new Error(\"addr must not be a string\");\n    const urlBase = addr.address === \"::\" || addr.address === \"0.0.0.0\" ? `${protocol}://localhost:${addr.port}` : addr.family === \"IPv6\" ? `${protocol}://[${addr.address}]:${addr.port}` : `${protocol}://${addr.address}:${addr.port}`;\n    logger.log(`Server-Sent-Events server for lazy compilation open at ${urlBase}.`);\n    callback(null, {\n      dispose(callback) {\n        isClosing = true; // Removing the listener is a workaround for a memory leak in node.js\n\n        server.off(\"request\", requestListener);\n        server.close(err => {\n          callback(err);\n        });\n\n        for (const socket of sockets) {\n          socket.destroy(new Error(\"Server is disposing\"));\n        }\n      },\n\n      module(originalModule) {\n        const key = `${encodeURIComponent(originalModule.identifier().replace(/\\\\/g, \"/\").replace(/@/g, \"_\")).replace(/%(2F|3A|24|26|2B|2C|3B|3D|3A)/g, decodeURIComponent)}`;\n        const active = activeModules.get(key) > 0;\n        return {\n          client: `${options.client}?${encodeURIComponent(urlBase + prefix)}`,\n          data: key,\n          active\n        };\n      }\n\n    });\n  });\n  listen(server);\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/hmr/lazyCompilationBackend.js"],"names":["module","exports","options","compiler","callback","logger","getInfrastructureLogger","activeModules","Map","prefix","isHttps","protocol","server","createServer","http","require","bind","listen","port","undefined","requestListener","req","res","keys","url","slice","length","split","socket","on","setTimeout","key","oldValue","get","set","log","setNoDelay","writeHead","write","moduleActivated","watching","invalidate","isClosing","sockets","Set","add","delete","destroy","e","message","warn","err","addr","address","Error","urlBase","family","dispose","off","close","originalModule","encodeURIComponent","identifier","replace","decodeURIComponent","active","client","data"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"http\").ServerOptions} HttpServerOptions */\n/** @typedef {import(\"https\").ServerOptions} HttpsServerOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LazyCompilationDefaultBackendOptions} LazyCompilationDefaultBackendOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/**\n * @callback BackendHandler\n * @param {Compiler} compiler compiler\n * @param {function((Error | null)=, any=): void} callback callback\n * @returns {void}\n */\n\n/**\n * @param {Omit<LazyCompilationDefaultBackendOptions, \"client\"> & { client: NonNullable<LazyCompilationDefaultBackendOptions[\"client\"]>}} options additional options for the backend\n * @returns {BackendHandler} backend\n */\nmodule.exports = options => (compiler, callback) => {\n\tconst logger = compiler.getInfrastructureLogger(\"LazyCompilationBackend\");\n\tconst activeModules = new Map();\n\tconst prefix = \"/lazy-compilation-using-\";\n\n\tconst isHttps =\n\t\toptions.protocol === \"https\" ||\n\t\t(typeof options.server === \"object\" &&\n\t\t\t(\"key\" in options.server || \"pfx\" in options.server));\n\n\tconst createServer =\n\t\ttypeof options.server === \"function\"\n\t\t\t? options.server\n\t\t\t: (() => {\n\t\t\t\t\tconst http = isHttps ? require(\"https\") : require(\"http\");\n\t\t\t\t\treturn http.createServer.bind(http, options.server);\n\t\t\t  })();\n\tconst listen =\n\t\ttypeof options.listen === \"function\"\n\t\t\t? options.listen\n\t\t\t: server => {\n\t\t\t\t\tlet listen = options.listen;\n\t\t\t\t\tif (typeof listen === \"object\" && !(\"port\" in listen))\n\t\t\t\t\t\tlisten = { ...listen, port: undefined };\n\t\t\t\t\tserver.listen(listen);\n\t\t\t  };\n\n\tconst protocol = options.protocol || (isHttps ? \"https\" : \"http\");\n\n\tconst requestListener = (req, res) => {\n\t\tconst keys = req.url.slice(prefix.length).split(\"@\");\n\t\treq.socket.on(\"close\", () => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tconst oldValue = activeModules.get(key) || 0;\n\t\t\t\t\tactiveModules.set(key, oldValue - 1);\n\t\t\t\t\tif (oldValue === 1) {\n\t\t\t\t\t\tlogger.log(\n\t\t\t\t\t\t\t`${key} is no longer in use. Next compilation will skip this module.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 120000);\n\t\t});\n\t\treq.socket.setNoDelay(true);\n\t\tres.writeHead(200, {\n\t\t\t\"content-type\": \"text/event-stream\",\n\t\t\t\"Access-Control-Allow-Origin\": \"*\",\n\t\t\t\"Access-Control-Allow-Methods\": \"*\",\n\t\t\t\"Access-Control-Allow-Headers\": \"*\"\n\t\t});\n\t\tres.write(\"\\n\");\n\t\tlet moduleActivated = false;\n\t\tfor (const key of keys) {\n\t\t\tconst oldValue = activeModules.get(key) || 0;\n\t\t\tactiveModules.set(key, oldValue + 1);\n\t\t\tif (oldValue === 0) {\n\t\t\t\tlogger.log(`${key} is now in use and will be compiled.`);\n\t\t\t\tmoduleActivated = true;\n\t\t\t}\n\t\t}\n\t\tif (moduleActivated && compiler.watching) compiler.watching.invalidate();\n\t};\n\n\tconst server = /** @type {import(\"net\").Server} */ (createServer());\n\tserver.on(\"request\", requestListener);\n\n\tlet isClosing = false;\n\t/** @type {Set<import(\"net\").Socket>} */\n\tconst sockets = new Set();\n\tserver.on(\"connection\", socket => {\n\t\tsockets.add(socket);\n\t\tsocket.on(\"close\", () => {\n\t\t\tsockets.delete(socket);\n\t\t});\n\t\tif (isClosing) socket.destroy();\n\t});\n\tserver.on(\"clientError\", e => {\n\t\tif (e.message !== \"Server is disposing\") logger.warn(e);\n\t});\n\tserver.on(\"listening\", err => {\n\t\tif (err) return callback(err);\n\t\tconst addr = server.address();\n\t\tif (typeof addr === \"string\") throw new Error(\"addr must not be a string\");\n\t\tconst urlBase =\n\t\t\taddr.address === \"::\" || addr.address === \"0.0.0.0\"\n\t\t\t\t? `${protocol}://localhost:${addr.port}`\n\t\t\t\t: addr.family === \"IPv6\"\n\t\t\t\t? `${protocol}://[${addr.address}]:${addr.port}`\n\t\t\t\t: `${protocol}://${addr.address}:${addr.port}`;\n\t\tlogger.log(\n\t\t\t`Server-Sent-Events server for lazy compilation open at ${urlBase}.`\n\t\t);\n\t\tcallback(null, {\n\t\t\tdispose(callback) {\n\t\t\t\tisClosing = true;\n\t\t\t\t// Removing the listener is a workaround for a memory leak in node.js\n\t\t\t\tserver.off(\"request\", requestListener);\n\t\t\t\tserver.close(err => {\n\t\t\t\t\tcallback(err);\n\t\t\t\t});\n\t\t\t\tfor (const socket of sockets) {\n\t\t\t\t\tsocket.destroy(new Error(\"Server is disposing\"));\n\t\t\t\t}\n\t\t\t},\n\t\t\tmodule(originalModule) {\n\t\t\t\tconst key = `${encodeURIComponent(\n\t\t\t\t\toriginalModule.identifier().replace(/\\\\/g, \"/\").replace(/@/g, \"_\")\n\t\t\t\t).replace(/%(2F|3A|24|26|2B|2C|3B|3D|3A)/g, decodeURIComponent)}`;\n\t\t\t\tconst active = activeModules.get(key) > 0;\n\t\t\t\treturn {\n\t\t\t\t\tclient: `${options.client}?${encodeURIComponent(urlBase + prefix)}`,\n\t\t\t\t\tdata: key,\n\t\t\t\t\tactive\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t});\n\tlisten(server);\n};\n"]},"metadata":{},"sourceType":"script"}