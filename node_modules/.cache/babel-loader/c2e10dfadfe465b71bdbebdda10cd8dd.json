{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst util = require(\"util\");\n/** @type {Map<string, Function>} */\n\n\nconst deprecationCache = new Map();\n/**\n * @typedef {Object} FakeHookMarker\n * @property {true} _fakeHook it's a fake hook\n */\n\n/** @template T @typedef {T & FakeHookMarker} FakeHook<T> */\n\n/**\n * @param {string} message deprecation message\n * @param {string} code deprecation code\n * @returns {Function} function to trigger deprecation\n */\n\nconst createDeprecation = (message, code) => {\n  const cached = deprecationCache.get(message);\n  if (cached !== undefined) return cached;\n  const fn = util.deprecate(() => {}, message, \"DEP_WEBPACK_DEPRECATION_\" + code);\n  deprecationCache.set(message, fn);\n  return fn;\n};\n\nconst COPY_METHODS = [\"concat\", \"entry\", \"filter\", \"find\", \"findIndex\", \"includes\", \"indexOf\", \"join\", \"lastIndexOf\", \"map\", \"reduce\", \"reduceRight\", \"slice\", \"some\"];\nconst DISABLED_METHODS = [\"copyWithin\", \"entries\", \"fill\", \"keys\", \"pop\", \"reverse\", \"shift\", \"splice\", \"sort\", \"unshift\"];\n/**\n * @param {any} set new set\n * @param {string} name property name\n * @returns {void}\n */\n\nexports.arrayToSetDeprecation = (set, name) => {\n  for (const method of COPY_METHODS) {\n    if (set[method]) continue;\n    const d = createDeprecation(`${name} was changed from Array to Set (using Array method '${method}' is deprecated)`, \"ARRAY_TO_SET\");\n    /**\n     * @deprecated\n     * @this {Set}\n     * @returns {number} count\n     */\n\n    set[method] = function () {\n      d();\n      const array = Array.from(this);\n      return Array.prototype[method].apply(array, arguments);\n    };\n  }\n\n  const dPush = createDeprecation(`${name} was changed from Array to Set (using Array method 'push' is deprecated)`, \"ARRAY_TO_SET_PUSH\");\n  const dLength = createDeprecation(`${name} was changed from Array to Set (using Array property 'length' is deprecated)`, \"ARRAY_TO_SET_LENGTH\");\n  const dIndexer = createDeprecation(`${name} was changed from Array to Set (indexing Array is deprecated)`, \"ARRAY_TO_SET_INDEXER\");\n  /**\n   * @deprecated\n   * @this {Set}\n   * @returns {number} count\n   */\n\n  set.push = function () {\n    dPush();\n\n    for (const item of Array.from(arguments)) {\n      this.add(item);\n    }\n\n    return this.size;\n  };\n\n  for (const method of DISABLED_METHODS) {\n    if (set[method]) continue;\n\n    set[method] = () => {\n      throw new Error(`${name} was changed from Array to Set (using Array method '${method}' is not possible)`);\n    };\n  }\n\n  const createIndexGetter = index => {\n    /**\n     * @this {Set} a Set\n     * @returns {any} the value at this location\n     */\n    const fn = function () {\n      dIndexer();\n      let i = 0;\n\n      for (const item of this) {\n        if (i++ === index) return item;\n      }\n\n      return undefined;\n    };\n\n    return fn;\n  };\n\n  const defineIndexGetter = index => {\n    Object.defineProperty(set, index, {\n      get: createIndexGetter(index),\n\n      set(value) {\n        throw new Error(`${name} was changed from Array to Set (indexing Array with write is not possible)`);\n      }\n\n    });\n  };\n\n  defineIndexGetter(0);\n  let indexerDefined = 1;\n  Object.defineProperty(set, \"length\", {\n    get() {\n      dLength();\n      const length = this.size;\n\n      for (indexerDefined; indexerDefined < length + 1; indexerDefined++) {\n        defineIndexGetter(indexerDefined);\n      }\n\n      return length;\n    },\n\n    set(value) {\n      throw new Error(`${name} was changed from Array to Set (writing to Array property 'length' is not possible)`);\n    }\n\n  });\n  set[Symbol.isConcatSpreadable] = true;\n};\n\nexports.createArrayToSetDeprecationSet = name => {\n  let initialized = false;\n\n  class SetDeprecatedArray extends Set {\n    constructor(items) {\n      super(items);\n\n      if (!initialized) {\n        initialized = true;\n        exports.arrayToSetDeprecation(SetDeprecatedArray.prototype, name);\n      }\n    }\n\n  }\n\n  return SetDeprecatedArray;\n};\n\nexports.soonFrozenObjectDeprecation = function (obj, name, code) {\n  let note = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n  const message = `${name} will be frozen in future, all modifications are deprecated.${note && `\\n${note}`}`;\n  return new Proxy(obj, {\n    set: util.deprecate((target, property, value, receiver) => Reflect.set(target, property, value, receiver), message, code),\n    defineProperty: util.deprecate((target, property, descriptor) => Reflect.defineProperty(target, property, descriptor), message, code),\n    deleteProperty: util.deprecate((target, property) => Reflect.deleteProperty(target, property), message, code),\n    setPrototypeOf: util.deprecate((target, proto) => Reflect.setPrototypeOf(target, proto), message, code)\n  });\n};\n/**\n * @template T\n * @param {T} obj object\n * @param {string} message deprecation message\n * @param {string} code deprecation code\n * @returns {T} object with property access deprecated\n */\n\n\nconst deprecateAllProperties = (obj, message, code) => {\n  const newObj = {};\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n\n  for (const name of Object.keys(descriptors)) {\n    const descriptor = descriptors[name];\n\n    if (typeof descriptor.value === \"function\") {\n      Object.defineProperty(newObj, name, { ...descriptor,\n        value: util.deprecate(descriptor.value, message, code)\n      });\n    } else if (descriptor.get || descriptor.set) {\n      Object.defineProperty(newObj, name, { ...descriptor,\n        get: descriptor.get && util.deprecate(descriptor.get, message, code),\n        set: descriptor.set && util.deprecate(descriptor.set, message, code)\n      });\n    } else {\n      let value = descriptor.value;\n      Object.defineProperty(newObj, name, {\n        configurable: descriptor.configurable,\n        enumerable: descriptor.enumerable,\n        get: util.deprecate(() => value, message, code),\n        set: descriptor.writable ? util.deprecate(v => value = v, message, code) : undefined\n      });\n    }\n  }\n\n  return (\n    /** @type {T} */\n    newObj\n  );\n};\n\nexports.deprecateAllProperties = deprecateAllProperties;\n/**\n * @template T\n * @param {T} fakeHook fake hook implementation\n * @param {string=} message deprecation message (not deprecated when unset)\n * @param {string=} code deprecation code (not deprecated when unset)\n * @returns {FakeHook<T>} fake hook which redirects\n */\n\nexports.createFakeHook = (fakeHook, message, code) => {\n  if (message && code) {\n    fakeHook = deprecateAllProperties(fakeHook, message, code);\n  }\n\n  return Object.freeze(Object.assign(fakeHook, {\n    _fakeHook:\n    /** @type {true} */\n    true\n  }));\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/util/deprecation.js"],"names":["util","require","deprecationCache","Map","createDeprecation","message","code","cached","get","undefined","fn","deprecate","set","COPY_METHODS","DISABLED_METHODS","exports","arrayToSetDeprecation","name","method","d","array","Array","from","prototype","apply","arguments","dPush","dLength","dIndexer","push","item","add","size","Error","createIndexGetter","index","i","defineIndexGetter","Object","defineProperty","value","indexerDefined","length","Symbol","isConcatSpreadable","createArrayToSetDeprecationSet","initialized","SetDeprecatedArray","Set","constructor","items","soonFrozenObjectDeprecation","obj","note","Proxy","target","property","receiver","Reflect","descriptor","deleteProperty","setPrototypeOf","proto","deprecateAllProperties","newObj","descriptors","getOwnPropertyDescriptors","keys","configurable","enumerable","writable","v","createFakeHook","fakeHook","freeze","assign","_fakeHook"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\n\n/** @type {Map<string, Function>} */\nconst deprecationCache = new Map();\n\n/**\n * @typedef {Object} FakeHookMarker\n * @property {true} _fakeHook it's a fake hook\n */\n\n/** @template T @typedef {T & FakeHookMarker} FakeHook<T> */\n\n/**\n * @param {string} message deprecation message\n * @param {string} code deprecation code\n * @returns {Function} function to trigger deprecation\n */\nconst createDeprecation = (message, code) => {\n\tconst cached = deprecationCache.get(message);\n\tif (cached !== undefined) return cached;\n\tconst fn = util.deprecate(\n\t\t() => {},\n\t\tmessage,\n\t\t\"DEP_WEBPACK_DEPRECATION_\" + code\n\t);\n\tdeprecationCache.set(message, fn);\n\treturn fn;\n};\n\nconst COPY_METHODS = [\n\t\"concat\",\n\t\"entry\",\n\t\"filter\",\n\t\"find\",\n\t\"findIndex\",\n\t\"includes\",\n\t\"indexOf\",\n\t\"join\",\n\t\"lastIndexOf\",\n\t\"map\",\n\t\"reduce\",\n\t\"reduceRight\",\n\t\"slice\",\n\t\"some\"\n];\n\nconst DISABLED_METHODS = [\n\t\"copyWithin\",\n\t\"entries\",\n\t\"fill\",\n\t\"keys\",\n\t\"pop\",\n\t\"reverse\",\n\t\"shift\",\n\t\"splice\",\n\t\"sort\",\n\t\"unshift\"\n];\n\n/**\n * @param {any} set new set\n * @param {string} name property name\n * @returns {void}\n */\nexports.arrayToSetDeprecation = (set, name) => {\n\tfor (const method of COPY_METHODS) {\n\t\tif (set[method]) continue;\n\t\tconst d = createDeprecation(\n\t\t\t`${name} was changed from Array to Set (using Array method '${method}' is deprecated)`,\n\t\t\t\"ARRAY_TO_SET\"\n\t\t);\n\t\t/**\n\t\t * @deprecated\n\t\t * @this {Set}\n\t\t * @returns {number} count\n\t\t */\n\t\tset[method] = function () {\n\t\t\td();\n\t\t\tconst array = Array.from(this);\n\t\t\treturn Array.prototype[method].apply(array, arguments);\n\t\t};\n\t}\n\tconst dPush = createDeprecation(\n\t\t`${name} was changed from Array to Set (using Array method 'push' is deprecated)`,\n\t\t\"ARRAY_TO_SET_PUSH\"\n\t);\n\tconst dLength = createDeprecation(\n\t\t`${name} was changed from Array to Set (using Array property 'length' is deprecated)`,\n\t\t\"ARRAY_TO_SET_LENGTH\"\n\t);\n\tconst dIndexer = createDeprecation(\n\t\t`${name} was changed from Array to Set (indexing Array is deprecated)`,\n\t\t\"ARRAY_TO_SET_INDEXER\"\n\t);\n\t/**\n\t * @deprecated\n\t * @this {Set}\n\t * @returns {number} count\n\t */\n\tset.push = function () {\n\t\tdPush();\n\t\tfor (const item of Array.from(arguments)) {\n\t\t\tthis.add(item);\n\t\t}\n\t\treturn this.size;\n\t};\n\tfor (const method of DISABLED_METHODS) {\n\t\tif (set[method]) continue;\n\t\tset[method] = () => {\n\t\t\tthrow new Error(\n\t\t\t\t`${name} was changed from Array to Set (using Array method '${method}' is not possible)`\n\t\t\t);\n\t\t};\n\t}\n\tconst createIndexGetter = index => {\n\t\t/**\n\t\t * @this {Set} a Set\n\t\t * @returns {any} the value at this location\n\t\t */\n\t\tconst fn = function () {\n\t\t\tdIndexer();\n\t\t\tlet i = 0;\n\t\t\tfor (const item of this) {\n\t\t\t\tif (i++ === index) return item;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t\treturn fn;\n\t};\n\tconst defineIndexGetter = index => {\n\t\tObject.defineProperty(set, index, {\n\t\t\tget: createIndexGetter(index),\n\t\t\tset(value) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`${name} was changed from Array to Set (indexing Array with write is not possible)`\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t};\n\tdefineIndexGetter(0);\n\tlet indexerDefined = 1;\n\tObject.defineProperty(set, \"length\", {\n\t\tget() {\n\t\t\tdLength();\n\t\t\tconst length = this.size;\n\t\t\tfor (indexerDefined; indexerDefined < length + 1; indexerDefined++) {\n\t\t\t\tdefineIndexGetter(indexerDefined);\n\t\t\t}\n\t\t\treturn length;\n\t\t},\n\t\tset(value) {\n\t\t\tthrow new Error(\n\t\t\t\t`${name} was changed from Array to Set (writing to Array property 'length' is not possible)`\n\t\t\t);\n\t\t}\n\t});\n\tset[Symbol.isConcatSpreadable] = true;\n};\n\nexports.createArrayToSetDeprecationSet = name => {\n\tlet initialized = false;\n\tclass SetDeprecatedArray extends Set {\n\t\tconstructor(items) {\n\t\t\tsuper(items);\n\t\t\tif (!initialized) {\n\t\t\t\tinitialized = true;\n\t\t\t\texports.arrayToSetDeprecation(SetDeprecatedArray.prototype, name);\n\t\t\t}\n\t\t}\n\t}\n\treturn SetDeprecatedArray;\n};\n\nexports.soonFrozenObjectDeprecation = (obj, name, code, note = \"\") => {\n\tconst message = `${name} will be frozen in future, all modifications are deprecated.${\n\t\tnote && `\\n${note}`\n\t}`;\n\treturn new Proxy(obj, {\n\t\tset: util.deprecate(\n\t\t\t(target, property, value, receiver) =>\n\t\t\t\tReflect.set(target, property, value, receiver),\n\t\t\tmessage,\n\t\t\tcode\n\t\t),\n\t\tdefineProperty: util.deprecate(\n\t\t\t(target, property, descriptor) =>\n\t\t\t\tReflect.defineProperty(target, property, descriptor),\n\t\t\tmessage,\n\t\t\tcode\n\t\t),\n\t\tdeleteProperty: util.deprecate(\n\t\t\t(target, property) => Reflect.deleteProperty(target, property),\n\t\t\tmessage,\n\t\t\tcode\n\t\t),\n\t\tsetPrototypeOf: util.deprecate(\n\t\t\t(target, proto) => Reflect.setPrototypeOf(target, proto),\n\t\t\tmessage,\n\t\t\tcode\n\t\t)\n\t});\n};\n\n/**\n * @template T\n * @param {T} obj object\n * @param {string} message deprecation message\n * @param {string} code deprecation code\n * @returns {T} object with property access deprecated\n */\nconst deprecateAllProperties = (obj, message, code) => {\n\tconst newObj = {};\n\tconst descriptors = Object.getOwnPropertyDescriptors(obj);\n\tfor (const name of Object.keys(descriptors)) {\n\t\tconst descriptor = descriptors[name];\n\t\tif (typeof descriptor.value === \"function\") {\n\t\t\tObject.defineProperty(newObj, name, {\n\t\t\t\t...descriptor,\n\t\t\t\tvalue: util.deprecate(descriptor.value, message, code)\n\t\t\t});\n\t\t} else if (descriptor.get || descriptor.set) {\n\t\t\tObject.defineProperty(newObj, name, {\n\t\t\t\t...descriptor,\n\t\t\t\tget: descriptor.get && util.deprecate(descriptor.get, message, code),\n\t\t\t\tset: descriptor.set && util.deprecate(descriptor.set, message, code)\n\t\t\t});\n\t\t} else {\n\t\t\tlet value = descriptor.value;\n\t\t\tObject.defineProperty(newObj, name, {\n\t\t\t\tconfigurable: descriptor.configurable,\n\t\t\t\tenumerable: descriptor.enumerable,\n\t\t\t\tget: util.deprecate(() => value, message, code),\n\t\t\t\tset: descriptor.writable\n\t\t\t\t\t? util.deprecate(v => (value = v), message, code)\n\t\t\t\t\t: undefined\n\t\t\t});\n\t\t}\n\t}\n\treturn /** @type {T} */ (newObj);\n};\nexports.deprecateAllProperties = deprecateAllProperties;\n\n/**\n * @template T\n * @param {T} fakeHook fake hook implementation\n * @param {string=} message deprecation message (not deprecated when unset)\n * @param {string=} code deprecation code (not deprecated when unset)\n * @returns {FakeHook<T>} fake hook which redirects\n */\nexports.createFakeHook = (fakeHook, message, code) => {\n\tif (message && code) {\n\t\tfakeHook = deprecateAllProperties(fakeHook, message, code);\n\t}\n\treturn Object.freeze(\n\t\tObject.assign(fakeHook, { _fakeHook: /** @type {true} */ (true) })\n\t);\n};\n"]},"metadata":{},"sourceType":"script"}