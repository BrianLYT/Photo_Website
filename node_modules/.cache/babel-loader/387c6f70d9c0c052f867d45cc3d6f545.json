{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst Template = require(\"../Template\");\n\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n// TODO webpack 6 remove\n\n\nclass ReadFileCompileWasmPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ReadFileCompileWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === \"async-node\";\n      };\n\n      const generateLoadBinaryCode = path => Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", \"try {\", Template.indent([`readFile(join(__dirname, ${path}), function(err, buffer){`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ReadFileCompileWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === \"webassembly/sync\")) {\n          return;\n        }\n\n        set.add(RuntimeGlobals.moduleCache);\n        compilation.addRuntimeModule(chunk, new WasmChunkLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: false,\n          mangleImports: this.options.mangleImports,\n          runtimeRequirements: set\n        }));\n      });\n    });\n  }\n\n}\n\nmodule.exports = ReadFileCompileWasmPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/node/ReadFileCompileWasmPlugin.js"],"names":["RuntimeGlobals","require","Template","WasmChunkLoadingRuntimeModule","ReadFileCompileWasmPlugin","constructor","options","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","getEntryOptions","undefined","generateLoadBinaryCode","path","asString","indent","runtimeRequirementInTree","for","ensureChunkHandlers","set","chunkGraph","hasModuleInGraph","m","type","add","moduleCache","addRuntimeModule","supportsStreaming","mangleImports","runtimeRequirements","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAME,6BAA6B,GAAGF,OAAO,CAAC,4CAAD,CAA7C;AAEA;AAEA;;;AAEA,MAAMG,yBAAN,CAAgC;AAC/BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,2BADD,EAECC,WAAW,IAAI;AACd,YAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAZ,CAA0BC,WAApD;;AACA,YAAMC,iBAAiB,GAAGC,KAAK,IAAI;AAClC,cAAMX,OAAO,GAAGW,KAAK,CAACC,eAAN,EAAhB;AACA,cAAMH,WAAW,GAChBT,OAAO,IAAIA,OAAO,CAACS,WAAR,KAAwBI,SAAnC,GACGb,OAAO,CAACS,WADX,GAEGF,iBAHJ;AAIA,eAAOE,WAAW,KAAK,YAAvB;AACA,OAPD;;AAQA,YAAMK,sBAAsB,GAAGC,IAAI,IAClCnB,QAAQ,CAACoB,QAAT,CAAkB,CACjB,0CADiB,EAEjBpB,QAAQ,CAACqB,MAAT,CAAgB,CACf,mCADe,EAEf,iCAFe,EAGf,EAHe,EAIf,OAJe,EAKfrB,QAAQ,CAACqB,MAAT,CAAgB,CACd,4BAA2BF,IAAK,2BADlB,EAEfnB,QAAQ,CAACqB,MAAT,CAAgB,CACf,8BADe,EAEf,EAFe,EAGf,wBAHe,EAIf,WAJe,EAKfrB,QAAQ,CAACqB,MAAT,CAAgB,CAAC,kCAAD,CAAhB,CALe,EAMf,KANe,CAAhB,CAFe,EAUf,KAVe,CAAhB,CALe,EAiBf,gCAjBe,CAAhB,CAFiB,EAqBjB,IArBiB,CAAlB,CADD;;AAyBAX,MAAAA,WAAW,CAACH,KAAZ,CAAkBe,wBAAlB,CACEC,GADF,CACMzB,cAAc,CAAC0B,mBADrB,EAEEf,GAFF,CAEM,2BAFN,EAEmC,CAACM,KAAD,EAAQU,GAAR,KAAgB;AACjD,YAAI,CAACX,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;AAC/B,cAAMW,UAAU,GAAGhB,WAAW,CAACgB,UAA/B;;AACA,YACC,CAACA,UAAU,CAACC,gBAAX,CACAZ,KADA,EAEAa,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,kBAFhB,CADF,EAKE;AACD;AACA;;AACDJ,QAAAA,GAAG,CAACK,GAAJ,CAAQhC,cAAc,CAACiC,WAAvB;AACArB,QAAAA,WAAW,CAACsB,gBAAZ,CACCjB,KADD,EAEC,IAAId,6BAAJ,CAAkC;AACjCiB,UAAAA,sBADiC;AAEjCe,UAAAA,iBAAiB,EAAE,KAFc;AAGjCC,UAAAA,aAAa,EAAE,KAAK9B,OAAL,CAAa8B,aAHK;AAIjCC,UAAAA,mBAAmB,EAAEV;AAJY,SAAlC,CAFD;AASA,OAvBF;AAwBA,KA7DF;AA+DA;;AA1E8B;;AA6EhCW,MAAM,CAACC,OAAP,GAAiBnC,yBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nclass ReadFileCompileWasmPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"ReadFileCompileWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === \"async-node\";\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\tTemplate.asString([\n\t\t\t\t\t\t\"new Promise(function (resolve, reject) {\",\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\"var { readFile } = require('fs');\",\n\t\t\t\t\t\t\t\"var { join } = require('path');\",\n\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\"try {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t`readFile(join(__dirname, ${path}), function(err, buffer){`,\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\n\t\t\t\t\t\t\t\t\t\"resolve({\",\n\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\n\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"} catch (err) { reject(err); }\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"})\"\n\t\t\t\t\t]);\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"ReadFileCompileWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/sync\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew WasmChunkLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: false,\n\t\t\t\t\t\t\t\tmangleImports: this.options.mangleImports,\n\t\t\t\t\t\t\t\truntimeRequirements: set\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ReadFileCompileWasmPlugin;\n"]},"metadata":{},"sourceType":"script"}