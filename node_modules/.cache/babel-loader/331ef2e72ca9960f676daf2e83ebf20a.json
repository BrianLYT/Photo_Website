{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./ContextModuleFactory\")} ContextModuleFactory */\n\nclass ContextExclusionPlugin {\n  /**\n   * @param {RegExp} negativeMatcher Matcher regular expression\n   */\n  constructor(negativeMatcher) {\n    this.negativeMatcher = negativeMatcher;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.contextModuleFactory.tap(\"ContextExclusionPlugin\", cmf => {\n      cmf.hooks.contextModuleFiles.tap(\"ContextExclusionPlugin\", files => {\n        return files.filter(filePath => !this.negativeMatcher.test(filePath));\n      });\n    });\n  }\n\n}\n\nmodule.exports = ContextExclusionPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ContextExclusionPlugin.js"],"names":["ContextExclusionPlugin","constructor","negativeMatcher","apply","compiler","hooks","contextModuleFactory","tap","cmf","contextModuleFiles","files","filter","filePath","test","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAMA,sBAAN,CAA6B;AAC5B;AACD;AACA;AACCC,EAAAA,WAAW,CAACC,eAAD,EAAkB;AAC5B,SAAKA,eAAL,GAAuBA,eAAvB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,oBAAf,CAAoCC,GAApC,CAAwC,wBAAxC,EAAkEC,GAAG,IAAI;AACxEA,MAAAA,GAAG,CAACH,KAAJ,CAAUI,kBAAV,CAA6BF,GAA7B,CAAiC,wBAAjC,EAA2DG,KAAK,IAAI;AACnE,eAAOA,KAAK,CAACC,MAAN,CAAaC,QAAQ,IAAI,CAAC,KAAKV,eAAL,CAAqBW,IAArB,CAA0BD,QAA1B,CAA1B,CAAP;AACA,OAFD;AAGA,KAJD;AAKA;;AAnB2B;;AAsB7BE,MAAM,CAACC,OAAP,GAAiBf,sBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./ContextModuleFactory\")} ContextModuleFactory */\n\nclass ContextExclusionPlugin {\n\t/**\n\t * @param {RegExp} negativeMatcher Matcher regular expression\n\t */\n\tconstructor(negativeMatcher) {\n\t\tthis.negativeMatcher = negativeMatcher;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.contextModuleFactory.tap(\"ContextExclusionPlugin\", cmf => {\n\t\t\tcmf.hooks.contextModuleFiles.tap(\"ContextExclusionPlugin\", files => {\n\t\t\t\treturn files.filter(filePath => !this.negativeMatcher.test(filePath));\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = ContextExclusionPlugin;\n"]},"metadata":{},"sourceType":"script"}