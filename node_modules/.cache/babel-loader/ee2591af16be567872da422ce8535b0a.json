{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../Cache\").Etag} Etag */\n\nclass MergedEtag {\n  /**\n   * @param {Etag} a first\n   * @param {Etag} b second\n   */\n  constructor(a, b) {\n    this.a = a;\n    this.b = b;\n  }\n\n  toString() {\n    return `${this.a.toString()}|${this.b.toString()}`;\n  }\n\n}\n\nconst dualObjectMap = new WeakMap();\nconst objectStringMap = new WeakMap();\n/**\n * @param {Etag} a first\n * @param {Etag} b second\n * @returns {Etag} result\n */\n\nconst mergeEtags = (a, b) => {\n  if (typeof a === \"string\") {\n    if (typeof b === \"string\") {\n      return `${a}|${b}`;\n    } else {\n      const temp = b;\n      b = a;\n      a = temp;\n    }\n  } else {\n    if (typeof b !== \"string\") {\n      // both a and b are objects\n      let map = dualObjectMap.get(a);\n\n      if (map === undefined) {\n        dualObjectMap.set(a, map = new WeakMap());\n      }\n\n      const mergedEtag = map.get(b);\n\n      if (mergedEtag === undefined) {\n        const newMergedEtag = new MergedEtag(a, b);\n        map.set(b, newMergedEtag);\n        return newMergedEtag;\n      } else {\n        return mergedEtag;\n      }\n    }\n  } // a is object, b is string\n\n\n  let map = objectStringMap.get(a);\n\n  if (map === undefined) {\n    objectStringMap.set(a, map = new Map());\n  }\n\n  const mergedEtag = map.get(b);\n\n  if (mergedEtag === undefined) {\n    const newMergedEtag = new MergedEtag(a, b);\n    map.set(b, newMergedEtag);\n    return newMergedEtag;\n  } else {\n    return mergedEtag;\n  }\n};\n\nmodule.exports = mergeEtags;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/cache/mergeEtags.js"],"names":["MergedEtag","constructor","a","b","toString","dualObjectMap","WeakMap","objectStringMap","mergeEtags","temp","map","get","undefined","set","mergedEtag","newMergedEtag","Map","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AAEA,MAAMA,UAAN,CAAiB;AAChB;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACjB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA;;AAEDC,EAAAA,QAAQ,GAAG;AACV,WAAQ,GAAE,KAAKF,CAAL,CAAOE,QAAP,EAAkB,IAAG,KAAKD,CAAL,CAAOC,QAAP,EAAkB,EAAjD;AACA;;AAZe;;AAejB,MAAMC,aAAa,GAAG,IAAIC,OAAJ,EAAtB;AACA,MAAMC,eAAe,GAAG,IAAID,OAAJ,EAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAME,UAAU,GAAG,CAACN,CAAD,EAAIC,CAAJ,KAAU;AAC5B,MAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;AAC1B,QAAI,OAAOC,CAAP,KAAa,QAAjB,EAA2B;AAC1B,aAAQ,GAAED,CAAE,IAAGC,CAAE,EAAjB;AACA,KAFD,MAEO;AACN,YAAMM,IAAI,GAAGN,CAAb;AACAA,MAAAA,CAAC,GAAGD,CAAJ;AACAA,MAAAA,CAAC,GAAGO,IAAJ;AACA;AACD,GARD,MAQO;AACN,QAAI,OAAON,CAAP,KAAa,QAAjB,EAA2B;AAC1B;AACA,UAAIO,GAAG,GAAGL,aAAa,CAACM,GAAd,CAAkBT,CAAlB,CAAV;;AACA,UAAIQ,GAAG,KAAKE,SAAZ,EAAuB;AACtBP,QAAAA,aAAa,CAACQ,GAAd,CAAkBX,CAAlB,EAAsBQ,GAAG,GAAG,IAAIJ,OAAJ,EAA5B;AACA;;AACD,YAAMQ,UAAU,GAAGJ,GAAG,CAACC,GAAJ,CAAQR,CAAR,CAAnB;;AACA,UAAIW,UAAU,KAAKF,SAAnB,EAA8B;AAC7B,cAAMG,aAAa,GAAG,IAAIf,UAAJ,CAAeE,CAAf,EAAkBC,CAAlB,CAAtB;AACAO,QAAAA,GAAG,CAACG,GAAJ,CAAQV,CAAR,EAAWY,aAAX;AACA,eAAOA,aAAP;AACA,OAJD,MAIO;AACN,eAAOD,UAAP;AACA;AACD;AACD,GAzB2B,CA0B5B;;;AACA,MAAIJ,GAAG,GAAGH,eAAe,CAACI,GAAhB,CAAoBT,CAApB,CAAV;;AACA,MAAIQ,GAAG,KAAKE,SAAZ,EAAuB;AACtBL,IAAAA,eAAe,CAACM,GAAhB,CAAoBX,CAApB,EAAwBQ,GAAG,GAAG,IAAIM,GAAJ,EAA9B;AACA;;AACD,QAAMF,UAAU,GAAGJ,GAAG,CAACC,GAAJ,CAAQR,CAAR,CAAnB;;AACA,MAAIW,UAAU,KAAKF,SAAnB,EAA8B;AAC7B,UAAMG,aAAa,GAAG,IAAIf,UAAJ,CAAeE,CAAf,EAAkBC,CAAlB,CAAtB;AACAO,IAAAA,GAAG,CAACG,GAAJ,CAAQV,CAAR,EAAWY,aAAX;AACA,WAAOA,aAAP;AACA,GAJD,MAIO;AACN,WAAOD,UAAP;AACA;AACD,CAvCD;;AAyCAG,MAAM,CAACC,OAAP,GAAiBV,UAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Cache\").Etag} Etag */\n\nclass MergedEtag {\n\t/**\n\t * @param {Etag} a first\n\t * @param {Etag} b second\n\t */\n\tconstructor(a, b) {\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\n\ttoString() {\n\t\treturn `${this.a.toString()}|${this.b.toString()}`;\n\t}\n}\n\nconst dualObjectMap = new WeakMap();\nconst objectStringMap = new WeakMap();\n\n/**\n * @param {Etag} a first\n * @param {Etag} b second\n * @returns {Etag} result\n */\nconst mergeEtags = (a, b) => {\n\tif (typeof a === \"string\") {\n\t\tif (typeof b === \"string\") {\n\t\t\treturn `${a}|${b}`;\n\t\t} else {\n\t\t\tconst temp = b;\n\t\t\tb = a;\n\t\t\ta = temp;\n\t\t}\n\t} else {\n\t\tif (typeof b !== \"string\") {\n\t\t\t// both a and b are objects\n\t\t\tlet map = dualObjectMap.get(a);\n\t\t\tif (map === undefined) {\n\t\t\t\tdualObjectMap.set(a, (map = new WeakMap()));\n\t\t\t}\n\t\t\tconst mergedEtag = map.get(b);\n\t\t\tif (mergedEtag === undefined) {\n\t\t\t\tconst newMergedEtag = new MergedEtag(a, b);\n\t\t\t\tmap.set(b, newMergedEtag);\n\t\t\t\treturn newMergedEtag;\n\t\t\t} else {\n\t\t\t\treturn mergedEtag;\n\t\t\t}\n\t\t}\n\t}\n\t// a is object, b is string\n\tlet map = objectStringMap.get(a);\n\tif (map === undefined) {\n\t\tobjectStringMap.set(a, (map = new Map()));\n\t}\n\tconst mergedEtag = map.get(b);\n\tif (mergedEtag === undefined) {\n\t\tconst newMergedEtag = new MergedEtag(a, b);\n\t\tmap.set(b, newMergedEtag);\n\t\treturn newMergedEtag;\n\t} else {\n\t\treturn mergedEtag;\n\t}\n};\n\nmodule.exports = mergeEtags;\n"]},"metadata":{},"sourceType":"script"}