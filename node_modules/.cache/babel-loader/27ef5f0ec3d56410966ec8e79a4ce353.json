{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ArrayPushCallbackChunkFormatPlugin = require(\"../javascript/ArrayPushCallbackChunkFormatPlugin\");\n\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass WebWorkerTemplatePlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.options.output.chunkLoading = \"import-scripts\";\n    new ArrayPushCallbackChunkFormatPlugin().apply(compiler);\n    new EnableChunkLoadingPlugin(\"import-scripts\").apply(compiler);\n  }\n\n}\n\nmodule.exports = WebWorkerTemplatePlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/webworker/WebWorkerTemplatePlugin.js"],"names":["ArrayPushCallbackChunkFormatPlugin","require","EnableChunkLoadingPlugin","WebWorkerTemplatePlugin","apply","compiler","options","output","chunkLoading","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,kCAAkC,GAAGC,OAAO,CAAC,kDAAD,CAAlD;;AACA,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,wCAAD,CAAxC;AAEA;;;AAEA,MAAME,uBAAN,CAA8B;AAC7B;AACD;AACA;AACA;AACA;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,MAAjB,CAAwBC,YAAxB,GAAuC,gBAAvC;AACA,QAAIR,kCAAJ,GAAyCI,KAAzC,CAA+CC,QAA/C;AACA,QAAIH,wBAAJ,CAA6B,gBAA7B,EAA+CE,KAA/C,CAAqDC,QAArD;AACA;;AAV4B;;AAY9BI,MAAM,CAACC,OAAP,GAAiBP,uBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ArrayPushCallbackChunkFormatPlugin = require(\"../javascript/ArrayPushCallbackChunkFormatPlugin\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass WebWorkerTemplatePlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.options.output.chunkLoading = \"import-scripts\";\n\t\tnew ArrayPushCallbackChunkFormatPlugin().apply(compiler);\n\t\tnew EnableChunkLoadingPlugin(\"import-scripts\").apply(compiler);\n\t}\n}\nmodule.exports = WebWorkerTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}