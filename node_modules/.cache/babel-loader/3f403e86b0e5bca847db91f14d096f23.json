{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst RuntimeModule = require(\"../RuntimeModule\");\n\nconst Template = require(\"../Template\");\n\nconst JavascriptModulesPlugin = require(\"../javascript/JavascriptModulesPlugin\");\n\nconst {\n  getUndoPath\n} = require(\"../util/identifier\");\n\nclass AutoPublicPathRuntimeModule extends RuntimeModule {\n  constructor() {\n    super(\"publicPath\", RuntimeModule.STAGE_BASIC);\n  }\n  /**\n   * @returns {string} runtime code\n   */\n\n\n  generate() {\n    const {\n      compilation\n    } = this;\n    const {\n      scriptType,\n      importMetaName,\n      path\n    } = compilation.outputOptions;\n    const chunkName = compilation.getPath(JavascriptModulesPlugin.getChunkFilenameTemplate(this.chunk, compilation.outputOptions), {\n      chunk: this.chunk,\n      contentHashType: \"javascript\"\n    });\n    const undoPath = getUndoPath(chunkName, path, false);\n    return Template.asString([\"var scriptUrl;\", scriptType === \"module\" ? `if (typeof ${importMetaName}.url === \"string\") scriptUrl = ${importMetaName}.url` : Template.asString([`if (${RuntimeGlobals.global}.importScripts) scriptUrl = ${RuntimeGlobals.global}.location + \"\";`, `var document = ${RuntimeGlobals.global}.document;`, \"if (!scriptUrl && document) {\", Template.indent([`if (document.currentScript)`, Template.indent(`scriptUrl = document.currentScript.src`), \"if (!scriptUrl) {\", Template.indent(['var scripts = document.getElementsByTagName(\"script\");', \"if(scripts.length) scriptUrl = scripts[scripts.length - 1].src\"]), \"}\"]), \"}\"]), \"// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\", '// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.', 'if (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");', 'scriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\\\?.*$/, \"\").replace(/\\\\/[^\\\\/]+$/, \"/\");', !undoPath ? `${RuntimeGlobals.publicPath} = scriptUrl;` : `${RuntimeGlobals.publicPath} = scriptUrl + ${JSON.stringify(undoPath)};`]);\n  }\n\n}\n\nmodule.exports = AutoPublicPathRuntimeModule;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/runtime/AutoPublicPathRuntimeModule.js"],"names":["RuntimeGlobals","require","RuntimeModule","Template","JavascriptModulesPlugin","getUndoPath","AutoPublicPathRuntimeModule","constructor","STAGE_BASIC","generate","compilation","scriptType","importMetaName","path","outputOptions","chunkName","getPath","getChunkFilenameTemplate","chunk","contentHashType","undoPath","asString","global","indent","publicPath","JSON","stringify","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAMG,uBAAuB,GAAGH,OAAO,CAAC,uCAAD,CAAvC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAkBJ,OAAO,CAAC,oBAAD,CAA/B;;AAEA,MAAMK,2BAAN,SAA0CJ,aAA1C,CAAwD;AACvDK,EAAAA,WAAW,GAAG;AACb,UAAM,YAAN,EAAoBL,aAAa,CAACM,WAAlC;AACA;AAED;AACD;AACA;;;AACCC,EAAAA,QAAQ,GAAG;AACV,UAAM;AAAEC,MAAAA;AAAF,QAAkB,IAAxB;AACA,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA,cAAd;AAA8BC,MAAAA;AAA9B,QAAuCH,WAAW,CAACI,aAAzD;AACA,UAAMC,SAAS,GAAGL,WAAW,CAACM,OAAZ,CACjBZ,uBAAuB,CAACa,wBAAxB,CACC,KAAKC,KADN,EAECR,WAAW,CAACI,aAFb,CADiB,EAKjB;AACCI,MAAAA,KAAK,EAAE,KAAKA,KADb;AAECC,MAAAA,eAAe,EAAE;AAFlB,KALiB,CAAlB;AAUA,UAAMC,QAAQ,GAAGf,WAAW,CAACU,SAAD,EAAYF,IAAZ,EAAkB,KAAlB,CAA5B;AAEA,WAAOV,QAAQ,CAACkB,QAAT,CAAkB,CACxB,gBADwB,EAExBV,UAAU,KAAK,QAAf,GACI,cAAaC,cAAe,kCAAiCA,cAAe,MADhF,GAEGT,QAAQ,CAACkB,QAAT,CAAkB,CACjB,OAAMrB,cAAc,CAACsB,MAAO,+BAA8BtB,cAAc,CAACsB,MAAO,iBAD/D,EAEjB,kBAAiBtB,cAAc,CAACsB,MAAO,YAFtB,EAGlB,+BAHkB,EAIlBnB,QAAQ,CAACoB,MAAT,CAAgB,CACd,6BADc,EAEfpB,QAAQ,CAACoB,MAAT,CAAiB,wCAAjB,CAFe,EAGf,mBAHe,EAIfpB,QAAQ,CAACoB,MAAT,CAAgB,CACf,wDADe,EAEf,gEAFe,CAAhB,CAJe,EAQf,GARe,CAAhB,CAJkB,EAclB,GAdkB,CAAlB,CAJqB,EAoBxB,6IApBwB,EAqBxB,oHArBwB,EAsBxB,2FAtBwB,EAuBxB,8FAvBwB,EAwBxB,CAACH,QAAD,GACI,GAAEpB,cAAc,CAACwB,UAAW,eADhC,GAEI,GAAExB,cAAc,CAACwB,UAAW,kBAAiBC,IAAI,CAACC,SAAL,CAC9CN,QAD8C,CAE5C,GA5BmB,CAAlB,CAAP;AA8BA;;AArDsD;;AAwDxDO,MAAM,CAACC,OAAP,GAAiBtB,2BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nconst JavascriptModulesPlugin = require(\"../javascript/JavascriptModulesPlugin\");\nconst { getUndoPath } = require(\"../util/identifier\");\n\nclass AutoPublicPathRuntimeModule extends RuntimeModule {\n\tconstructor() {\n\t\tsuper(\"publicPath\", RuntimeModule.STAGE_BASIC);\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst { compilation } = this;\n\t\tconst { scriptType, importMetaName, path } = compilation.outputOptions;\n\t\tconst chunkName = compilation.getPath(\n\t\t\tJavascriptModulesPlugin.getChunkFilenameTemplate(\n\t\t\t\tthis.chunk,\n\t\t\t\tcompilation.outputOptions\n\t\t\t),\n\t\t\t{\n\t\t\t\tchunk: this.chunk,\n\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t}\n\t\t);\n\t\tconst undoPath = getUndoPath(chunkName, path, false);\n\n\t\treturn Template.asString([\n\t\t\t\"var scriptUrl;\",\n\t\t\tscriptType === \"module\"\n\t\t\t\t? `if (typeof ${importMetaName}.url === \"string\") scriptUrl = ${importMetaName}.url`\n\t\t\t\t: Template.asString([\n\t\t\t\t\t\t`if (${RuntimeGlobals.global}.importScripts) scriptUrl = ${RuntimeGlobals.global}.location + \"\";`,\n\t\t\t\t\t\t`var document = ${RuntimeGlobals.global}.document;`,\n\t\t\t\t\t\t\"if (!scriptUrl && document) {\",\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t`if (document.currentScript)`,\n\t\t\t\t\t\t\tTemplate.indent(`scriptUrl = document.currentScript.src`),\n\t\t\t\t\t\t\t\"if (!scriptUrl) {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t'var scripts = document.getElementsByTagName(\"script\");',\n\t\t\t\t\t\t\t\t\"if(scripts.length) scriptUrl = scripts[scripts.length - 1].src\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t  ]),\n\t\t\t\"// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\",\n\t\t\t'// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.',\n\t\t\t'if (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");',\n\t\t\t'scriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\\\?.*$/, \"\").replace(/\\\\/[^\\\\/]+$/, \"/\");',\n\t\t\t!undoPath\n\t\t\t\t? `${RuntimeGlobals.publicPath} = scriptUrl;`\n\t\t\t\t: `${RuntimeGlobals.publicPath} = scriptUrl + ${JSON.stringify(\n\t\t\t\t\t\tundoPath\n\t\t\t\t  )};`\n\t\t]);\n\t}\n}\n\nmodule.exports = AutoPublicPathRuntimeModule;\n"]},"metadata":{},"sourceType":"script"}