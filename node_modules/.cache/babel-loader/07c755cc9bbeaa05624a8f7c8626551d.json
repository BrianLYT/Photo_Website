{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nclass NullPrototypeObjectSerializer {\n  serialize(obj, _ref) {\n    let {\n      write\n    } = _ref;\n    const keys = Object.keys(obj);\n\n    for (const key of keys) {\n      write(key);\n    }\n\n    write(null);\n\n    for (const key of keys) {\n      write(obj[key]);\n    }\n  }\n\n  deserialize(_ref2) {\n    let {\n      read\n    } = _ref2;\n    const obj = Object.create(null);\n    const keys = [];\n    let key = read();\n\n    while (key !== null) {\n      keys.push(key);\n      key = read();\n    }\n\n    for (const key of keys) {\n      obj[key] = read();\n    }\n\n    return obj;\n  }\n\n}\n\nmodule.exports = NullPrototypeObjectSerializer;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/serialization/NullPrototypeObjectSerializer.js"],"names":["NullPrototypeObjectSerializer","serialize","obj","write","keys","Object","key","deserialize","read","create","push","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA;;AAEA,MAAMA,6BAAN,CAAoC;AACnCC,EAAAA,SAAS,CAACC,GAAD,QAAiB;AAAA,QAAX;AAAEC,MAAAA;AAAF,KAAW;AACzB,UAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,GAAZ,CAAb;;AACA,SAAK,MAAMI,GAAX,IAAkBF,IAAlB,EAAwB;AACvBD,MAAAA,KAAK,CAACG,GAAD,CAAL;AACA;;AACDH,IAAAA,KAAK,CAAC,IAAD,CAAL;;AACA,SAAK,MAAMG,GAAX,IAAkBF,IAAlB,EAAwB;AACvBD,MAAAA,KAAK,CAACD,GAAG,CAACI,GAAD,CAAJ,CAAL;AACA;AACD;;AACDC,EAAAA,WAAW,QAAW;AAAA,QAAV;AAAEC,MAAAA;AAAF,KAAU;AACrB,UAAMN,GAAG,GAAGG,MAAM,CAACI,MAAP,CAAc,IAAd,CAAZ;AACA,UAAML,IAAI,GAAG,EAAb;AACA,QAAIE,GAAG,GAAGE,IAAI,EAAd;;AACA,WAAOF,GAAG,KAAK,IAAf,EAAqB;AACpBF,MAAAA,IAAI,CAACM,IAAL,CAAUJ,GAAV;AACAA,MAAAA,GAAG,GAAGE,IAAI,EAAV;AACA;;AACD,SAAK,MAAMF,GAAX,IAAkBF,IAAlB,EAAwB;AACvBF,MAAAA,GAAG,CAACI,GAAD,CAAH,GAAWE,IAAI,EAAf;AACA;;AACD,WAAON,GAAP;AACA;;AAvBkC;;AA0BpCS,MAAM,CAACC,OAAP,GAAiBZ,6BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nclass NullPrototypeObjectSerializer {\n\tserialize(obj, { write }) {\n\t\tconst keys = Object.keys(obj);\n\t\tfor (const key of keys) {\n\t\t\twrite(key);\n\t\t}\n\t\twrite(null);\n\t\tfor (const key of keys) {\n\t\t\twrite(obj[key]);\n\t\t}\n\t}\n\tdeserialize({ read }) {\n\t\tconst obj = Object.create(null);\n\t\tconst keys = [];\n\t\tlet key = read();\n\t\twhile (key !== null) {\n\t\t\tkeys.push(key);\n\t\t\tkey = read();\n\t\t}\n\t\tfor (const key of keys) {\n\t\t\tobj[key] = read();\n\t\t}\n\t\treturn obj;\n\t}\n}\n\nmodule.exports = NullPrototypeObjectSerializer;\n"]},"metadata":{},"sourceType":"script"}