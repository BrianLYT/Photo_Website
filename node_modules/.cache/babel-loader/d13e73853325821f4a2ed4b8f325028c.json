{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class NextPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"NextPlugin\", (request, resolveContext, callback) => {\n      resolver.doResolve(target, request, null, resolveContext, callback);\n    });\n  }\n\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/enhanced-resolve/lib/NextPlugin.js"],"names":["module","exports","NextPlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,UAAN,CAAiB;AACjC;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACAE,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,YAFX,EAEyB,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AAC9DN,MAAAA,QAAQ,CAACO,SAAT,CAAmBT,MAAnB,EAA2BM,OAA3B,EAAoC,IAApC,EAA0CC,cAA1C,EAA0DC,QAA1D;AACA,KAJF;AAKA;;AArBgC,CAAlC","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class NextPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"NextPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tresolver.doResolve(target, request, null, resolveContext, callback);\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}