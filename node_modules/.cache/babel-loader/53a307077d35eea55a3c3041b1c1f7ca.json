{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n/** @typedef {import(\"./fs\").InputFileSystem} InputFileSystem */\n\n/** @typedef {(error: Error|null, result?: Buffer) => void} ErrorFirstCallback */\n\nconst backSlashCharCode = \"\\\\\".charCodeAt(0);\nconst slashCharCode = \"/\".charCodeAt(0);\nconst aLowerCaseCharCode = \"a\".charCodeAt(0);\nconst zLowerCaseCharCode = \"z\".charCodeAt(0);\nconst aUpperCaseCharCode = \"A\".charCodeAt(0);\nconst zUpperCaseCharCode = \"Z\".charCodeAt(0);\n\nconst _0CharCode = \"0\".charCodeAt(0);\n\nconst _9CharCode = \"9\".charCodeAt(0);\n\nconst plusCharCode = \"+\".charCodeAt(0);\nconst hyphenCharCode = \"-\".charCodeAt(0);\nconst colonCharCode = \":\".charCodeAt(0);\nconst hashCharCode = \"#\".charCodeAt(0);\nconst queryCharCode = \"?\".charCodeAt(0);\n/**\n * Get scheme if specifier is an absolute URL specifier\n * e.g. Absolute specifiers like 'file:///user/webpack/index.js'\n * https://tools.ietf.org/html/rfc3986#section-3.1\n * @param {string} specifier specifier\n * @returns {string|undefined} scheme if absolute URL specifier provided\n */\n\nfunction getScheme(specifier) {\n  const start = specifier.charCodeAt(0); // First char maybe only a letter\n\n  if ((start < aLowerCaseCharCode || start > zLowerCaseCharCode) && (start < aUpperCaseCharCode || start > zUpperCaseCharCode)) {\n    return undefined;\n  }\n\n  let i = 1;\n  let ch = specifier.charCodeAt(i);\n\n  while (ch >= aLowerCaseCharCode && ch <= zLowerCaseCharCode || ch >= aUpperCaseCharCode && ch <= zUpperCaseCharCode || ch >= _0CharCode && ch <= _9CharCode || ch === plusCharCode || ch === hyphenCharCode) {\n    if (++i === specifier.length) return undefined;\n    ch = specifier.charCodeAt(i);\n  } // Scheme must end with colon\n\n\n  if (ch !== colonCharCode) return undefined; // Check for Windows absolute path\n  // https://url.spec.whatwg.org/#url-miscellaneous\n\n  if (i === 1) {\n    const nextChar = i + 1 < specifier.length ? specifier.charCodeAt(i + 1) : 0;\n\n    if (nextChar === 0 || nextChar === backSlashCharCode || nextChar === slashCharCode || nextChar === hashCharCode || nextChar === queryCharCode) {\n      return undefined;\n    }\n  }\n\n  return specifier.slice(0, i).toLowerCase();\n}\n/**\n * @param {string} specifier specifier\n * @returns {string|null} protocol if absolute URL specifier provided\n */\n\n\nfunction getProtocol(specifier) {\n  const scheme = getScheme(specifier);\n  return scheme === undefined ? undefined : scheme + \":\";\n}\n\nexports.getScheme = getScheme;\nexports.getProtocol = getProtocol;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/util/URLAbsoluteSpecifier.js"],"names":["backSlashCharCode","charCodeAt","slashCharCode","aLowerCaseCharCode","zLowerCaseCharCode","aUpperCaseCharCode","zUpperCaseCharCode","_0CharCode","_9CharCode","plusCharCode","hyphenCharCode","colonCharCode","hashCharCode","queryCharCode","getScheme","specifier","start","undefined","i","ch","length","nextChar","slice","toLowerCase","getProtocol","scheme","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./fs\").InputFileSystem} InputFileSystem */\n/** @typedef {(error: Error|null, result?: Buffer) => void} ErrorFirstCallback */\n\nconst backSlashCharCode = \"\\\\\".charCodeAt(0);\nconst slashCharCode = \"/\".charCodeAt(0);\nconst aLowerCaseCharCode = \"a\".charCodeAt(0);\nconst zLowerCaseCharCode = \"z\".charCodeAt(0);\nconst aUpperCaseCharCode = \"A\".charCodeAt(0);\nconst zUpperCaseCharCode = \"Z\".charCodeAt(0);\nconst _0CharCode = \"0\".charCodeAt(0);\nconst _9CharCode = \"9\".charCodeAt(0);\nconst plusCharCode = \"+\".charCodeAt(0);\nconst hyphenCharCode = \"-\".charCodeAt(0);\nconst colonCharCode = \":\".charCodeAt(0);\nconst hashCharCode = \"#\".charCodeAt(0);\nconst queryCharCode = \"?\".charCodeAt(0);\n/**\n * Get scheme if specifier is an absolute URL specifier\n * e.g. Absolute specifiers like 'file:///user/webpack/index.js'\n * https://tools.ietf.org/html/rfc3986#section-3.1\n * @param {string} specifier specifier\n * @returns {string|undefined} scheme if absolute URL specifier provided\n */\nfunction getScheme(specifier) {\n\tconst start = specifier.charCodeAt(0);\n\n\t// First char maybe only a letter\n\tif (\n\t\t(start < aLowerCaseCharCode || start > zLowerCaseCharCode) &&\n\t\t(start < aUpperCaseCharCode || start > zUpperCaseCharCode)\n\t) {\n\t\treturn undefined;\n\t}\n\n\tlet i = 1;\n\tlet ch = specifier.charCodeAt(i);\n\n\twhile (\n\t\t(ch >= aLowerCaseCharCode && ch <= zLowerCaseCharCode) ||\n\t\t(ch >= aUpperCaseCharCode && ch <= zUpperCaseCharCode) ||\n\t\t(ch >= _0CharCode && ch <= _9CharCode) ||\n\t\tch === plusCharCode ||\n\t\tch === hyphenCharCode\n\t) {\n\t\tif (++i === specifier.length) return undefined;\n\t\tch = specifier.charCodeAt(i);\n\t}\n\n\t// Scheme must end with colon\n\tif (ch !== colonCharCode) return undefined;\n\n\t// Check for Windows absolute path\n\t// https://url.spec.whatwg.org/#url-miscellaneous\n\tif (i === 1) {\n\t\tconst nextChar = i + 1 < specifier.length ? specifier.charCodeAt(i + 1) : 0;\n\t\tif (\n\t\t\tnextChar === 0 ||\n\t\t\tnextChar === backSlashCharCode ||\n\t\t\tnextChar === slashCharCode ||\n\t\t\tnextChar === hashCharCode ||\n\t\t\tnextChar === queryCharCode\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\treturn specifier.slice(0, i).toLowerCase();\n}\n\n/**\n * @param {string} specifier specifier\n * @returns {string|null} protocol if absolute URL specifier provided\n */\nfunction getProtocol(specifier) {\n\tconst scheme = getScheme(specifier);\n\treturn scheme === undefined ? undefined : scheme + \":\";\n}\n\nexports.getScheme = getScheme;\nexports.getProtocol = getProtocol;\n"]},"metadata":{},"sourceType":"script"}