{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Compiler = require(\"./Compiler\");\n\nconst MultiCompiler = require(\"./MultiCompiler\");\n\nconst NormalModule = require(\"./NormalModule\");\n\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\nconst {\n  contextify\n} = require(\"./util/identifier\");\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").HandlerFunction} HandlerFunction */\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/ProgressPlugin.check.js\"), () => require(\"../schemas/plugins/ProgressPlugin.json\"), {\n  name: \"Progress Plugin\",\n  baseDataPath: \"options\"\n});\n\nconst median3 = (a, b, c) => {\n  return a + b + c - Math.max(a, b, c) - Math.min(a, b, c);\n};\n\nconst createDefaultHandler = (profile, logger) => {\n  /** @type {{ value: string, time: number }[]} */\n  const lastStateInfo = [];\n\n  const defaultHandler = function (percentage, msg) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (profile) {\n      if (percentage === 0) {\n        lastStateInfo.length = 0;\n      }\n\n      const fullState = [msg, ...args];\n      const state = fullState.map(s => s.replace(/\\d+\\/\\d+ /g, \"\"));\n      const now = Date.now();\n      const len = Math.max(state.length, lastStateInfo.length);\n\n      for (let i = len; i >= 0; i--) {\n        const stateItem = i < state.length ? state[i] : undefined;\n        const lastStateItem = i < lastStateInfo.length ? lastStateInfo[i] : undefined;\n\n        if (lastStateItem) {\n          if (stateItem !== lastStateItem.value) {\n            const diff = now - lastStateItem.time;\n\n            if (lastStateItem.value) {\n              let reportState = lastStateItem.value;\n\n              if (i > 0) {\n                reportState = lastStateInfo[i - 1].value + \" > \" + reportState;\n              }\n\n              const stateMsg = `${\" | \".repeat(i)}${diff} ms ${reportState}`;\n              const d = diff; // This depends on timing so we ignore it for coverage\n\n              /* istanbul ignore next */\n\n              {\n                if (d > 10000) {\n                  logger.error(stateMsg);\n                } else if (d > 1000) {\n                  logger.warn(stateMsg);\n                } else if (d > 10) {\n                  logger.info(stateMsg);\n                } else if (d > 5) {\n                  logger.log(stateMsg);\n                } else {\n                  logger.debug(stateMsg);\n                }\n              }\n            }\n\n            if (stateItem === undefined) {\n              lastStateInfo.length = i;\n            } else {\n              lastStateItem.value = stateItem;\n              lastStateItem.time = now;\n              lastStateInfo.length = i + 1;\n            }\n          }\n        } else {\n          lastStateInfo[i] = {\n            value: stateItem,\n            time: now\n          };\n        }\n      }\n    }\n\n    logger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n    if (percentage === 1 || !msg && args.length === 0) logger.status();\n  };\n\n  return defaultHandler;\n};\n/**\n * @callback ReportProgress\n * @param {number} p\n * @param {...string} [args]\n * @returns {void}\n */\n\n/** @type {WeakMap<Compiler,ReportProgress>} */\n\n\nconst progressReporters = new WeakMap();\n\nclass ProgressPlugin {\n  /**\n   * @param {Compiler} compiler the current compiler\n   * @returns {ReportProgress} a progress reporter, if any\n   */\n  static getReporter(compiler) {\n    return progressReporters.get(compiler);\n  }\n  /**\n   * @param {ProgressPluginArgument} options options\n   */\n\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof options === \"function\") {\n      options = {\n        handler: options\n      };\n    }\n\n    validate(options);\n    options = { ...ProgressPlugin.defaultOptions,\n      ...options\n    };\n    this.profile = options.profile;\n    this.handler = options.handler;\n    this.modulesCount = options.modulesCount;\n    this.dependenciesCount = options.dependenciesCount;\n    this.showEntries = options.entries;\n    this.showModules = options.modules;\n    this.showDependencies = options.dependencies;\n    this.showActiveModules = options.activeModules;\n    this.percentBy = options.percentBy;\n  }\n  /**\n   * @param {Compiler | MultiCompiler} compiler webpack compiler\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const handler = this.handler || createDefaultHandler(this.profile, compiler.getInfrastructureLogger(\"webpack.Progress\"));\n\n    if (compiler instanceof MultiCompiler) {\n      this._applyOnMultiCompiler(compiler, handler);\n    } else if (compiler instanceof Compiler) {\n      this._applyOnCompiler(compiler, handler);\n    }\n  }\n  /**\n   * @param {MultiCompiler} compiler webpack multi-compiler\n   * @param {HandlerFunction} handler function that executes for every progress step\n   * @returns {void}\n   */\n\n\n  _applyOnMultiCompiler(compiler, handler) {\n    const states = compiler.compilers.map(() =>\n    /** @type {[number, ...string[]]} */\n    [0]);\n    compiler.compilers.forEach((compiler, idx) => {\n      new ProgressPlugin(function (p, msg) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n\n        states[idx] = [p, msg, ...args];\n        let sum = 0;\n\n        for (const [p] of states) sum += p;\n\n        handler(sum / states.length, `[${idx}] ${msg}`, ...args);\n      }).apply(compiler);\n    });\n  }\n  /**\n   * @param {Compiler} compiler webpack compiler\n   * @param {HandlerFunction} handler function that executes for every progress step\n   * @returns {void}\n   */\n\n\n  _applyOnCompiler(compiler, handler) {\n    const showEntries = this.showEntries;\n    const showModules = this.showModules;\n    const showDependencies = this.showDependencies;\n    const showActiveModules = this.showActiveModules;\n    let lastActiveModule = \"\";\n    let currentLoader = \"\";\n    let lastModulesCount = 0;\n    let lastDependenciesCount = 0;\n    let lastEntriesCount = 0;\n    let modulesCount = 0;\n    let dependenciesCount = 0;\n    let entriesCount = 1;\n    let doneModules = 0;\n    let doneDependencies = 0;\n    let doneEntries = 0;\n    const activeModules = new Set();\n    let lastUpdate = 0;\n\n    const updateThrottled = () => {\n      if (lastUpdate + 500 < Date.now()) update();\n    };\n\n    const update = () => {\n      /** @type {string[]} */\n      const items = [];\n      const percentByModules = doneModules / Math.max(lastModulesCount || this.modulesCount || 1, modulesCount);\n      const percentByEntries = doneEntries / Math.max(lastEntriesCount || this.dependenciesCount || 1, entriesCount);\n      const percentByDependencies = doneDependencies / Math.max(lastDependenciesCount || 1, dependenciesCount);\n      let percentageFactor;\n\n      switch (this.percentBy) {\n        case \"entries\":\n          percentageFactor = percentByEntries;\n          break;\n\n        case \"dependencies\":\n          percentageFactor = percentByDependencies;\n          break;\n\n        case \"modules\":\n          percentageFactor = percentByModules;\n          break;\n\n        default:\n          percentageFactor = median3(percentByModules, percentByEntries, percentByDependencies);\n      }\n\n      const percentage = 0.1 + percentageFactor * 0.55;\n\n      if (currentLoader) {\n        items.push(`import loader ${contextify(compiler.context, currentLoader, compiler.root)}`);\n      } else {\n        const statItems = [];\n\n        if (showEntries) {\n          statItems.push(`${doneEntries}/${entriesCount} entries`);\n        }\n\n        if (showDependencies) {\n          statItems.push(`${doneDependencies}/${dependenciesCount} dependencies`);\n        }\n\n        if (showModules) {\n          statItems.push(`${doneModules}/${modulesCount} modules`);\n        }\n\n        if (showActiveModules) {\n          statItems.push(`${activeModules.size} active`);\n        }\n\n        if (statItems.length > 0) {\n          items.push(statItems.join(\" \"));\n        }\n\n        if (showActiveModules) {\n          items.push(lastActiveModule);\n        }\n      }\n\n      handler(percentage, \"building\", ...items);\n      lastUpdate = Date.now();\n    };\n\n    const factorizeAdd = () => {\n      dependenciesCount++;\n      if (dependenciesCount < 50 || dependenciesCount % 100 === 0) updateThrottled();\n    };\n\n    const factorizeDone = () => {\n      doneDependencies++;\n      if (doneDependencies < 50 || doneDependencies % 100 === 0) updateThrottled();\n    };\n\n    const moduleAdd = () => {\n      modulesCount++;\n      if (modulesCount < 50 || modulesCount % 100 === 0) updateThrottled();\n    }; // only used when showActiveModules is set\n\n\n    const moduleBuild = module => {\n      const ident = module.identifier();\n\n      if (ident) {\n        activeModules.add(ident);\n        lastActiveModule = ident;\n        update();\n      }\n    };\n\n    const entryAdd = (entry, options) => {\n      entriesCount++;\n      if (entriesCount < 5 || entriesCount % 10 === 0) updateThrottled();\n    };\n\n    const moduleDone = module => {\n      doneModules++;\n\n      if (showActiveModules) {\n        const ident = module.identifier();\n\n        if (ident) {\n          activeModules.delete(ident);\n\n          if (lastActiveModule === ident) {\n            lastActiveModule = \"\";\n\n            for (const m of activeModules) {\n              lastActiveModule = m;\n            }\n\n            update();\n            return;\n          }\n        }\n      }\n\n      if (doneModules < 50 || doneModules % 100 === 0) updateThrottled();\n    };\n\n    const entryDone = (entry, options) => {\n      doneEntries++;\n      update();\n    };\n\n    const cache = compiler.getCache(\"ProgressPlugin\").getItemCache(\"counts\", null);\n    let cacheGetPromise;\n    compiler.hooks.beforeCompile.tap(\"ProgressPlugin\", () => {\n      if (!cacheGetPromise) {\n        cacheGetPromise = cache.getPromise().then(data => {\n          if (data) {\n            lastModulesCount = lastModulesCount || data.modulesCount;\n            lastDependenciesCount = lastDependenciesCount || data.dependenciesCount;\n          }\n\n          return data;\n        }, err => {// Ignore error\n        });\n      }\n    });\n    compiler.hooks.afterCompile.tapPromise(\"ProgressPlugin\", compilation => {\n      if (compilation.compiler.isChild()) return Promise.resolve();\n      return cacheGetPromise.then(async oldData => {\n        if (!oldData || oldData.modulesCount !== modulesCount || oldData.dependenciesCount !== dependenciesCount) {\n          await cache.storePromise({\n            modulesCount,\n            dependenciesCount\n          });\n        }\n      });\n    });\n    compiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n      if (compilation.compiler.isChild()) return;\n      lastModulesCount = modulesCount;\n      lastEntriesCount = entriesCount;\n      lastDependenciesCount = dependenciesCount;\n      modulesCount = dependenciesCount = entriesCount = 0;\n      doneModules = doneDependencies = doneEntries = 0;\n      compilation.factorizeQueue.hooks.added.tap(\"ProgressPlugin\", factorizeAdd);\n      compilation.factorizeQueue.hooks.result.tap(\"ProgressPlugin\", factorizeDone);\n      compilation.addModuleQueue.hooks.added.tap(\"ProgressPlugin\", moduleAdd);\n      compilation.processDependenciesQueue.hooks.result.tap(\"ProgressPlugin\", moduleDone);\n\n      if (showActiveModules) {\n        compilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleBuild);\n      }\n\n      compilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n      compilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n      compilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone); // avoid dynamic require if bundled with webpack\n      // @ts-expect-error\n\n      if (typeof __webpack_require__ !== \"function\") {\n        const requiredLoaders = new Set();\n        NormalModule.getCompilationHooks(compilation).beforeLoaders.tap(\"ProgressPlugin\", loaders => {\n          for (const loader of loaders) {\n            if (loader.type !== \"module\" && !requiredLoaders.has(loader.loader)) {\n              requiredLoaders.add(loader.loader);\n              currentLoader = loader.loader;\n              update();\n\n              require(loader.loader);\n            }\n          }\n\n          if (currentLoader) {\n            currentLoader = \"\";\n            update();\n          }\n        });\n      }\n\n      const hooks = {\n        finishModules: \"finish module graph\",\n        seal: \"plugins\",\n        optimizeDependencies: \"dependencies optimization\",\n        afterOptimizeDependencies: \"after dependencies optimization\",\n        beforeChunks: \"chunk graph\",\n        afterChunks: \"after chunk graph\",\n        optimize: \"optimizing\",\n        optimizeModules: \"module optimization\",\n        afterOptimizeModules: \"after module optimization\",\n        optimizeChunks: \"chunk optimization\",\n        afterOptimizeChunks: \"after chunk optimization\",\n        optimizeTree: \"module and chunk tree optimization\",\n        afterOptimizeTree: \"after module and chunk tree optimization\",\n        optimizeChunkModules: \"chunk modules optimization\",\n        afterOptimizeChunkModules: \"after chunk modules optimization\",\n        reviveModules: \"module reviving\",\n        beforeModuleIds: \"before module ids\",\n        moduleIds: \"module ids\",\n        optimizeModuleIds: \"module id optimization\",\n        afterOptimizeModuleIds: \"module id optimization\",\n        reviveChunks: \"chunk reviving\",\n        beforeChunkIds: \"before chunk ids\",\n        chunkIds: \"chunk ids\",\n        optimizeChunkIds: \"chunk id optimization\",\n        afterOptimizeChunkIds: \"after chunk id optimization\",\n        recordModules: \"record modules\",\n        recordChunks: \"record chunks\",\n        beforeModuleHash: \"module hashing\",\n        beforeCodeGeneration: \"code generation\",\n        beforeRuntimeRequirements: \"runtime requirements\",\n        beforeHash: \"hashing\",\n        afterHash: \"after hashing\",\n        recordHash: \"record hash\",\n        beforeModuleAssets: \"module assets processing\",\n        beforeChunkAssets: \"chunk assets processing\",\n        processAssets: \"asset processing\",\n        afterProcessAssets: \"after asset optimization\",\n        record: \"recording\",\n        afterSeal: \"after seal\"\n      };\n      const numberOfHooks = Object.keys(hooks).length;\n      Object.keys(hooks).forEach((name, idx) => {\n        const title = hooks[name];\n        const percentage = idx / numberOfHooks * 0.25 + 0.7;\n        compilation.hooks[name].intercept({\n          name: \"ProgressPlugin\",\n\n          call() {\n            handler(percentage, \"sealing\", title);\n          },\n\n          done() {\n            progressReporters.set(compiler, undefined);\n            handler(percentage, \"sealing\", title);\n          },\n\n          result() {\n            handler(percentage, \"sealing\", title);\n          },\n\n          error() {\n            handler(percentage, \"sealing\", title);\n          },\n\n          tap(tap) {\n            // p is percentage from 0 to 1\n            // args is any number of messages in a hierarchical matter\n            progressReporters.set(compilation.compiler, function (p) {\n              for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                args[_key3 - 1] = arguments[_key3];\n              }\n\n              handler(percentage, \"sealing\", title, tap.name, ...args);\n            });\n            handler(percentage, \"sealing\", title, tap.name);\n          }\n\n        });\n      });\n    });\n    compiler.hooks.make.intercept({\n      name: \"ProgressPlugin\",\n\n      call() {\n        handler(0.1, \"building\");\n      },\n\n      done() {\n        handler(0.65, \"building\");\n      }\n\n    });\n\n    const interceptHook = (hook, progress, category, name) => {\n      hook.intercept({\n        name: \"ProgressPlugin\",\n\n        call() {\n          handler(progress, category, name);\n        },\n\n        done() {\n          progressReporters.set(compiler, undefined);\n          handler(progress, category, name);\n        },\n\n        result() {\n          handler(progress, category, name);\n        },\n\n        error() {\n          handler(progress, category, name);\n        },\n\n        tap(tap) {\n          progressReporters.set(compiler, function (p) {\n            for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n              args[_key4 - 1] = arguments[_key4];\n            }\n\n            handler(progress, category, name, tap.name, ...args);\n          });\n          handler(progress, category, name, tap.name);\n        }\n\n      });\n    };\n\n    compiler.cache.hooks.endIdle.intercept({\n      name: \"ProgressPlugin\",\n\n      call() {\n        handler(0, \"\");\n      }\n\n    });\n    interceptHook(compiler.cache.hooks.endIdle, 0.01, \"cache\", \"end idle\");\n    compiler.hooks.beforeRun.intercept({\n      name: \"ProgressPlugin\",\n\n      call() {\n        handler(0, \"\");\n      }\n\n    });\n    interceptHook(compiler.hooks.beforeRun, 0.01, \"setup\", \"before run\");\n    interceptHook(compiler.hooks.run, 0.02, \"setup\", \"run\");\n    interceptHook(compiler.hooks.watchRun, 0.03, \"setup\", \"watch run\");\n    interceptHook(compiler.hooks.normalModuleFactory, 0.04, \"setup\", \"normal module factory\");\n    interceptHook(compiler.hooks.contextModuleFactory, 0.05, \"setup\", \"context module factory\");\n    interceptHook(compiler.hooks.beforeCompile, 0.06, \"setup\", \"before compile\");\n    interceptHook(compiler.hooks.compile, 0.07, \"setup\", \"compile\");\n    interceptHook(compiler.hooks.thisCompilation, 0.08, \"setup\", \"compilation\");\n    interceptHook(compiler.hooks.compilation, 0.09, \"setup\", \"compilation\");\n    interceptHook(compiler.hooks.finishMake, 0.69, \"building\", \"finish\");\n    interceptHook(compiler.hooks.emit, 0.95, \"emitting\", \"emit\");\n    interceptHook(compiler.hooks.afterEmit, 0.98, \"emitting\", \"after emit\");\n    interceptHook(compiler.hooks.done, 0.99, \"done\", \"plugins\");\n    compiler.hooks.done.intercept({\n      name: \"ProgressPlugin\",\n\n      done() {\n        handler(0.99, \"\");\n      }\n\n    });\n    interceptHook(compiler.cache.hooks.storeBuildDependencies, 0.99, \"cache\", \"store build dependencies\");\n    interceptHook(compiler.cache.hooks.shutdown, 0.99, \"cache\", \"shutdown\");\n    interceptHook(compiler.cache.hooks.beginIdle, 0.99, \"cache\", \"begin idle\");\n    interceptHook(compiler.hooks.watchClose, 0.99, \"end\", \"closing watch compilation\");\n    compiler.cache.hooks.beginIdle.intercept({\n      name: \"ProgressPlugin\",\n\n      done() {\n        handler(1, \"\");\n      }\n\n    });\n    compiler.cache.hooks.shutdown.intercept({\n      name: \"ProgressPlugin\",\n\n      done() {\n        handler(1, \"\");\n      }\n\n    });\n  }\n\n}\n\nProgressPlugin.defaultOptions = {\n  profile: false,\n  modulesCount: 5000,\n  dependenciesCount: 10000,\n  modules: true,\n  dependencies: true,\n  activeModules: false,\n  entries: true\n};\nmodule.exports = ProgressPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ProgressPlugin.js"],"names":["Compiler","require","MultiCompiler","NormalModule","createSchemaValidation","contextify","validate","name","baseDataPath","median3","a","b","c","Math","max","min","createDefaultHandler","profile","logger","lastStateInfo","defaultHandler","percentage","msg","args","length","fullState","state","map","s","replace","now","Date","len","i","stateItem","undefined","lastStateItem","value","diff","time","reportState","stateMsg","repeat","d","error","warn","info","log","debug","status","floor","progressReporters","WeakMap","ProgressPlugin","getReporter","compiler","get","constructor","options","handler","defaultOptions","modulesCount","dependenciesCount","showEntries","entries","showModules","modules","showDependencies","dependencies","showActiveModules","activeModules","percentBy","apply","getInfrastructureLogger","_applyOnMultiCompiler","_applyOnCompiler","states","compilers","forEach","idx","p","sum","lastActiveModule","currentLoader","lastModulesCount","lastDependenciesCount","lastEntriesCount","entriesCount","doneModules","doneDependencies","doneEntries","Set","lastUpdate","updateThrottled","update","items","percentByModules","percentByEntries","percentByDependencies","percentageFactor","push","context","root","statItems","size","join","factorizeAdd","factorizeDone","moduleAdd","moduleBuild","module","ident","identifier","add","entryAdd","entry","moduleDone","delete","m","entryDone","cache","getCache","getItemCache","cacheGetPromise","hooks","beforeCompile","tap","getPromise","then","data","err","afterCompile","tapPromise","compilation","isChild","Promise","resolve","oldData","storePromise","factorizeQueue","added","result","addModuleQueue","processDependenciesQueue","buildModule","addEntry","failedEntry","succeedEntry","__webpack_require__","requiredLoaders","getCompilationHooks","beforeLoaders","loaders","loader","type","has","finishModules","seal","optimizeDependencies","afterOptimizeDependencies","beforeChunks","afterChunks","optimize","optimizeModules","afterOptimizeModules","optimizeChunks","afterOptimizeChunks","optimizeTree","afterOptimizeTree","optimizeChunkModules","afterOptimizeChunkModules","reviveModules","beforeModuleIds","moduleIds","optimizeModuleIds","afterOptimizeModuleIds","reviveChunks","beforeChunkIds","chunkIds","optimizeChunkIds","afterOptimizeChunkIds","recordModules","recordChunks","beforeModuleHash","beforeCodeGeneration","beforeRuntimeRequirements","beforeHash","afterHash","recordHash","beforeModuleAssets","beforeChunkAssets","processAssets","afterProcessAssets","record","afterSeal","numberOfHooks","Object","keys","title","intercept","call","done","set","make","interceptHook","hook","progress","category","endIdle","beforeRun","run","watchRun","normalModuleFactory","contextModuleFactory","compile","thisCompilation","finishMake","emit","afterEmit","storeBuildDependencies","shutdown","beginIdle","watchClose","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Compiler = require(\"./Compiler\");\nconst MultiCompiler = require(\"./MultiCompiler\");\nconst NormalModule = require(\"./NormalModule\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst { contextify } = require(\"./util/identifier\");\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").HandlerFunction} HandlerFunction */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/ProgressPlugin.check.js\"),\n\t() => require(\"../schemas/plugins/ProgressPlugin.json\"),\n\t{\n\t\tname: \"Progress Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\nconst median3 = (a, b, c) => {\n\treturn a + b + c - Math.max(a, b, c) - Math.min(a, b, c);\n};\n\nconst createDefaultHandler = (profile, logger) => {\n\t/** @type {{ value: string, time: number }[]} */\n\tconst lastStateInfo = [];\n\n\tconst defaultHandler = (percentage, msg, ...args) => {\n\t\tif (profile) {\n\t\t\tif (percentage === 0) {\n\t\t\t\tlastStateInfo.length = 0;\n\t\t\t}\n\t\t\tconst fullState = [msg, ...args];\n\t\t\tconst state = fullState.map(s => s.replace(/\\d+\\/\\d+ /g, \"\"));\n\t\t\tconst now = Date.now();\n\t\t\tconst len = Math.max(state.length, lastStateInfo.length);\n\t\t\tfor (let i = len; i >= 0; i--) {\n\t\t\t\tconst stateItem = i < state.length ? state[i] : undefined;\n\t\t\t\tconst lastStateItem =\n\t\t\t\t\ti < lastStateInfo.length ? lastStateInfo[i] : undefined;\n\t\t\t\tif (lastStateItem) {\n\t\t\t\t\tif (stateItem !== lastStateItem.value) {\n\t\t\t\t\t\tconst diff = now - lastStateItem.time;\n\t\t\t\t\t\tif (lastStateItem.value) {\n\t\t\t\t\t\t\tlet reportState = lastStateItem.value;\n\t\t\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\t\t\treportState = lastStateInfo[i - 1].value + \" > \" + reportState;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst stateMsg = `${\" | \".repeat(i)}${diff} ms ${reportState}`;\n\t\t\t\t\t\t\tconst d = diff;\n\t\t\t\t\t\t\t// This depends on timing so we ignore it for coverage\n\t\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (d > 10000) {\n\t\t\t\t\t\t\t\t\tlogger.error(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 1000) {\n\t\t\t\t\t\t\t\t\tlogger.warn(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 10) {\n\t\t\t\t\t\t\t\t\tlogger.info(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 5) {\n\t\t\t\t\t\t\t\t\tlogger.log(stateMsg);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlogger.debug(stateMsg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (stateItem === undefined) {\n\t\t\t\t\t\t\tlastStateInfo.length = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlastStateItem.value = stateItem;\n\t\t\t\t\t\t\tlastStateItem.time = now;\n\t\t\t\t\t\t\tlastStateInfo.length = i + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlastStateInfo[i] = {\n\t\t\t\t\t\tvalue: stateItem,\n\t\t\t\t\t\ttime: now\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlogger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n\t\tif (percentage === 1 || (!msg && args.length === 0)) logger.status();\n\t};\n\n\treturn defaultHandler;\n};\n\n/**\n * @callback ReportProgress\n * @param {number} p\n * @param {...string} [args]\n * @returns {void}\n */\n\n/** @type {WeakMap<Compiler,ReportProgress>} */\nconst progressReporters = new WeakMap();\n\nclass ProgressPlugin {\n\t/**\n\t * @param {Compiler} compiler the current compiler\n\t * @returns {ReportProgress} a progress reporter, if any\n\t */\n\tstatic getReporter(compiler) {\n\t\treturn progressReporters.get(compiler);\n\t}\n\n\t/**\n\t * @param {ProgressPluginArgument} options options\n\t */\n\tconstructor(options = {}) {\n\t\tif (typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\thandler: options\n\t\t\t};\n\t\t}\n\n\t\tvalidate(options);\n\t\toptions = { ...ProgressPlugin.defaultOptions, ...options };\n\n\t\tthis.profile = options.profile;\n\t\tthis.handler = options.handler;\n\t\tthis.modulesCount = options.modulesCount;\n\t\tthis.dependenciesCount = options.dependenciesCount;\n\t\tthis.showEntries = options.entries;\n\t\tthis.showModules = options.modules;\n\t\tthis.showDependencies = options.dependencies;\n\t\tthis.showActiveModules = options.activeModules;\n\t\tthis.percentBy = options.percentBy;\n\t}\n\n\t/**\n\t * @param {Compiler | MultiCompiler} compiler webpack compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst handler =\n\t\t\tthis.handler ||\n\t\t\tcreateDefaultHandler(\n\t\t\t\tthis.profile,\n\t\t\t\tcompiler.getInfrastructureLogger(\"webpack.Progress\")\n\t\t\t);\n\t\tif (compiler instanceof MultiCompiler) {\n\t\t\tthis._applyOnMultiCompiler(compiler, handler);\n\t\t} else if (compiler instanceof Compiler) {\n\t\t\tthis._applyOnCompiler(compiler, handler);\n\t\t}\n\t}\n\n\t/**\n\t * @param {MultiCompiler} compiler webpack multi-compiler\n\t * @param {HandlerFunction} handler function that executes for every progress step\n\t * @returns {void}\n\t */\n\t_applyOnMultiCompiler(compiler, handler) {\n\t\tconst states = compiler.compilers.map(\n\t\t\t() => /** @type {[number, ...string[]]} */ ([0])\n\t\t);\n\t\tcompiler.compilers.forEach((compiler, idx) => {\n\t\t\tnew ProgressPlugin((p, msg, ...args) => {\n\t\t\t\tstates[idx] = [p, msg, ...args];\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor (const [p] of states) sum += p;\n\t\t\t\thandler(sum / states.length, `[${idx}] ${msg}`, ...args);\n\t\t\t}).apply(compiler);\n\t\t});\n\t}\n\n\t/**\n\t * @param {Compiler} compiler webpack compiler\n\t * @param {HandlerFunction} handler function that executes for every progress step\n\t * @returns {void}\n\t */\n\t_applyOnCompiler(compiler, handler) {\n\t\tconst showEntries = this.showEntries;\n\t\tconst showModules = this.showModules;\n\t\tconst showDependencies = this.showDependencies;\n\t\tconst showActiveModules = this.showActiveModules;\n\t\tlet lastActiveModule = \"\";\n\t\tlet currentLoader = \"\";\n\t\tlet lastModulesCount = 0;\n\t\tlet lastDependenciesCount = 0;\n\t\tlet lastEntriesCount = 0;\n\t\tlet modulesCount = 0;\n\t\tlet dependenciesCount = 0;\n\t\tlet entriesCount = 1;\n\t\tlet doneModules = 0;\n\t\tlet doneDependencies = 0;\n\t\tlet doneEntries = 0;\n\t\tconst activeModules = new Set();\n\t\tlet lastUpdate = 0;\n\n\t\tconst updateThrottled = () => {\n\t\t\tif (lastUpdate + 500 < Date.now()) update();\n\t\t};\n\n\t\tconst update = () => {\n\t\t\t/** @type {string[]} */\n\t\t\tconst items = [];\n\t\t\tconst percentByModules =\n\t\t\t\tdoneModules /\n\t\t\t\tMath.max(lastModulesCount || this.modulesCount || 1, modulesCount);\n\t\t\tconst percentByEntries =\n\t\t\t\tdoneEntries /\n\t\t\t\tMath.max(lastEntriesCount || this.dependenciesCount || 1, entriesCount);\n\t\t\tconst percentByDependencies =\n\t\t\t\tdoneDependencies /\n\t\t\t\tMath.max(lastDependenciesCount || 1, dependenciesCount);\n\t\t\tlet percentageFactor;\n\n\t\t\tswitch (this.percentBy) {\n\t\t\t\tcase \"entries\":\n\t\t\t\t\tpercentageFactor = percentByEntries;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"dependencies\":\n\t\t\t\t\tpercentageFactor = percentByDependencies;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"modules\":\n\t\t\t\t\tpercentageFactor = percentByModules;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tpercentageFactor = median3(\n\t\t\t\t\t\tpercentByModules,\n\t\t\t\t\t\tpercentByEntries,\n\t\t\t\t\t\tpercentByDependencies\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst percentage = 0.1 + percentageFactor * 0.55;\n\n\t\t\tif (currentLoader) {\n\t\t\t\titems.push(\n\t\t\t\t\t`import loader ${contextify(\n\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\tcurrentLoader,\n\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t)}`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst statItems = [];\n\t\t\t\tif (showEntries) {\n\t\t\t\t\tstatItems.push(`${doneEntries}/${entriesCount} entries`);\n\t\t\t\t}\n\t\t\t\tif (showDependencies) {\n\t\t\t\t\tstatItems.push(\n\t\t\t\t\t\t`${doneDependencies}/${dependenciesCount} dependencies`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (showModules) {\n\t\t\t\t\tstatItems.push(`${doneModules}/${modulesCount} modules`);\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tstatItems.push(`${activeModules.size} active`);\n\t\t\t\t}\n\t\t\t\tif (statItems.length > 0) {\n\t\t\t\t\titems.push(statItems.join(\" \"));\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\titems.push(lastActiveModule);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandler(percentage, \"building\", ...items);\n\t\t\tlastUpdate = Date.now();\n\t\t};\n\n\t\tconst factorizeAdd = () => {\n\t\t\tdependenciesCount++;\n\t\t\tif (dependenciesCount < 50 || dependenciesCount % 100 === 0)\n\t\t\t\tupdateThrottled();\n\t\t};\n\n\t\tconst factorizeDone = () => {\n\t\t\tdoneDependencies++;\n\t\t\tif (doneDependencies < 50 || doneDependencies % 100 === 0)\n\t\t\t\tupdateThrottled();\n\t\t};\n\n\t\tconst moduleAdd = () => {\n\t\t\tmodulesCount++;\n\t\t\tif (modulesCount < 50 || modulesCount % 100 === 0) updateThrottled();\n\t\t};\n\n\t\t// only used when showActiveModules is set\n\t\tconst moduleBuild = module => {\n\t\t\tconst ident = module.identifier();\n\t\t\tif (ident) {\n\t\t\t\tactiveModules.add(ident);\n\t\t\t\tlastActiveModule = ident;\n\t\t\t\tupdate();\n\t\t\t}\n\t\t};\n\n\t\tconst entryAdd = (entry, options) => {\n\t\t\tentriesCount++;\n\t\t\tif (entriesCount < 5 || entriesCount % 10 === 0) updateThrottled();\n\t\t};\n\n\t\tconst moduleDone = module => {\n\t\t\tdoneModules++;\n\t\t\tif (showActiveModules) {\n\t\t\t\tconst ident = module.identifier();\n\t\t\t\tif (ident) {\n\t\t\t\t\tactiveModules.delete(ident);\n\t\t\t\t\tif (lastActiveModule === ident) {\n\t\t\t\t\t\tlastActiveModule = \"\";\n\t\t\t\t\t\tfor (const m of activeModules) {\n\t\t\t\t\t\t\tlastActiveModule = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (doneModules < 50 || doneModules % 100 === 0) updateThrottled();\n\t\t};\n\n\t\tconst entryDone = (entry, options) => {\n\t\t\tdoneEntries++;\n\t\t\tupdate();\n\t\t};\n\n\t\tconst cache = compiler\n\t\t\t.getCache(\"ProgressPlugin\")\n\t\t\t.getItemCache(\"counts\", null);\n\n\t\tlet cacheGetPromise;\n\n\t\tcompiler.hooks.beforeCompile.tap(\"ProgressPlugin\", () => {\n\t\t\tif (!cacheGetPromise) {\n\t\t\t\tcacheGetPromise = cache.getPromise().then(\n\t\t\t\t\tdata => {\n\t\t\t\t\t\tif (data) {\n\t\t\t\t\t\t\tlastModulesCount = lastModulesCount || data.modulesCount;\n\t\t\t\t\t\t\tlastDependenciesCount =\n\t\t\t\t\t\t\t\tlastDependenciesCount || data.dependenciesCount;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\terr => {\n\t\t\t\t\t\t// Ignore error\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tcompiler.hooks.afterCompile.tapPromise(\"ProgressPlugin\", compilation => {\n\t\t\tif (compilation.compiler.isChild()) return Promise.resolve();\n\t\t\treturn cacheGetPromise.then(async oldData => {\n\t\t\t\tif (\n\t\t\t\t\t!oldData ||\n\t\t\t\t\toldData.modulesCount !== modulesCount ||\n\t\t\t\t\toldData.dependenciesCount !== dependenciesCount\n\t\t\t\t) {\n\t\t\t\t\tawait cache.storePromise({ modulesCount, dependenciesCount });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n\t\t\tif (compilation.compiler.isChild()) return;\n\t\t\tlastModulesCount = modulesCount;\n\t\t\tlastEntriesCount = entriesCount;\n\t\t\tlastDependenciesCount = dependenciesCount;\n\t\t\tmodulesCount = dependenciesCount = entriesCount = 0;\n\t\t\tdoneModules = doneDependencies = doneEntries = 0;\n\n\t\t\tcompilation.factorizeQueue.hooks.added.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tfactorizeAdd\n\t\t\t);\n\t\t\tcompilation.factorizeQueue.hooks.result.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tfactorizeDone\n\t\t\t);\n\n\t\t\tcompilation.addModuleQueue.hooks.added.tap(\"ProgressPlugin\", moduleAdd);\n\t\t\tcompilation.processDependenciesQueue.hooks.result.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tmoduleDone\n\t\t\t);\n\n\t\t\tif (showActiveModules) {\n\t\t\t\tcompilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleBuild);\n\t\t\t}\n\n\t\t\tcompilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n\t\t\tcompilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n\t\t\tcompilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n\n\t\t\t// avoid dynamic require if bundled with webpack\n\t\t\t// @ts-expect-error\n\t\t\tif (typeof __webpack_require__ !== \"function\") {\n\t\t\t\tconst requiredLoaders = new Set();\n\t\t\t\tNormalModule.getCompilationHooks(compilation).beforeLoaders.tap(\n\t\t\t\t\t\"ProgressPlugin\",\n\t\t\t\t\tloaders => {\n\t\t\t\t\t\tfor (const loader of loaders) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tloader.type !== \"module\" &&\n\t\t\t\t\t\t\t\t!requiredLoaders.has(loader.loader)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\trequiredLoaders.add(loader.loader);\n\t\t\t\t\t\t\t\tcurrentLoader = loader.loader;\n\t\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t\t\trequire(loader.loader);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (currentLoader) {\n\t\t\t\t\t\t\tcurrentLoader = \"\";\n\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst hooks = {\n\t\t\t\tfinishModules: \"finish module graph\",\n\t\t\t\tseal: \"plugins\",\n\t\t\t\toptimizeDependencies: \"dependencies optimization\",\n\t\t\t\tafterOptimizeDependencies: \"after dependencies optimization\",\n\t\t\t\tbeforeChunks: \"chunk graph\",\n\t\t\t\tafterChunks: \"after chunk graph\",\n\t\t\t\toptimize: \"optimizing\",\n\t\t\t\toptimizeModules: \"module optimization\",\n\t\t\t\tafterOptimizeModules: \"after module optimization\",\n\t\t\t\toptimizeChunks: \"chunk optimization\",\n\t\t\t\tafterOptimizeChunks: \"after chunk optimization\",\n\t\t\t\toptimizeTree: \"module and chunk tree optimization\",\n\t\t\t\tafterOptimizeTree: \"after module and chunk tree optimization\",\n\t\t\t\toptimizeChunkModules: \"chunk modules optimization\",\n\t\t\t\tafterOptimizeChunkModules: \"after chunk modules optimization\",\n\t\t\t\treviveModules: \"module reviving\",\n\t\t\t\tbeforeModuleIds: \"before module ids\",\n\t\t\t\tmoduleIds: \"module ids\",\n\t\t\t\toptimizeModuleIds: \"module id optimization\",\n\t\t\t\tafterOptimizeModuleIds: \"module id optimization\",\n\t\t\t\treviveChunks: \"chunk reviving\",\n\t\t\t\tbeforeChunkIds: \"before chunk ids\",\n\t\t\t\tchunkIds: \"chunk ids\",\n\t\t\t\toptimizeChunkIds: \"chunk id optimization\",\n\t\t\t\tafterOptimizeChunkIds: \"after chunk id optimization\",\n\t\t\t\trecordModules: \"record modules\",\n\t\t\t\trecordChunks: \"record chunks\",\n\t\t\t\tbeforeModuleHash: \"module hashing\",\n\t\t\t\tbeforeCodeGeneration: \"code generation\",\n\t\t\t\tbeforeRuntimeRequirements: \"runtime requirements\",\n\t\t\t\tbeforeHash: \"hashing\",\n\t\t\t\tafterHash: \"after hashing\",\n\t\t\t\trecordHash: \"record hash\",\n\t\t\t\tbeforeModuleAssets: \"module assets processing\",\n\t\t\t\tbeforeChunkAssets: \"chunk assets processing\",\n\t\t\t\tprocessAssets: \"asset processing\",\n\t\t\t\tafterProcessAssets: \"after asset optimization\",\n\t\t\t\trecord: \"recording\",\n\t\t\t\tafterSeal: \"after seal\"\n\t\t\t};\n\t\t\tconst numberOfHooks = Object.keys(hooks).length;\n\t\t\tObject.keys(hooks).forEach((name, idx) => {\n\t\t\t\tconst title = hooks[name];\n\t\t\t\tconst percentage = (idx / numberOfHooks) * 0.25 + 0.7;\n\t\t\t\tcompilation.hooks[name].intercept({\n\t\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\t\tcall() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\tdone() {\n\t\t\t\t\t\tprogressReporters.set(compiler, undefined);\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\tresult() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\terror() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\ttap(tap) {\n\t\t\t\t\t\t// p is percentage from 0 to 1\n\t\t\t\t\t\t// args is any number of messages in a hierarchical matter\n\t\t\t\t\t\tprogressReporters.set(compilation.compiler, (p, ...args) => {\n\t\t\t\t\t\t\thandler(percentage, \"sealing\", title, tap.name, ...args);\n\t\t\t\t\t\t});\n\t\t\t\t\t\thandler(percentage, \"sealing\", title, tap.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tcompiler.hooks.make.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0.1, \"building\");\n\t\t\t},\n\t\t\tdone() {\n\t\t\t\thandler(0.65, \"building\");\n\t\t\t}\n\t\t});\n\t\tconst interceptHook = (hook, progress, category, name) => {\n\t\t\thook.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcall() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\tdone() {\n\t\t\t\t\tprogressReporters.set(compiler, undefined);\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\tresult() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\terror() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\ttap(tap) {\n\t\t\t\t\tprogressReporters.set(compiler, (p, ...args) => {\n\t\t\t\t\t\thandler(progress, category, name, tap.name, ...args);\n\t\t\t\t\t});\n\t\t\t\t\thandler(progress, category, name, tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tcompiler.cache.hooks.endIdle.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(compiler.cache.hooks.endIdle, 0.01, \"cache\", \"end idle\");\n\t\tcompiler.hooks.beforeRun.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(compiler.hooks.beforeRun, 0.01, \"setup\", \"before run\");\n\t\tinterceptHook(compiler.hooks.run, 0.02, \"setup\", \"run\");\n\t\tinterceptHook(compiler.hooks.watchRun, 0.03, \"setup\", \"watch run\");\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.normalModuleFactory,\n\t\t\t0.04,\n\t\t\t\"setup\",\n\t\t\t\"normal module factory\"\n\t\t);\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.contextModuleFactory,\n\t\t\t0.05,\n\t\t\t\"setup\",\n\t\t\t\"context module factory\"\n\t\t);\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.beforeCompile,\n\t\t\t0.06,\n\t\t\t\"setup\",\n\t\t\t\"before compile\"\n\t\t);\n\t\tinterceptHook(compiler.hooks.compile, 0.07, \"setup\", \"compile\");\n\t\tinterceptHook(compiler.hooks.thisCompilation, 0.08, \"setup\", \"compilation\");\n\t\tinterceptHook(compiler.hooks.compilation, 0.09, \"setup\", \"compilation\");\n\t\tinterceptHook(compiler.hooks.finishMake, 0.69, \"building\", \"finish\");\n\t\tinterceptHook(compiler.hooks.emit, 0.95, \"emitting\", \"emit\");\n\t\tinterceptHook(compiler.hooks.afterEmit, 0.98, \"emitting\", \"after emit\");\n\t\tinterceptHook(compiler.hooks.done, 0.99, \"done\", \"plugins\");\n\t\tcompiler.hooks.done.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(0.99, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(\n\t\t\tcompiler.cache.hooks.storeBuildDependencies,\n\t\t\t0.99,\n\t\t\t\"cache\",\n\t\t\t\"store build dependencies\"\n\t\t);\n\t\tinterceptHook(compiler.cache.hooks.shutdown, 0.99, \"cache\", \"shutdown\");\n\t\tinterceptHook(compiler.cache.hooks.beginIdle, 0.99, \"cache\", \"begin idle\");\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.watchClose,\n\t\t\t0.99,\n\t\t\t\"end\",\n\t\t\t\"closing watch compilation\"\n\t\t);\n\t\tcompiler.cache.hooks.beginIdle.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(1, \"\");\n\t\t\t}\n\t\t});\n\t\tcompiler.cache.hooks.shutdown.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(1, \"\");\n\t\t\t}\n\t\t});\n\t}\n}\n\nProgressPlugin.defaultOptions = {\n\tprofile: false,\n\tmodulesCount: 5000,\n\tdependenciesCount: 10000,\n\tmodules: true,\n\tdependencies: true,\n\tactiveModules: false,\n\tentries: true\n};\n\nmodule.exports = ProgressPlugin;\n"]},"metadata":{},"sourceType":"script"}