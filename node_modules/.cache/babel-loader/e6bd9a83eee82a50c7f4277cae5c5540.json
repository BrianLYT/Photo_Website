{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst JavascriptModulesPlugin = require(\"../javascript/JavascriptModulesPlugin\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").StartupRenderContext} StartupRenderContext */\n\n/** @typedef {import(\"../util/Hash\")} Hash */\n\n\nconst COMMON_LIBRARY_NAME_MESSAGE = \"Common configuration options that specific library names are 'output.library[.name]', 'entry.xyz.library[.name]', 'ModuleFederationPlugin.name' and 'ModuleFederationPlugin.library[.name]'.\";\n/**\n * @template T\n * @typedef {Object} LibraryContext\n * @property {Compilation} compilation\n * @property {ChunkGraph} chunkGraph\n * @property {T} options\n */\n\n/**\n * @template T\n */\n\nclass AbstractLibraryPlugin {\n  /**\n   * @param {Object} options options\n   * @param {string} options.pluginName name of the plugin\n   * @param {LibraryType} options.type used library type\n   */\n  constructor(_ref) {\n    let {\n      pluginName,\n      type\n    } = _ref;\n    this._pluginName = pluginName;\n    this._type = type;\n    this._parseCache = new WeakMap();\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const {\n      _pluginName\n    } = this;\n    compiler.hooks.thisCompilation.tap(_pluginName, compilation => {\n      compilation.hooks.finishModules.tap({\n        name: _pluginName,\n        stage: 10\n      }, () => {\n        for (const [name, {\n          dependencies: deps,\n          options: {\n            library\n          }\n        }] of compilation.entries) {\n          const options = this._parseOptionsCached(library !== undefined ? library : compilation.outputOptions.library);\n\n          if (options !== false) {\n            const dep = deps[deps.length - 1];\n\n            if (dep) {\n              const module = compilation.moduleGraph.getModule(dep);\n\n              if (module) {\n                this.finishEntryModule(module, name, {\n                  options,\n                  compilation,\n                  chunkGraph: compilation.chunkGraph\n                });\n              }\n            }\n          }\n        }\n      });\n\n      const getOptionsForChunk = chunk => {\n        if (compilation.chunkGraph.getNumberOfEntryModules(chunk) === 0) return false;\n        const options = chunk.getEntryOptions();\n        const library = options && options.library;\n        return this._parseOptionsCached(library !== undefined ? library : compilation.outputOptions.library);\n      };\n\n      if (this.render !== AbstractLibraryPlugin.prototype.render || this.runtimeRequirements !== AbstractLibraryPlugin.prototype.runtimeRequirements) {\n        compilation.hooks.additionalChunkRuntimeRequirements.tap(_pluginName, (chunk, set, _ref2) => {\n          let {\n            chunkGraph\n          } = _ref2;\n          const options = getOptionsForChunk(chunk);\n\n          if (options !== false) {\n            this.runtimeRequirements(chunk, set, {\n              options,\n              compilation,\n              chunkGraph\n            });\n          }\n        });\n      }\n\n      const hooks = JavascriptModulesPlugin.getCompilationHooks(compilation);\n\n      if (this.render !== AbstractLibraryPlugin.prototype.render) {\n        hooks.render.tap(_pluginName, (source, renderContext) => {\n          const options = getOptionsForChunk(renderContext.chunk);\n          if (options === false) return source;\n          return this.render(source, renderContext, {\n            options,\n            compilation,\n            chunkGraph: compilation.chunkGraph\n          });\n        });\n      }\n\n      if (this.embedInRuntimeBailout !== AbstractLibraryPlugin.prototype.embedInRuntimeBailout) {\n        hooks.embedInRuntimeBailout.tap(_pluginName, (module, renderContext) => {\n          const options = getOptionsForChunk(renderContext.chunk);\n          if (options === false) return;\n          return this.embedInRuntimeBailout(module, renderContext, {\n            options,\n            compilation,\n            chunkGraph: compilation.chunkGraph\n          });\n        });\n      }\n\n      if (this.strictRuntimeBailout !== AbstractLibraryPlugin.prototype.strictRuntimeBailout) {\n        hooks.strictRuntimeBailout.tap(_pluginName, renderContext => {\n          const options = getOptionsForChunk(renderContext.chunk);\n          if (options === false) return;\n          return this.strictRuntimeBailout(renderContext, {\n            options,\n            compilation,\n            chunkGraph: compilation.chunkGraph\n          });\n        });\n      }\n\n      if (this.renderStartup !== AbstractLibraryPlugin.prototype.renderStartup) {\n        hooks.renderStartup.tap(_pluginName, (source, module, renderContext) => {\n          const options = getOptionsForChunk(renderContext.chunk);\n          if (options === false) return source;\n          return this.renderStartup(source, module, renderContext, {\n            options,\n            compilation,\n            chunkGraph: compilation.chunkGraph\n          });\n        });\n      }\n\n      hooks.chunkHash.tap(_pluginName, (chunk, hash, context) => {\n        const options = getOptionsForChunk(chunk);\n        if (options === false) return;\n        this.chunkHash(chunk, hash, context, {\n          options,\n          compilation,\n          chunkGraph: compilation.chunkGraph\n        });\n      });\n    });\n  }\n  /**\n   * @param {LibraryOptions=} library normalized library option\n   * @returns {T | false} preprocess as needed by overriding\n   */\n\n\n  _parseOptionsCached(library) {\n    if (!library) return false;\n    if (library.type !== this._type) return false;\n\n    const cacheEntry = this._parseCache.get(library);\n\n    if (cacheEntry !== undefined) return cacheEntry;\n    const result = this.parseOptions(library);\n\n    this._parseCache.set(library, result);\n\n    return result;\n  }\n  /* istanbul ignore next */\n\n  /**\n   * @abstract\n   * @param {LibraryOptions} library normalized library option\n   * @returns {T | false} preprocess as needed by overriding\n   */\n\n\n  parseOptions(library) {\n    const AbstractMethodError = require(\"../AbstractMethodError\");\n\n    throw new AbstractMethodError();\n  }\n  /**\n   * @param {Module} module the exporting entry module\n   * @param {string} entryName the name of the entrypoint\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {void}\n   */\n\n\n  finishEntryModule(module, entryName, libraryContext) {}\n  /**\n   * @param {Module} module the exporting entry module\n   * @param {RenderContext} renderContext render context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {string | undefined} bailout reason\n   */\n\n\n  embedInRuntimeBailout(module, renderContext, libraryContext) {\n    return undefined;\n  }\n  /**\n   * @param {RenderContext} renderContext render context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {string | undefined} bailout reason\n   */\n\n\n  strictRuntimeBailout(renderContext, libraryContext) {\n    return undefined;\n  }\n  /**\n   * @param {Chunk} chunk the chunk\n   * @param {Set<string>} set runtime requirements\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {void}\n   */\n\n\n  runtimeRequirements(chunk, set, libraryContext) {\n    if (this.render !== AbstractLibraryPlugin.prototype.render) set.add(RuntimeGlobals.returnExportsFromRuntime);\n  }\n  /**\n   * @param {Source} source source\n   * @param {RenderContext} renderContext render context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {Source} source with library export\n   */\n\n\n  render(source, renderContext, libraryContext) {\n    return source;\n  }\n  /**\n   * @param {Source} source source\n   * @param {Module} module module\n   * @param {StartupRenderContext} renderContext render context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {Source} source with library export\n   */\n\n\n  renderStartup(source, module, renderContext, libraryContext) {\n    return source;\n  }\n  /**\n   * @param {Chunk} chunk the chunk\n   * @param {Hash} hash hash\n   * @param {ChunkHashContext} chunkHashContext chunk hash context\n   * @param {LibraryContext<T>} libraryContext context\n   * @returns {void}\n   */\n\n\n  chunkHash(chunk, hash, chunkHashContext, libraryContext) {\n    const options = this._parseOptionsCached(libraryContext.compilation.outputOptions.library);\n\n    hash.update(this._pluginName);\n    hash.update(JSON.stringify(options));\n  }\n\n}\n\nAbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE = COMMON_LIBRARY_NAME_MESSAGE;\nmodule.exports = AbstractLibraryPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/library/AbstractLibraryPlugin.js"],"names":["RuntimeGlobals","require","JavascriptModulesPlugin","COMMON_LIBRARY_NAME_MESSAGE","AbstractLibraryPlugin","constructor","pluginName","type","_pluginName","_type","_parseCache","WeakMap","apply","compiler","hooks","thisCompilation","tap","compilation","finishModules","name","stage","dependencies","deps","options","library","entries","_parseOptionsCached","undefined","outputOptions","dep","length","module","moduleGraph","getModule","finishEntryModule","chunkGraph","getOptionsForChunk","chunk","getNumberOfEntryModules","getEntryOptions","render","prototype","runtimeRequirements","additionalChunkRuntimeRequirements","set","getCompilationHooks","source","renderContext","embedInRuntimeBailout","strictRuntimeBailout","renderStartup","chunkHash","hash","context","cacheEntry","get","result","parseOptions","AbstractMethodError","entryName","libraryContext","add","returnExportsFromRuntime","chunkHashContext","update","JSON","stringify","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst JavascriptModulesPlugin = require(\"../javascript/JavascriptModulesPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").StartupRenderContext} StartupRenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst COMMON_LIBRARY_NAME_MESSAGE =\n\t\"Common configuration options that specific library names are 'output.library[.name]', 'entry.xyz.library[.name]', 'ModuleFederationPlugin.name' and 'ModuleFederationPlugin.library[.name]'.\";\n\n/**\n * @template T\n * @typedef {Object} LibraryContext\n * @property {Compilation} compilation\n * @property {ChunkGraph} chunkGraph\n * @property {T} options\n */\n\n/**\n * @template T\n */\nclass AbstractLibraryPlugin {\n\t/**\n\t * @param {Object} options options\n\t * @param {string} options.pluginName name of the plugin\n\t * @param {LibraryType} options.type used library type\n\t */\n\tconstructor({ pluginName, type }) {\n\t\tthis._pluginName = pluginName;\n\t\tthis._type = type;\n\t\tthis._parseCache = new WeakMap();\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { _pluginName } = this;\n\t\tcompiler.hooks.thisCompilation.tap(_pluginName, compilation => {\n\t\t\tcompilation.hooks.finishModules.tap(\n\t\t\t\t{ name: _pluginName, stage: 10 },\n\t\t\t\t() => {\n\t\t\t\t\tfor (const [\n\t\t\t\t\t\tname,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdependencies: deps,\n\t\t\t\t\t\t\toptions: { library }\n\t\t\t\t\t\t}\n\t\t\t\t\t] of compilation.entries) {\n\t\t\t\t\t\tconst options = this._parseOptionsCached(\n\t\t\t\t\t\t\tlibrary !== undefined\n\t\t\t\t\t\t\t\t? library\n\t\t\t\t\t\t\t\t: compilation.outputOptions.library\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (options !== false) {\n\t\t\t\t\t\t\tconst dep = deps[deps.length - 1];\n\t\t\t\t\t\t\tif (dep) {\n\t\t\t\t\t\t\t\tconst module = compilation.moduleGraph.getModule(dep);\n\t\t\t\t\t\t\t\tif (module) {\n\t\t\t\t\t\t\t\t\tthis.finishEntryModule(module, name, {\n\t\t\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\t\t\t\tchunkGraph: compilation.chunkGraph\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst getOptionsForChunk = chunk => {\n\t\t\t\tif (compilation.chunkGraph.getNumberOfEntryModules(chunk) === 0)\n\t\t\t\t\treturn false;\n\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\tconst library = options && options.library;\n\t\t\t\treturn this._parseOptionsCached(\n\t\t\t\t\tlibrary !== undefined ? library : compilation.outputOptions.library\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\tthis.render !== AbstractLibraryPlugin.prototype.render ||\n\t\t\t\tthis.runtimeRequirements !==\n\t\t\t\t\tAbstractLibraryPlugin.prototype.runtimeRequirements\n\t\t\t) {\n\t\t\t\tcompilation.hooks.additionalChunkRuntimeRequirements.tap(\n\t\t\t\t\t_pluginName,\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tconst options = getOptionsForChunk(chunk);\n\t\t\t\t\t\tif (options !== false) {\n\t\t\t\t\t\t\tthis.runtimeRequirements(chunk, set, {\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\t\tchunkGraph\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst hooks = JavascriptModulesPlugin.getCompilationHooks(compilation);\n\n\t\t\tif (this.render !== AbstractLibraryPlugin.prototype.render) {\n\t\t\t\thooks.render.tap(_pluginName, (source, renderContext) => {\n\t\t\t\t\tconst options = getOptionsForChunk(renderContext.chunk);\n\t\t\t\t\tif (options === false) return source;\n\t\t\t\t\treturn this.render(source, renderContext, {\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\tchunkGraph: compilation.chunkGraph\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.embedInRuntimeBailout !==\n\t\t\t\tAbstractLibraryPlugin.prototype.embedInRuntimeBailout\n\t\t\t) {\n\t\t\t\thooks.embedInRuntimeBailout.tap(\n\t\t\t\t\t_pluginName,\n\t\t\t\t\t(module, renderContext) => {\n\t\t\t\t\t\tconst options = getOptionsForChunk(renderContext.chunk);\n\t\t\t\t\t\tif (options === false) return;\n\t\t\t\t\t\treturn this.embedInRuntimeBailout(module, renderContext, {\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\tchunkGraph: compilation.chunkGraph\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.strictRuntimeBailout !==\n\t\t\t\tAbstractLibraryPlugin.prototype.strictRuntimeBailout\n\t\t\t) {\n\t\t\t\thooks.strictRuntimeBailout.tap(_pluginName, renderContext => {\n\t\t\t\t\tconst options = getOptionsForChunk(renderContext.chunk);\n\t\t\t\t\tif (options === false) return;\n\t\t\t\t\treturn this.strictRuntimeBailout(renderContext, {\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\tchunkGraph: compilation.chunkGraph\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.renderStartup !== AbstractLibraryPlugin.prototype.renderStartup\n\t\t\t) {\n\t\t\t\thooks.renderStartup.tap(\n\t\t\t\t\t_pluginName,\n\t\t\t\t\t(source, module, renderContext) => {\n\t\t\t\t\t\tconst options = getOptionsForChunk(renderContext.chunk);\n\t\t\t\t\t\tif (options === false) return source;\n\t\t\t\t\t\treturn this.renderStartup(source, module, renderContext, {\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tcompilation,\n\t\t\t\t\t\t\tchunkGraph: compilation.chunkGraph\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\thooks.chunkHash.tap(_pluginName, (chunk, hash, context) => {\n\t\t\t\tconst options = getOptionsForChunk(chunk);\n\t\t\t\tif (options === false) return;\n\t\t\t\tthis.chunkHash(chunk, hash, context, {\n\t\t\t\t\toptions,\n\t\t\t\t\tcompilation,\n\t\t\t\t\tchunkGraph: compilation.chunkGraph\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @param {LibraryOptions=} library normalized library option\n\t * @returns {T | false} preprocess as needed by overriding\n\t */\n\t_parseOptionsCached(library) {\n\t\tif (!library) return false;\n\t\tif (library.type !== this._type) return false;\n\t\tconst cacheEntry = this._parseCache.get(library);\n\t\tif (cacheEntry !== undefined) return cacheEntry;\n\t\tconst result = this.parseOptions(library);\n\t\tthis._parseCache.set(library, result);\n\t\treturn result;\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {LibraryOptions} library normalized library option\n\t * @returns {T | false} preprocess as needed by overriding\n\t */\n\tparseOptions(library) {\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @param {Module} module the exporting entry module\n\t * @param {string} entryName the name of the entrypoint\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {void}\n\t */\n\tfinishEntryModule(module, entryName, libraryContext) {}\n\n\t/**\n\t * @param {Module} module the exporting entry module\n\t * @param {RenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {string | undefined} bailout reason\n\t */\n\tembedInRuntimeBailout(module, renderContext, libraryContext) {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @param {RenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {string | undefined} bailout reason\n\t */\n\tstrictRuntimeBailout(renderContext, libraryContext) {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk the chunk\n\t * @param {Set<string>} set runtime requirements\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {void}\n\t */\n\truntimeRequirements(chunk, set, libraryContext) {\n\t\tif (this.render !== AbstractLibraryPlugin.prototype.render)\n\t\t\tset.add(RuntimeGlobals.returnExportsFromRuntime);\n\t}\n\n\t/**\n\t * @param {Source} source source\n\t * @param {RenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {Source} source with library export\n\t */\n\trender(source, renderContext, libraryContext) {\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {Source} source source\n\t * @param {Module} module module\n\t * @param {StartupRenderContext} renderContext render context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {Source} source with library export\n\t */\n\trenderStartup(source, module, renderContext, libraryContext) {\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk the chunk\n\t * @param {Hash} hash hash\n\t * @param {ChunkHashContext} chunkHashContext chunk hash context\n\t * @param {LibraryContext<T>} libraryContext context\n\t * @returns {void}\n\t */\n\tchunkHash(chunk, hash, chunkHashContext, libraryContext) {\n\t\tconst options = this._parseOptionsCached(\n\t\t\tlibraryContext.compilation.outputOptions.library\n\t\t);\n\t\thash.update(this._pluginName);\n\t\thash.update(JSON.stringify(options));\n\t}\n}\n\nAbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE = COMMON_LIBRARY_NAME_MESSAGE;\nmodule.exports = AbstractLibraryPlugin;\n"]},"metadata":{},"sourceType":"script"}