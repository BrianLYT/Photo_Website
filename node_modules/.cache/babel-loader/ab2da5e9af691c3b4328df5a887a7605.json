{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra, Zackary Jackson @ScriptedAlchemy, Marais Rossouw @maraisr\n*/\n\"use strict\";\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\n\nconst ContainerEntryDependency = require(\"./ContainerEntryDependency\");\n\nconst ContainerEntryModuleFactory = require(\"./ContainerEntryModuleFactory\");\n\nconst ContainerExposedDependency = require(\"./ContainerExposedDependency\");\n\nconst {\n  parseOptions\n} = require(\"./options\");\n/** @typedef {import(\"../../declarations/plugins/container/ContainerPlugin\").ContainerPluginOptions} ContainerPluginOptions */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nconst validate = createSchemaValidation(require(\"../../schemas/plugins/container/ContainerPlugin.check.js\"), () => require(\"../../schemas/plugins/container/ContainerPlugin.json\"), {\n  name: \"Container Plugin\",\n  baseDataPath: \"options\"\n});\nconst PLUGIN_NAME = \"ContainerPlugin\";\n\nclass ContainerPlugin {\n  /**\n   * @param {ContainerPluginOptions} options options\n   */\n  constructor(options) {\n    validate(options);\n    this._options = {\n      name: options.name,\n      shareScope: options.shareScope || \"default\",\n      library: options.library || {\n        type: \"var\",\n        name: options.name\n      },\n      runtime: options.runtime,\n      filename: options.filename || undefined,\n      exposes: parseOptions(options.exposes, item => ({\n        import: Array.isArray(item) ? item : [item],\n        name: undefined\n      }), item => ({\n        import: Array.isArray(item.import) ? item.import : [item.import],\n        name: item.name || undefined\n      }))\n    };\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const {\n      name,\n      exposes,\n      shareScope,\n      filename,\n      library,\n      runtime\n    } = this._options;\n    compiler.options.output.enabledLibraryTypes.push(library.type);\n    compiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {\n      const dep = new ContainerEntryDependency(name, exposes, shareScope);\n      dep.loc = {\n        name\n      };\n      compilation.addEntry(compilation.options.context, dep, {\n        name,\n        filename,\n        runtime,\n        library\n      }, error => {\n        if (error) return callback(error);\n        callback();\n      });\n    });\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(ContainerEntryDependency, new ContainerEntryModuleFactory());\n      compilation.dependencyFactories.set(ContainerExposedDependency, normalModuleFactory);\n    });\n  }\n\n}\n\nmodule.exports = ContainerPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/container/ContainerPlugin.js"],"names":["createSchemaValidation","require","ContainerEntryDependency","ContainerEntryModuleFactory","ContainerExposedDependency","parseOptions","validate","name","baseDataPath","PLUGIN_NAME","ContainerPlugin","constructor","options","_options","shareScope","library","type","runtime","filename","undefined","exposes","item","import","Array","isArray","apply","compiler","output","enabledLibraryTypes","push","hooks","make","tapAsync","compilation","callback","dep","loc","addEntry","context","error","thisCompilation","tap","normalModuleFactory","dependencyFactories","set","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra, Zackary Jackson @ScriptedAlchemy, Marais Rossouw @maraisr\n*/\n\n\"use strict\";\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst ContainerEntryDependency = require(\"./ContainerEntryDependency\");\nconst ContainerEntryModuleFactory = require(\"./ContainerEntryModuleFactory\");\nconst ContainerExposedDependency = require(\"./ContainerExposedDependency\");\nconst { parseOptions } = require(\"./options\");\n\n/** @typedef {import(\"../../declarations/plugins/container/ContainerPlugin\").ContainerPluginOptions} ContainerPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/container/ContainerPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/container/ContainerPlugin.json\"),\n\t{\n\t\tname: \"Container Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nconst PLUGIN_NAME = \"ContainerPlugin\";\n\nclass ContainerPlugin {\n\t/**\n\t * @param {ContainerPluginOptions} options options\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\n\t\tthis._options = {\n\t\t\tname: options.name,\n\t\t\tshareScope: options.shareScope || \"default\",\n\t\t\tlibrary: options.library || {\n\t\t\t\ttype: \"var\",\n\t\t\t\tname: options.name\n\t\t\t},\n\t\t\truntime: options.runtime,\n\t\t\tfilename: options.filename || undefined,\n\t\t\texposes: parseOptions(\n\t\t\t\toptions.exposes,\n\t\t\t\titem => ({\n\t\t\t\t\timport: Array.isArray(item) ? item : [item],\n\t\t\t\t\tname: undefined\n\t\t\t\t}),\n\t\t\t\titem => ({\n\t\t\t\t\timport: Array.isArray(item.import) ? item.import : [item.import],\n\t\t\t\t\tname: item.name || undefined\n\t\t\t\t})\n\t\t\t)\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { name, exposes, shareScope, filename, library, runtime } =\n\t\t\tthis._options;\n\n\t\tcompiler.options.output.enabledLibraryTypes.push(library.type);\n\n\t\tcompiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {\n\t\t\tconst dep = new ContainerEntryDependency(name, exposes, shareScope);\n\t\t\tdep.loc = { name };\n\t\t\tcompilation.addEntry(\n\t\t\t\tcompilation.options.context,\n\t\t\t\tdep,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tfilename,\n\t\t\t\t\truntime,\n\t\t\t\t\tlibrary\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tif (error) return callback(error);\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tContainerEntryDependency,\n\t\t\t\t\tnew ContainerEntryModuleFactory()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tContainerExposedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ContainerPlugin;\n"]},"metadata":{},"sourceType":"script"}