{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\n\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {Object} UsedWasmDependency\n * @property {WebAssemblyImportDependency} dependency the dependency\n * @property {string} name the export name\n * @property {string} module the module name\n */\n\n\nconst MANGLED_MODULE = \"a\";\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {Module} module the module\n * @param {boolean} mangle mangle module and export names\n * @returns {UsedWasmDependency[]} used dependencies and (mangled) name\n */\n\nconst getUsedDependencies = (moduleGraph, module, mangle) => {\n  /** @type {UsedWasmDependency[]} */\n  const array = [];\n  let importIndex = 0;\n\n  for (const dep of module.dependencies) {\n    if (dep instanceof WebAssemblyImportDependency) {\n      if (dep.description.type === \"GlobalType\" || moduleGraph.getModule(dep) === null) {\n        continue;\n      }\n\n      const exportName = dep.name; // TODO add the following 3 lines when removing of ModuleExport is possible\n      // const importedModule = moduleGraph.getModule(dep);\n      // const usedName = importedModule && moduleGraph.getExportsInfo(importedModule).getUsedName(exportName, runtime);\n      // if (usedName !== false) {\n\n      if (mangle) {\n        array.push({\n          dependency: dep,\n          name: Template.numberToIdentifier(importIndex++),\n          module: MANGLED_MODULE\n        });\n      } else {\n        array.push({\n          dependency: dep,\n          name: exportName,\n          module: dep.request\n        });\n      }\n    }\n  }\n\n  return array;\n};\n\nexports.getUsedDependencies = getUsedDependencies;\nexports.MANGLED_MODULE = MANGLED_MODULE;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/wasm-sync/WebAssemblyUtils.js"],"names":["Template","require","WebAssemblyImportDependency","MANGLED_MODULE","getUsedDependencies","moduleGraph","module","mangle","array","importIndex","dep","dependencies","description","type","getModule","exportName","name","push","dependency","numberToIdentifier","request","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAMC,2BAA2B,GAAGD,OAAO,CAAC,6CAAD,CAA3C;AAEA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,cAAc,GAAG,GAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,CAACC,WAAD,EAAcC,MAAd,EAAsBC,MAAtB,KAAiC;AAC5D;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,CAAlB;;AACA,OAAK,MAAMC,GAAX,IAAkBJ,MAAM,CAACK,YAAzB,EAAuC;AACtC,QAAID,GAAG,YAAYR,2BAAnB,EAAgD;AAC/C,UACCQ,GAAG,CAACE,WAAJ,CAAgBC,IAAhB,KAAyB,YAAzB,IACAR,WAAW,CAACS,SAAZ,CAAsBJ,GAAtB,MAA+B,IAFhC,EAGE;AACD;AACA;;AAED,YAAMK,UAAU,GAAGL,GAAG,CAACM,IAAvB,CAR+C,CAS/C;AACA;AACA;AACA;;AACA,UAAIT,MAAJ,EAAY;AACXC,QAAAA,KAAK,CAACS,IAAN,CAAW;AACVC,UAAAA,UAAU,EAAER,GADF;AAEVM,UAAAA,IAAI,EAAEhB,QAAQ,CAACmB,kBAAT,CAA4BV,WAAW,EAAvC,CAFI;AAGVH,UAAAA,MAAM,EAAEH;AAHE,SAAX;AAKA,OAND,MAMO;AACNK,QAAAA,KAAK,CAACS,IAAN,CAAW;AACVC,UAAAA,UAAU,EAAER,GADF;AAEVM,UAAAA,IAAI,EAAED,UAFI;AAGVT,UAAAA,MAAM,EAAEI,GAAG,CAACU;AAHF,SAAX;AAKA;AACD;AACD;;AACD,SAAOZ,KAAP;AACA,CAlCD;;AAoCAa,OAAO,CAACjB,mBAAR,GAA8BA,mBAA9B;AACAiB,OAAO,CAAClB,cAAR,GAAyBA,cAAzB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Template = require(\"../Template\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {Object} UsedWasmDependency\n * @property {WebAssemblyImportDependency} dependency the dependency\n * @property {string} name the export name\n * @property {string} module the module name\n */\n\nconst MANGLED_MODULE = \"a\";\n\n/**\n * @param {ModuleGraph} moduleGraph the module graph\n * @param {Module} module the module\n * @param {boolean} mangle mangle module and export names\n * @returns {UsedWasmDependency[]} used dependencies and (mangled) name\n */\nconst getUsedDependencies = (moduleGraph, module, mangle) => {\n\t/** @type {UsedWasmDependency[]} */\n\tconst array = [];\n\tlet importIndex = 0;\n\tfor (const dep of module.dependencies) {\n\t\tif (dep instanceof WebAssemblyImportDependency) {\n\t\t\tif (\n\t\t\t\tdep.description.type === \"GlobalType\" ||\n\t\t\t\tmoduleGraph.getModule(dep) === null\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst exportName = dep.name;\n\t\t\t// TODO add the following 3 lines when removing of ModuleExport is possible\n\t\t\t// const importedModule = moduleGraph.getModule(dep);\n\t\t\t// const usedName = importedModule && moduleGraph.getExportsInfo(importedModule).getUsedName(exportName, runtime);\n\t\t\t// if (usedName !== false) {\n\t\t\tif (mangle) {\n\t\t\t\tarray.push({\n\t\t\t\t\tdependency: dep,\n\t\t\t\t\tname: Template.numberToIdentifier(importIndex++),\n\t\t\t\t\tmodule: MANGLED_MODULE\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tarray.push({\n\t\t\t\t\tdependency: dep,\n\t\t\t\t\tname: exportName,\n\t\t\t\t\tmodule: dep.request\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn array;\n};\n\nexports.getUsedDependencies = getUsedDependencies;\nexports.MANGLED_MODULE = MANGLED_MODULE;\n"]},"metadata":{},"sourceType":"script"}