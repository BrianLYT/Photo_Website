{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource,\n  PrefixSource\n} = require(\"webpack-sources\");\n\nconst InitFragment = require(\"./InitFragment\");\n\nconst Template = require(\"./Template\");\n\nconst {\n  mergeRuntime\n} = require(\"./util/runtime\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./Generator\").GenerateContext} GenerateContext */\n\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n\nconst wrapInCondition = (condition, source) => {\n  if (typeof source === \"string\") {\n    return Template.asString([`if (${condition}) {`, Template.indent(source), \"}\", \"\"]);\n  } else {\n    return new ConcatSource(`if (${condition}) {\\n`, new PrefixSource(\"\\t\", source), \"}\\n\");\n  }\n};\n/**\n * @typedef {GenerateContext} Context\n */\n\n\nclass ConditionalInitFragment extends InitFragment {\n  /**\n   * @param {string|Source} content the source code that will be included as initialization code\n   * @param {number} stage category of initialization code (contribute to order)\n   * @param {number} position position in the category (contribute to order)\n   * @param {string} key unique key to avoid emitting the same initialization code twice\n   * @param {RuntimeSpec | boolean} runtimeCondition in which runtime this fragment should be executed\n   * @param {string|Source=} endContent the source code that will be included at the end of the module\n   */\n  constructor(content, stage, position, key) {\n    let runtimeCondition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let endContent = arguments.length > 5 ? arguments[5] : undefined;\n    super(content, stage, position, key, endContent);\n    this.runtimeCondition = runtimeCondition;\n  }\n  /**\n   * @param {Context} context context\n   * @returns {string|Source} the source code that will be included as initialization code\n   */\n\n\n  getContent(context) {\n    if (this.runtimeCondition === false || !this.content) return \"\";\n    if (this.runtimeCondition === true) return this.content;\n    const expr = context.runtimeTemplate.runtimeConditionExpression({\n      chunkGraph: context.chunkGraph,\n      runtimeRequirements: context.runtimeRequirements,\n      runtime: context.runtime,\n      runtimeCondition: this.runtimeCondition\n    });\n    if (expr === \"true\") return this.content;\n    return wrapInCondition(expr, this.content);\n  }\n  /**\n   * @param {Context} context context\n   * @returns {string|Source=} the source code that will be included at the end of the module\n   */\n\n\n  getEndContent(context) {\n    if (this.runtimeCondition === false || !this.endContent) return \"\";\n    if (this.runtimeCondition === true) return this.endContent;\n    const expr = context.runtimeTemplate.runtimeConditionExpression({\n      chunkGraph: context.chunkGraph,\n      runtimeRequirements: context.runtimeRequirements,\n      runtime: context.runtime,\n      runtimeCondition: this.runtimeCondition\n    });\n    if (expr === \"true\") return this.endContent;\n    return wrapInCondition(expr, this.endContent);\n  }\n\n  merge(other) {\n    if (this.runtimeCondition === true) return this;\n    if (other.runtimeCondition === true) return other;\n    if (this.runtimeCondition === false) return other;\n    if (other.runtimeCondition === false) return this;\n    const runtimeCondition = mergeRuntime(this.runtimeCondition, other.runtimeCondition);\n    return new ConditionalInitFragment(this.content, this.stage, this.position, this.key, runtimeCondition, this.endContent);\n  }\n\n}\n\nmodule.exports = ConditionalInitFragment;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ConditionalInitFragment.js"],"names":["ConcatSource","PrefixSource","require","InitFragment","Template","mergeRuntime","wrapInCondition","condition","source","asString","indent","ConditionalInitFragment","constructor","content","stage","position","key","runtimeCondition","endContent","getContent","context","expr","runtimeTemplate","runtimeConditionExpression","chunkGraph","runtimeRequirements","runtime","getEndContent","merge","other","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource, PrefixSource } = require(\"webpack-sources\");\nconst InitFragment = require(\"./InitFragment\");\nconst Template = require(\"./Template\");\nconst { mergeRuntime } = require(\"./util/runtime\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"./Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\nconst wrapInCondition = (condition, source) => {\n\tif (typeof source === \"string\") {\n\t\treturn Template.asString([\n\t\t\t`if (${condition}) {`,\n\t\t\tTemplate.indent(source),\n\t\t\t\"}\",\n\t\t\t\"\"\n\t\t]);\n\t} else {\n\t\treturn new ConcatSource(\n\t\t\t`if (${condition}) {\\n`,\n\t\t\tnew PrefixSource(\"\\t\", source),\n\t\t\t\"}\\n\"\n\t\t);\n\t}\n};\n\n/**\n * @typedef {GenerateContext} Context\n */\nclass ConditionalInitFragment extends InitFragment {\n\t/**\n\t * @param {string|Source} content the source code that will be included as initialization code\n\t * @param {number} stage category of initialization code (contribute to order)\n\t * @param {number} position position in the category (contribute to order)\n\t * @param {string} key unique key to avoid emitting the same initialization code twice\n\t * @param {RuntimeSpec | boolean} runtimeCondition in which runtime this fragment should be executed\n\t * @param {string|Source=} endContent the source code that will be included at the end of the module\n\t */\n\tconstructor(\n\t\tcontent,\n\t\tstage,\n\t\tposition,\n\t\tkey,\n\t\truntimeCondition = true,\n\t\tendContent\n\t) {\n\t\tsuper(content, stage, position, key, endContent);\n\t\tthis.runtimeCondition = runtimeCondition;\n\t}\n\n\t/**\n\t * @param {Context} context context\n\t * @returns {string|Source} the source code that will be included as initialization code\n\t */\n\tgetContent(context) {\n\t\tif (this.runtimeCondition === false || !this.content) return \"\";\n\t\tif (this.runtimeCondition === true) return this.content;\n\t\tconst expr = context.runtimeTemplate.runtimeConditionExpression({\n\t\t\tchunkGraph: context.chunkGraph,\n\t\t\truntimeRequirements: context.runtimeRequirements,\n\t\t\truntime: context.runtime,\n\t\t\truntimeCondition: this.runtimeCondition\n\t\t});\n\t\tif (expr === \"true\") return this.content;\n\t\treturn wrapInCondition(expr, this.content);\n\t}\n\n\t/**\n\t * @param {Context} context context\n\t * @returns {string|Source=} the source code that will be included at the end of the module\n\t */\n\tgetEndContent(context) {\n\t\tif (this.runtimeCondition === false || !this.endContent) return \"\";\n\t\tif (this.runtimeCondition === true) return this.endContent;\n\t\tconst expr = context.runtimeTemplate.runtimeConditionExpression({\n\t\t\tchunkGraph: context.chunkGraph,\n\t\t\truntimeRequirements: context.runtimeRequirements,\n\t\t\truntime: context.runtime,\n\t\t\truntimeCondition: this.runtimeCondition\n\t\t});\n\t\tif (expr === \"true\") return this.endContent;\n\t\treturn wrapInCondition(expr, this.endContent);\n\t}\n\n\tmerge(other) {\n\t\tif (this.runtimeCondition === true) return this;\n\t\tif (other.runtimeCondition === true) return other;\n\t\tif (this.runtimeCondition === false) return other;\n\t\tif (other.runtimeCondition === false) return this;\n\t\tconst runtimeCondition = mergeRuntime(\n\t\t\tthis.runtimeCondition,\n\t\t\tother.runtimeCondition\n\t\t);\n\t\treturn new ConditionalInitFragment(\n\t\t\tthis.content,\n\t\t\tthis.stage,\n\t\t\tthis.position,\n\t\t\tthis.key,\n\t\t\truntimeCondition,\n\t\t\tthis.endContent\n\t\t);\n\t}\n}\n\nmodule.exports = ConditionalInitFragment;\n"]},"metadata":{},"sourceType":"script"}