{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst NullDependency = require(\"./NullDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n\nclass HarmonyExportHeaderDependency extends NullDependency {\n  constructor(range, rangeStatement) {\n    super();\n    this.range = range;\n    this.rangeStatement = rangeStatement;\n  }\n\n  get type() {\n    return \"harmony export header\";\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.range);\n    write(this.rangeStatement);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.range = read();\n    this.rangeStatement = read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(HarmonyExportHeaderDependency, \"webpack/lib/dependencies/HarmonyExportHeaderDependency\");\nHarmonyExportHeaderDependency.Template = class HarmonyExportDependencyTemplate extends NullDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const dep =\n    /** @type {HarmonyExportHeaderDependency} */\n    dependency;\n    const content = \"\";\n    const replaceUntil = dep.range ? dep.range[0] - 1 : dep.rangeStatement[1] - 1;\n    source.replace(dep.rangeStatement[0], replaceUntil, content);\n  }\n\n};\nmodule.exports = HarmonyExportHeaderDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/HarmonyExportHeaderDependency.js"],"names":["makeSerializable","require","NullDependency","HarmonyExportHeaderDependency","constructor","range","rangeStatement","type","serialize","context","write","deserialize","read","Template","HarmonyExportDependencyTemplate","apply","dependency","source","templateContext","dep","content","replaceUntil","replace","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;AAEA;;AACA;;AACA;;;AAEA,MAAME,6BAAN,SAA4CD,cAA5C,CAA2D;AAC1DE,EAAAA,WAAW,CAACC,KAAD,EAAQC,cAAR,EAAwB;AAClC;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA;;AAEO,MAAJC,IAAI,GAAG;AACV,WAAO,uBAAP;AACA;;AAEDC,EAAAA,SAAS,CAACC,OAAD,EAAU;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,OAAlB;AACAC,IAAAA,KAAK,CAAC,KAAKL,KAAN,CAAL;AACAK,IAAAA,KAAK,CAAC,KAAKJ,cAAN,CAAL;AACA,UAAME,SAAN,CAAgBC,OAAhB;AACA;;AAEDE,EAAAA,WAAW,CAACF,OAAD,EAAU;AACpB,UAAM;AAAEG,MAAAA;AAAF,QAAWH,OAAjB;AACA,SAAKJ,KAAL,GAAaO,IAAI,EAAjB;AACA,SAAKN,cAAL,GAAsBM,IAAI,EAA1B;AACA,UAAMD,WAAN,CAAkBF,OAAlB;AACA;;AAvByD;;AA0B3DT,gBAAgB,CACfG,6BADe,EAEf,wDAFe,CAAhB;AAKAA,6BAA6B,CAACU,QAA9B,GAAyC,MAAMC,+BAAN,SACxCZ,cAAc,CAACW,QADyB,CAEvC;AACD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,KAAK,CAACC,UAAD,EAAaC,MAAb,EAAqBC,eAArB,EAAsC;AAC1C,UAAMC,GAAG;AAAG;AAA8CH,IAAAA,UAA1D;AACA,UAAMI,OAAO,GAAG,EAAhB;AACA,UAAMC,YAAY,GAAGF,GAAG,CAACd,KAAJ,GAClBc,GAAG,CAACd,KAAJ,CAAU,CAAV,IAAe,CADG,GAElBc,GAAG,CAACb,cAAJ,CAAmB,CAAnB,IAAwB,CAF3B;AAGAW,IAAAA,MAAM,CAACK,OAAP,CAAeH,GAAG,CAACb,cAAJ,CAAmB,CAAnB,CAAf,EAAsCe,YAAtC,EAAoDD,OAApD;AACA;;AAdA,CAFF;AAmBAG,MAAM,CAACC,OAAP,GAAiBrB,6BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass HarmonyExportHeaderDependency extends NullDependency {\n\tconstructor(range, rangeStatement) {\n\t\tsuper();\n\t\tthis.range = range;\n\t\tthis.rangeStatement = rangeStatement;\n\t}\n\n\tget type() {\n\t\treturn \"harmony export header\";\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.range);\n\t\twrite(this.rangeStatement);\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.range = read();\n\t\tthis.rangeStatement = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(\n\tHarmonyExportHeaderDependency,\n\t\"webpack/lib/dependencies/HarmonyExportHeaderDependency\"\n);\n\nHarmonyExportHeaderDependency.Template = class HarmonyExportDependencyTemplate extends (\n\tNullDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst dep = /** @type {HarmonyExportHeaderDependency} */ (dependency);\n\t\tconst content = \"\";\n\t\tconst replaceUntil = dep.range\n\t\t\t? dep.range[0] - 1\n\t\t\t: dep.rangeStatement[1] - 1;\n\t\tsource.replace(dep.rangeStatement[0], replaceUntil, content);\n\t}\n};\n\nmodule.exports = HarmonyExportHeaderDependency;\n"]},"metadata":{},"sourceType":"script"}