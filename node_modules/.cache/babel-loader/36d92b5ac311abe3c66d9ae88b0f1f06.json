{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createHash = require(\"./util/createHash\");\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./DependencyTemplate\")} DependencyTemplate */\n\n/** @typedef {typeof import(\"./util/Hash\")} Hash */\n\n/** @typedef {new (...args: any[]) => Dependency} DependencyConstructor */\n\n\nclass DependencyTemplates {\n  /**\n   * @param {string | Hash} hashFunction the hash function to use\n   */\n  constructor() {\n    let hashFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"md4\";\n\n    /** @type {Map<Function, DependencyTemplate>} */\n    this._map = new Map();\n    /** @type {string} */\n\n    this._hash = \"31d6cfe0d16ae931b73c59d7e0c089c0\";\n    this._hashFunction = hashFunction;\n  }\n  /**\n   * @param {DependencyConstructor} dependency Constructor of Dependency\n   * @returns {DependencyTemplate} template for this dependency\n   */\n\n\n  get(dependency) {\n    return this._map.get(dependency);\n  }\n  /**\n   * @param {DependencyConstructor} dependency Constructor of Dependency\n   * @param {DependencyTemplate} dependencyTemplate template for this dependency\n   * @returns {void}\n   */\n\n\n  set(dependency, dependencyTemplate) {\n    this._map.set(dependency, dependencyTemplate);\n  }\n  /**\n   * @param {string} part additional hash contributor\n   * @returns {void}\n   */\n\n\n  updateHash(part) {\n    const hash = createHash(this._hashFunction);\n    hash.update(`${this._hash}${part}`);\n    this._hash =\n    /** @type {string} */\n    hash.digest(\"hex\");\n  }\n\n  getHash() {\n    return this._hash;\n  }\n\n  clone() {\n    const newInstance = new DependencyTemplates(this._hashFunction);\n    newInstance._map = new Map(this._map);\n    newInstance._hash = this._hash;\n    return newInstance;\n  }\n\n}\n\nmodule.exports = DependencyTemplates;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/DependencyTemplates.js"],"names":["createHash","require","DependencyTemplates","constructor","hashFunction","_map","Map","_hash","_hashFunction","get","dependency","set","dependencyTemplate","updateHash","part","hash","update","digest","getHash","clone","newInstance","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,mBAAD,CAA1B;AAEA;;AACA;;AACA;;AAEA;;;AAEA,MAAMC,mBAAN,CAA0B;AACzB;AACD;AACA;AACCC,EAAAA,WAAW,GAAuB;AAAA,QAAtBC,YAAsB,uEAAP,KAAO;;AACjC;AACA,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACA;;AACA,SAAKC,KAAL,GAAa,kCAAb;AACA,SAAKC,aAAL,GAAqBJ,YAArB;AACA;AAED;AACD;AACA;AACA;;;AACCK,EAAAA,GAAG,CAACC,UAAD,EAAa;AACf,WAAO,KAAKL,IAAL,CAAUI,GAAV,CAAcC,UAAd,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,GAAG,CAACD,UAAD,EAAaE,kBAAb,EAAiC;AACnC,SAAKP,IAAL,CAAUM,GAAV,CAAcD,UAAd,EAA0BE,kBAA1B;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,UAAU,CAACC,IAAD,EAAO;AAChB,UAAMC,IAAI,GAAGf,UAAU,CAAC,KAAKQ,aAAN,CAAvB;AACAO,IAAAA,IAAI,CAACC,MAAL,CAAa,GAAE,KAAKT,KAAM,GAAEO,IAAK,EAAjC;AACA,SAAKP,KAAL;AAAa;AAAuBQ,IAAAA,IAAI,CAACE,MAAL,CAAY,KAAZ,CAApC;AACA;;AAEDC,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKX,KAAZ;AACA;;AAEDY,EAAAA,KAAK,GAAG;AACP,UAAMC,WAAW,GAAG,IAAIlB,mBAAJ,CAAwB,KAAKM,aAA7B,CAApB;AACAY,IAAAA,WAAW,CAACf,IAAZ,GAAmB,IAAIC,GAAJ,CAAQ,KAAKD,IAAb,CAAnB;AACAe,IAAAA,WAAW,CAACb,KAAZ,GAAoB,KAAKA,KAAzB;AACA,WAAOa,WAAP;AACA;;AAhDwB;;AAmD1BC,MAAM,CAACC,OAAP,GAAiBpB,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst createHash = require(\"./util/createHash\");\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./DependencyTemplate\")} DependencyTemplate */\n/** @typedef {typeof import(\"./util/Hash\")} Hash */\n\n/** @typedef {new (...args: any[]) => Dependency} DependencyConstructor */\n\nclass DependencyTemplates {\n\t/**\n\t * @param {string | Hash} hashFunction the hash function to use\n\t */\n\tconstructor(hashFunction = \"md4\") {\n\t\t/** @type {Map<Function, DependencyTemplate>} */\n\t\tthis._map = new Map();\n\t\t/** @type {string} */\n\t\tthis._hash = \"31d6cfe0d16ae931b73c59d7e0c089c0\";\n\t\tthis._hashFunction = hashFunction;\n\t}\n\n\t/**\n\t * @param {DependencyConstructor} dependency Constructor of Dependency\n\t * @returns {DependencyTemplate} template for this dependency\n\t */\n\tget(dependency) {\n\t\treturn this._map.get(dependency);\n\t}\n\n\t/**\n\t * @param {DependencyConstructor} dependency Constructor of Dependency\n\t * @param {DependencyTemplate} dependencyTemplate template for this dependency\n\t * @returns {void}\n\t */\n\tset(dependency, dependencyTemplate) {\n\t\tthis._map.set(dependency, dependencyTemplate);\n\t}\n\n\t/**\n\t * @param {string} part additional hash contributor\n\t * @returns {void}\n\t */\n\tupdateHash(part) {\n\t\tconst hash = createHash(this._hashFunction);\n\t\thash.update(`${this._hash}${part}`);\n\t\tthis._hash = /** @type {string} */ (hash.digest(\"hex\"));\n\t}\n\n\tgetHash() {\n\t\treturn this._hash;\n\t}\n\n\tclone() {\n\t\tconst newInstance = new DependencyTemplates(this._hashFunction);\n\t\tnewInstance._map = new Map(this._map);\n\t\tnewInstance._hash = this._hash;\n\t\treturn newInstance;\n\t}\n}\n\nmodule.exports = DependencyTemplates;\n"]},"metadata":{},"sourceType":"script"}