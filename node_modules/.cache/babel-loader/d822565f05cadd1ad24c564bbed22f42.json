{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  ConcatSource,\n  RawSource\n} = require(\"webpack-sources\");\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nconst Template = require(\"../Template\");\n\nconst {\n  getChunkFilenameTemplate,\n  getCompilationHooks\n} = require(\"./JavascriptModulesPlugin\");\n\nconst {\n  generateEntryStartup,\n  updateHashForEntryStartup\n} = require(\"./StartupHelpers\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass CommonJsChunkFormatPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"CommonJsChunkFormatPlugin\", compilation => {\n      compilation.hooks.additionalChunkRuntimeRequirements.tap(\"CommonJsChunkLoadingPlugin\", (chunk, set, _ref) => {\n        let {\n          chunkGraph\n        } = _ref;\n        if (chunk.hasRuntime()) return;\n\n        if (chunkGraph.getNumberOfEntryModules(chunk) > 0) {\n          set.add(RuntimeGlobals.require);\n          set.add(RuntimeGlobals.startupEntrypoint);\n          set.add(RuntimeGlobals.externalInstallChunk);\n        }\n      });\n      const hooks = getCompilationHooks(compilation);\n      hooks.renderChunk.tap(\"CommonJsChunkFormatPlugin\", (modules, renderContext) => {\n        const {\n          chunk,\n          chunkGraph,\n          runtimeTemplate\n        } = renderContext;\n        const source = new ConcatSource();\n        source.add(`exports.id = ${JSON.stringify(chunk.id)};\\n`);\n        source.add(`exports.ids = ${JSON.stringify(chunk.ids)};\\n`);\n        source.add(`exports.modules = `);\n        source.add(modules);\n        source.add(\";\\n\");\n        const runtimeModules = chunkGraph.getChunkRuntimeModulesInOrder(chunk);\n\n        if (runtimeModules.length > 0) {\n          source.add(\"exports.runtime =\\n\");\n          source.add(Template.renderChunkRuntimeModules(runtimeModules, renderContext));\n        }\n\n        const entries = Array.from(chunkGraph.getChunkEntryModulesWithChunkGroupIterable(chunk));\n\n        if (entries.length > 0) {\n          const runtimeChunk = entries[0][1].getRuntimeChunk();\n          const currentOutputName = compilation.getPath(getChunkFilenameTemplate(chunk, compilation.outputOptions), {\n            chunk,\n            contentHashType: \"javascript\"\n          }).split(\"/\");\n          const runtimeOutputName = compilation.getPath(getChunkFilenameTemplate(runtimeChunk, compilation.outputOptions), {\n            chunk: runtimeChunk,\n            contentHashType: \"javascript\"\n          }).split(\"/\"); // remove filename, we only need the directory\n\n          currentOutputName.pop(); // remove common parts\n\n          while (currentOutputName.length > 0 && runtimeOutputName.length > 0 && currentOutputName[0] === runtimeOutputName[0]) {\n            currentOutputName.shift();\n            runtimeOutputName.shift();\n          } // create final path\n\n\n          const runtimePath = (currentOutputName.length > 0 ? \"../\".repeat(currentOutputName.length) : \"./\") + runtimeOutputName.join(\"/\");\n          const entrySource = new ConcatSource();\n          entrySource.add(`(${runtimeTemplate.supportsArrowFunction() ? \"() => \" : \"function() \"}{\\n`);\n          entrySource.add(\"var exports = {};\\n\");\n          entrySource.add(source);\n          entrySource.add(\";\\n\\n// load runtime\\n\");\n          entrySource.add(`var __webpack_require__ = require(${JSON.stringify(runtimePath)});\\n`);\n          entrySource.add(`${RuntimeGlobals.externalInstallChunk}(exports);\\n`);\n          const startupSource = new RawSource(generateEntryStartup(chunkGraph, runtimeTemplate, entries, chunk, false));\n          entrySource.add(hooks.renderStartup.call(startupSource, entries[entries.length - 1][0], { ...renderContext,\n            inlined: false\n          }));\n          entrySource.add(\"\\n})()\");\n          return entrySource;\n        }\n\n        return source;\n      });\n      hooks.chunkHash.tap(\"CommonJsChunkFormatPlugin\", (chunk, hash, _ref2) => {\n        let {\n          chunkGraph\n        } = _ref2;\n        if (chunk.hasRuntime()) return;\n        hash.update(\"CommonJsChunkFormatPlugin\");\n        hash.update(\"1\");\n        const entries = Array.from(chunkGraph.getChunkEntryModulesWithChunkGroupIterable(chunk));\n        updateHashForEntryStartup(hash, chunkGraph, entries, chunk);\n      });\n    });\n  }\n\n}\n\nmodule.exports = CommonJsChunkFormatPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/javascript/CommonJsChunkFormatPlugin.js"],"names":["ConcatSource","RawSource","require","RuntimeGlobals","Template","getChunkFilenameTemplate","getCompilationHooks","generateEntryStartup","updateHashForEntryStartup","CommonJsChunkFormatPlugin","apply","compiler","hooks","thisCompilation","tap","compilation","additionalChunkRuntimeRequirements","chunk","set","chunkGraph","hasRuntime","getNumberOfEntryModules","add","startupEntrypoint","externalInstallChunk","renderChunk","modules","renderContext","runtimeTemplate","source","JSON","stringify","id","ids","runtimeModules","getChunkRuntimeModulesInOrder","length","renderChunkRuntimeModules","entries","Array","from","getChunkEntryModulesWithChunkGroupIterable","runtimeChunk","getRuntimeChunk","currentOutputName","getPath","outputOptions","contentHashType","split","runtimeOutputName","pop","shift","runtimePath","repeat","join","entrySource","supportsArrowFunction","startupSource","renderStartup","call","inlined","chunkHash","hash","update","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource, RawSource } = require(\"webpack-sources\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst {\n\tgetChunkFilenameTemplate,\n\tgetCompilationHooks\n} = require(\"./JavascriptModulesPlugin\");\nconst {\n\tgenerateEntryStartup,\n\tupdateHashForEntryStartup\n} = require(\"./StartupHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass CommonJsChunkFormatPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"CommonJsChunkFormatPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.additionalChunkRuntimeRequirements.tap(\n\t\t\t\t\t\"CommonJsChunkLoadingPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tif (chunk.hasRuntime()) return;\n\t\t\t\t\t\tif (chunkGraph.getNumberOfEntryModules(chunk) > 0) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.require);\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.startupEntrypoint);\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.externalInstallChunk);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconst hooks = getCompilationHooks(compilation);\n\t\t\t\thooks.renderChunk.tap(\n\t\t\t\t\t\"CommonJsChunkFormatPlugin\",\n\t\t\t\t\t(modules, renderContext) => {\n\t\t\t\t\t\tconst { chunk, chunkGraph, runtimeTemplate } = renderContext;\n\t\t\t\t\t\tconst source = new ConcatSource();\n\t\t\t\t\t\tsource.add(`exports.id = ${JSON.stringify(chunk.id)};\\n`);\n\t\t\t\t\t\tsource.add(`exports.ids = ${JSON.stringify(chunk.ids)};\\n`);\n\t\t\t\t\t\tsource.add(`exports.modules = `);\n\t\t\t\t\t\tsource.add(modules);\n\t\t\t\t\t\tsource.add(\";\\n\");\n\t\t\t\t\t\tconst runtimeModules =\n\t\t\t\t\t\t\tchunkGraph.getChunkRuntimeModulesInOrder(chunk);\n\t\t\t\t\t\tif (runtimeModules.length > 0) {\n\t\t\t\t\t\t\tsource.add(\"exports.runtime =\\n\");\n\t\t\t\t\t\t\tsource.add(\n\t\t\t\t\t\t\t\tTemplate.renderChunkRuntimeModules(\n\t\t\t\t\t\t\t\t\truntimeModules,\n\t\t\t\t\t\t\t\t\trenderContext\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst entries = Array.from(\n\t\t\t\t\t\t\tchunkGraph.getChunkEntryModulesWithChunkGroupIterable(chunk)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (entries.length > 0) {\n\t\t\t\t\t\t\tconst runtimeChunk = entries[0][1].getRuntimeChunk();\n\t\t\t\t\t\t\tconst currentOutputName = compilation\n\t\t\t\t\t\t\t\t.getPath(\n\t\t\t\t\t\t\t\t\tgetChunkFilenameTemplate(chunk, compilation.outputOptions),\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.split(\"/\");\n\t\t\t\t\t\t\tconst runtimeOutputName = compilation\n\t\t\t\t\t\t\t\t.getPath(\n\t\t\t\t\t\t\t\t\tgetChunkFilenameTemplate(\n\t\t\t\t\t\t\t\t\t\truntimeChunk,\n\t\t\t\t\t\t\t\t\t\tcompilation.outputOptions\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tchunk: runtimeChunk,\n\t\t\t\t\t\t\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.split(\"/\");\n\n\t\t\t\t\t\t\t// remove filename, we only need the directory\n\t\t\t\t\t\t\tcurrentOutputName.pop();\n\n\t\t\t\t\t\t\t// remove common parts\n\t\t\t\t\t\t\twhile (\n\t\t\t\t\t\t\t\tcurrentOutputName.length > 0 &&\n\t\t\t\t\t\t\t\truntimeOutputName.length > 0 &&\n\t\t\t\t\t\t\t\tcurrentOutputName[0] === runtimeOutputName[0]\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcurrentOutputName.shift();\n\t\t\t\t\t\t\t\truntimeOutputName.shift();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// create final path\n\t\t\t\t\t\t\tconst runtimePath =\n\t\t\t\t\t\t\t\t(currentOutputName.length > 0\n\t\t\t\t\t\t\t\t\t? \"../\".repeat(currentOutputName.length)\n\t\t\t\t\t\t\t\t\t: \"./\") + runtimeOutputName.join(\"/\");\n\n\t\t\t\t\t\t\tconst entrySource = new ConcatSource();\n\t\t\t\t\t\t\tentrySource.add(\n\t\t\t\t\t\t\t\t`(${\n\t\t\t\t\t\t\t\t\truntimeTemplate.supportsArrowFunction()\n\t\t\t\t\t\t\t\t\t\t? \"() => \"\n\t\t\t\t\t\t\t\t\t\t: \"function() \"\n\t\t\t\t\t\t\t\t}{\\n`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tentrySource.add(\"var exports = {};\\n\");\n\t\t\t\t\t\t\tentrySource.add(source);\n\t\t\t\t\t\t\tentrySource.add(\";\\n\\n// load runtime\\n\");\n\t\t\t\t\t\t\tentrySource.add(\n\t\t\t\t\t\t\t\t`var __webpack_require__ = require(${JSON.stringify(\n\t\t\t\t\t\t\t\t\truntimePath\n\t\t\t\t\t\t\t\t)});\\n`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tentrySource.add(\n\t\t\t\t\t\t\t\t`${RuntimeGlobals.externalInstallChunk}(exports);\\n`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst startupSource = new RawSource(\n\t\t\t\t\t\t\t\tgenerateEntryStartup(\n\t\t\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\t\t\tentries,\n\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tentrySource.add(\n\t\t\t\t\t\t\t\thooks.renderStartup.call(\n\t\t\t\t\t\t\t\t\tstartupSource,\n\t\t\t\t\t\t\t\t\tentries[entries.length - 1][0],\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t...renderContext,\n\t\t\t\t\t\t\t\t\t\tinlined: false\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tentrySource.add(\"\\n})()\");\n\t\t\t\t\t\t\treturn entrySource;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn source;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\thooks.chunkHash.tap(\n\t\t\t\t\t\"CommonJsChunkFormatPlugin\",\n\t\t\t\t\t(chunk, hash, { chunkGraph }) => {\n\t\t\t\t\t\tif (chunk.hasRuntime()) return;\n\t\t\t\t\t\thash.update(\"CommonJsChunkFormatPlugin\");\n\t\t\t\t\t\thash.update(\"1\");\n\t\t\t\t\t\tconst entries = Array.from(\n\t\t\t\t\t\t\tchunkGraph.getChunkEntryModulesWithChunkGroupIterable(chunk)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tupdateHashForEntryStartup(hash, chunkGraph, entries, chunk);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = CommonJsChunkFormatPlugin;\n"]},"metadata":{},"sourceType":"script"}