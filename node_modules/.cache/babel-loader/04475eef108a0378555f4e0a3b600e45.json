{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n/** @typedef {import(\"../declarations/plugins/IgnorePlugin\").IgnorePluginOptions} IgnorePluginOptions */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./NormalModuleFactory\").ResolveData} ResolveData */\n\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/IgnorePlugin.check.js\"), () => require(\"../schemas/plugins/IgnorePlugin.json\"), {\n  name: \"Ignore Plugin\",\n  baseDataPath: \"options\"\n});\n\nclass IgnorePlugin {\n  /**\n   * @param {IgnorePluginOptions} options IgnorePlugin options\n   */\n  constructor(options) {\n    validate(options);\n    this.options = options;\n    /** @private @type {Function} */\n\n    this.checkIgnore = this.checkIgnore.bind(this);\n  }\n  /**\n   * Note that if \"contextRegExp\" is given, both the \"resourceRegExp\"\n   * and \"contextRegExp\" have to match.\n   *\n   * @param {ResolveData} resolveData resolve data\n   * @returns {false|undefined} returns false when the request should be ignored, otherwise undefined\n   */\n\n\n  checkIgnore(resolveData) {\n    if (\"checkResource\" in this.options && this.options.checkResource && this.options.checkResource(resolveData.request, resolveData.context)) {\n      return false;\n    }\n\n    if (\"resourceRegExp\" in this.options && this.options.resourceRegExp && this.options.resourceRegExp.test(resolveData.request)) {\n      if (\"contextRegExp\" in this.options && this.options.contextRegExp) {\n        // if \"contextRegExp\" is given,\n        // both the \"resourceRegExp\" and \"contextRegExp\" have to match.\n        if (this.options.contextRegExp.test(resolveData.context)) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.normalModuleFactory.tap(\"IgnorePlugin\", nmf => {\n      nmf.hooks.beforeResolve.tap(\"IgnorePlugin\", this.checkIgnore);\n    });\n    compiler.hooks.contextModuleFactory.tap(\"IgnorePlugin\", cmf => {\n      cmf.hooks.beforeResolve.tap(\"IgnorePlugin\", this.checkIgnore);\n    });\n  }\n\n}\n\nmodule.exports = IgnorePlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/IgnorePlugin.js"],"names":["createSchemaValidation","require","validate","name","baseDataPath","IgnorePlugin","constructor","options","checkIgnore","bind","resolveData","checkResource","request","context","resourceRegExp","test","contextRegExp","apply","compiler","hooks","normalModuleFactory","tap","nmf","beforeResolve","contextModuleFactory","cmf","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,iCAAD,CAAtC;AAEA;;AACA;;AACA;;;AAEA,MAAMC,QAAQ,GAAGF,sBAAsB,CACtCC,OAAO,CAAC,0CAAD,CAD+B,EAEtC,MAAMA,OAAO,CAAC,sCAAD,CAFyB,EAGtC;AACCE,EAAAA,IAAI,EAAE,eADP;AAECC,EAAAA,YAAY,EAAE;AAFf,CAHsC,CAAvC;;AASA,MAAMC,YAAN,CAAmB;AAClB;AACD;AACA;AACCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpBL,IAAAA,QAAQ,CAACK,OAAD,CAAR;AACA,SAAKA,OAAL,GAAeA,OAAf;AAEA;;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCD,EAAAA,WAAW,CAACE,WAAD,EAAc;AACxB,QACC,mBAAmB,KAAKH,OAAxB,IACA,KAAKA,OAAL,CAAaI,aADb,IAEA,KAAKJ,OAAL,CAAaI,aAAb,CAA2BD,WAAW,CAACE,OAAvC,EAAgDF,WAAW,CAACG,OAA5D,CAHD,EAIE;AACD,aAAO,KAAP;AACA;;AAED,QACC,oBAAoB,KAAKN,OAAzB,IACA,KAAKA,OAAL,CAAaO,cADb,IAEA,KAAKP,OAAL,CAAaO,cAAb,CAA4BC,IAA5B,CAAiCL,WAAW,CAACE,OAA7C,CAHD,EAIE;AACD,UAAI,mBAAmB,KAAKL,OAAxB,IAAmC,KAAKA,OAAL,CAAaS,aAApD,EAAmE;AAClE;AACA;AACA,YAAI,KAAKT,OAAL,CAAaS,aAAb,CAA2BD,IAA3B,CAAgCL,WAAW,CAACG,OAA5C,CAAJ,EAA0D;AACzD,iBAAO,KAAP;AACA;AACD,OAND,MAMO;AACN,eAAO,KAAP;AACA;AACD;AACD;AAED;AACD;AACA;AACA;AACA;;;AACCI,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,mBAAf,CAAmCC,GAAnC,CAAuC,cAAvC,EAAuDC,GAAG,IAAI;AAC7DA,MAAAA,GAAG,CAACH,KAAJ,CAAUI,aAAV,CAAwBF,GAAxB,CAA4B,cAA5B,EAA4C,KAAKb,WAAjD;AACA,KAFD;AAGAU,IAAAA,QAAQ,CAACC,KAAT,CAAeK,oBAAf,CAAoCH,GAApC,CAAwC,cAAxC,EAAwDI,GAAG,IAAI;AAC9DA,MAAAA,GAAG,CAACN,KAAJ,CAAUI,aAAV,CAAwBF,GAAxB,CAA4B,cAA5B,EAA4C,KAAKb,WAAjD;AACA,KAFD;AAGA;;AAzDiB;;AA4DnBkB,MAAM,CAACC,OAAP,GAAiBtB,YAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\n/** @typedef {import(\"../declarations/plugins/IgnorePlugin\").IgnorePluginOptions} IgnorePluginOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./NormalModuleFactory\").ResolveData} ResolveData */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/IgnorePlugin.check.js\"),\n\t() => require(\"../schemas/plugins/IgnorePlugin.json\"),\n\t{\n\t\tname: \"Ignore Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass IgnorePlugin {\n\t/**\n\t * @param {IgnorePluginOptions} options IgnorePlugin options\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\t\tthis.options = options;\n\n\t\t/** @private @type {Function} */\n\t\tthis.checkIgnore = this.checkIgnore.bind(this);\n\t}\n\n\t/**\n\t * Note that if \"contextRegExp\" is given, both the \"resourceRegExp\"\n\t * and \"contextRegExp\" have to match.\n\t *\n\t * @param {ResolveData} resolveData resolve data\n\t * @returns {false|undefined} returns false when the request should be ignored, otherwise undefined\n\t */\n\tcheckIgnore(resolveData) {\n\t\tif (\n\t\t\t\"checkResource\" in this.options &&\n\t\t\tthis.options.checkResource &&\n\t\t\tthis.options.checkResource(resolveData.request, resolveData.context)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t\"resourceRegExp\" in this.options &&\n\t\t\tthis.options.resourceRegExp &&\n\t\t\tthis.options.resourceRegExp.test(resolveData.request)\n\t\t) {\n\t\t\tif (\"contextRegExp\" in this.options && this.options.contextRegExp) {\n\t\t\t\t// if \"contextRegExp\" is given,\n\t\t\t\t// both the \"resourceRegExp\" and \"contextRegExp\" have to match.\n\t\t\t\tif (this.options.contextRegExp.test(resolveData.context)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.normalModuleFactory.tap(\"IgnorePlugin\", nmf => {\n\t\t\tnmf.hooks.beforeResolve.tap(\"IgnorePlugin\", this.checkIgnore);\n\t\t});\n\t\tcompiler.hooks.contextModuleFactory.tap(\"IgnorePlugin\", cmf => {\n\t\t\tcmf.hooks.beforeResolve.tap(\"IgnorePlugin\", this.checkIgnore);\n\t\t});\n\t}\n}\n\nmodule.exports = IgnorePlugin;\n"]},"metadata":{},"sourceType":"script"}