{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar util = require('./util');\n\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\n\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\n\n\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n\n  return set;\n};\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\n\n\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\n\n\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\n\n\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\n\n\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n\n    if (idx >= 0) {\n      return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\n\n\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n\n  throw new Error('No element indexed by ' + aIdx);\n};\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\n\n\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/terser-webpack-plugin/node_modules/source-map/lib/array-set.js"],"names":["util","require","has","Object","prototype","hasOwnProperty","hasNativeMap","Map","ArraySet","_array","_set","create","fromArray","ArraySet_fromArray","aArray","aAllowDuplicates","set","i","len","length","add","size","ArraySet_size","getOwnPropertyNames","ArraySet_add","aStr","sStr","toSetString","isDuplicate","call","idx","push","ArraySet_has","indexOf","ArraySet_indexOf","get","Error","at","ArraySet_at","aIdx","toArray","ArraySet_toArray","slice","exports"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,GAAG,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAA3B;AACA,IAAIC,YAAY,GAAG,OAAOC,GAAP,KAAe,WAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,GAAoB;AAClB,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,IAAL,GAAYJ,YAAY,GAAG,IAAIC,GAAJ,EAAH,GAAeJ,MAAM,CAACQ,MAAP,CAAc,IAAd,CAAvC;AACD;AAED;AACA;AACA;;;AACAH,QAAQ,CAACI,SAAT,GAAqB,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,gBAApC,EAAsD;AACzE,MAAIC,GAAG,GAAG,IAAIR,QAAJ,EAAV;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGJ,MAAM,CAACK,MAA7B,EAAqCF,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDD,IAAAA,GAAG,CAACI,GAAJ,CAAQN,MAAM,CAACG,CAAD,CAAd,EAAmBF,gBAAnB;AACD;;AACD,SAAOC,GAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACAR,QAAQ,CAACJ,SAAT,CAAmBiB,IAAnB,GAA0B,SAASC,aAAT,GAAyB;AACjD,SAAOhB,YAAY,GAAG,KAAKI,IAAL,CAAUW,IAAb,GAAoBlB,MAAM,CAACoB,mBAAP,CAA2B,KAAKb,IAAhC,EAAsCS,MAA7E;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAX,QAAQ,CAACJ,SAAT,CAAmBgB,GAAnB,GAAyB,SAASI,YAAT,CAAsBC,IAAtB,EAA4BV,gBAA5B,EAA8C;AACrE,MAAIW,IAAI,GAAGpB,YAAY,GAAGmB,IAAH,GAAUzB,IAAI,CAAC2B,WAAL,CAAiBF,IAAjB,CAAjC;AACA,MAAIG,WAAW,GAAGtB,YAAY,GAAG,KAAKJ,GAAL,CAASuB,IAAT,CAAH,GAAoBvB,GAAG,CAAC2B,IAAJ,CAAS,KAAKnB,IAAd,EAAoBgB,IAApB,CAAlD;AACA,MAAII,GAAG,GAAG,KAAKrB,MAAL,CAAYU,MAAtB;;AACA,MAAI,CAACS,WAAD,IAAgBb,gBAApB,EAAsC;AACpC,SAAKN,MAAL,CAAYsB,IAAZ,CAAiBN,IAAjB;AACD;;AACD,MAAI,CAACG,WAAL,EAAkB;AAChB,QAAItB,YAAJ,EAAkB;AAChB,WAAKI,IAAL,CAAUM,GAAV,CAAcS,IAAd,EAAoBK,GAApB;AACD,KAFD,MAEO;AACL,WAAKpB,IAAL,CAAUgB,IAAV,IAAkBI,GAAlB;AACD;AACF;AACF,CAdD;AAgBA;AACA;AACA;AACA;AACA;;;AACAtB,QAAQ,CAACJ,SAAT,CAAmBF,GAAnB,GAAyB,SAAS8B,YAAT,CAAsBP,IAAtB,EAA4B;AACnD,MAAInB,YAAJ,EAAkB;AAChB,WAAO,KAAKI,IAAL,CAAUR,GAAV,CAAcuB,IAAd,CAAP;AACD,GAFD,MAEO;AACL,QAAIC,IAAI,GAAG1B,IAAI,CAAC2B,WAAL,CAAiBF,IAAjB,CAAX;AACA,WAAOvB,GAAG,CAAC2B,IAAJ,CAAS,KAAKnB,IAAd,EAAoBgB,IAApB,CAAP;AACD;AACF,CAPD;AASA;AACA;AACA;AACA;AACA;;;AACAlB,QAAQ,CAACJ,SAAT,CAAmB6B,OAAnB,GAA6B,SAASC,gBAAT,CAA0BT,IAA1B,EAAgC;AAC3D,MAAInB,YAAJ,EAAkB;AAChB,QAAIwB,GAAG,GAAG,KAAKpB,IAAL,CAAUyB,GAAV,CAAcV,IAAd,CAAV;;AACA,QAAIK,GAAG,IAAI,CAAX,EAAc;AACV,aAAOA,GAAP;AACH;AACF,GALD,MAKO;AACL,QAAIJ,IAAI,GAAG1B,IAAI,CAAC2B,WAAL,CAAiBF,IAAjB,CAAX;;AACA,QAAIvB,GAAG,CAAC2B,IAAJ,CAAS,KAAKnB,IAAd,EAAoBgB,IAApB,CAAJ,EAA+B;AAC7B,aAAO,KAAKhB,IAAL,CAAUgB,IAAV,CAAP;AACD;AACF;;AAED,QAAM,IAAIU,KAAJ,CAAU,MAAMX,IAAN,GAAa,sBAAvB,CAAN;AACD,CAdD;AAgBA;AACA;AACA;AACA;AACA;;;AACAjB,QAAQ,CAACJ,SAAT,CAAmBiC,EAAnB,GAAwB,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACjD,MAAIA,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAG,KAAK9B,MAAL,CAAYU,MAApC,EAA4C;AAC1C,WAAO,KAAKV,MAAL,CAAY8B,IAAZ,CAAP;AACD;;AACD,QAAM,IAAIH,KAAJ,CAAU,2BAA2BG,IAArC,CAAN;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACA/B,QAAQ,CAACJ,SAAT,CAAmBoC,OAAnB,GAA6B,SAASC,gBAAT,GAA4B;AACvD,SAAO,KAAKhC,MAAL,CAAYiC,KAAZ,EAAP;AACD,CAFD;;AAIAC,OAAO,CAACnC,QAAR,GAAmBA,QAAnB","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n"]},"metadata":{},"sourceType":"script"}