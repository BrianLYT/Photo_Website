{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/**\n * @template K\n * @template V\n */\n\nclass StackedCacheMap {\n  constructor() {\n    /** @type {Map<K, V>} */\n    this.map = new Map();\n    /** @type {ReadonlyMap<K, V>[]} */\n\n    this.stack = [];\n  }\n  /**\n   * @param {ReadonlyMap<K, V>} map map to add\n   * @param {boolean} immutable if 'map' is immutable and StackedCacheMap can keep referencing it\n   */\n\n\n  addAll(map, immutable) {\n    if (immutable) {\n      this.stack.push(map); // largest map should go first\n\n      for (let i = this.stack.length - 1; i > 0; i--) {\n        const beforeLast = this.stack[i - 1];\n        if (beforeLast.size >= map.size) break;\n        this.stack[i] = beforeLast;\n        this.stack[i - 1] = map;\n      }\n    } else {\n      for (const [key, value] of map) {\n        this.map.set(key, value);\n      }\n    }\n  }\n  /**\n   * @param {K} item the key of the element to add\n   * @param {V} value the value of the element to add\n   * @returns {void}\n   */\n\n\n  set(item, value) {\n    this.map.set(item, value);\n  }\n  /**\n   * @param {K} item the item to delete\n   * @returns {void}\n   */\n\n\n  delete(item) {\n    throw new Error(\"Items can't be deleted from a StackedCacheMap\");\n  }\n  /**\n   * @param {K} item the item to test\n   * @returns {boolean} true if the item exists in this set\n   */\n\n\n  has(item) {\n    throw new Error(\"Checking StackedCacheMap.has before reading is inefficient, use StackedCacheMap.get and check for undefined\");\n  }\n  /**\n   * @param {K} item the key of the element to return\n   * @returns {V} the value of the element\n   */\n\n\n  get(item) {\n    for (const map of this.stack) {\n      const value = map.get(item);\n      if (value !== undefined) return value;\n    }\n\n    return this.map.get(item);\n  }\n\n  clear() {\n    this.stack.length = 0;\n    this.map.clear();\n  }\n\n  get size() {\n    let size = this.map.size;\n\n    for (const map of this.stack) {\n      size += map.size;\n    }\n\n    return size;\n  }\n\n  [Symbol.iterator]() {\n    const iterators = this.stack.map(map => map[Symbol.iterator]());\n    let current = this.map[Symbol.iterator]();\n    return {\n      next() {\n        let result = current.next();\n\n        while (result.done && iterators.length > 0) {\n          current = iterators.pop();\n          result = current.next();\n        }\n\n        return result;\n      }\n\n    };\n  }\n\n}\n\nmodule.exports = StackedCacheMap;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/util/StackedCacheMap.js"],"names":["StackedCacheMap","constructor","map","Map","stack","addAll","immutable","push","i","length","beforeLast","size","key","value","set","item","delete","Error","has","get","undefined","clear","Symbol","iterator","iterators","current","next","result","done","pop","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/**\n * @template K\n * @template V\n */\nclass StackedCacheMap {\n\tconstructor() {\n\t\t/** @type {Map<K, V>} */\n\t\tthis.map = new Map();\n\t\t/** @type {ReadonlyMap<K, V>[]} */\n\t\tthis.stack = [];\n\t}\n\n\t/**\n\t * @param {ReadonlyMap<K, V>} map map to add\n\t * @param {boolean} immutable if 'map' is immutable and StackedCacheMap can keep referencing it\n\t */\n\taddAll(map, immutable) {\n\t\tif (immutable) {\n\t\t\tthis.stack.push(map);\n\n\t\t\t// largest map should go first\n\t\t\tfor (let i = this.stack.length - 1; i > 0; i--) {\n\t\t\t\tconst beforeLast = this.stack[i - 1];\n\t\t\t\tif (beforeLast.size >= map.size) break;\n\t\t\t\tthis.stack[i] = beforeLast;\n\t\t\t\tthis.stack[i - 1] = map;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const [key, value] of map) {\n\t\t\t\tthis.map.set(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {K} item the key of the element to add\n\t * @param {V} value the value of the element to add\n\t * @returns {void}\n\t */\n\tset(item, value) {\n\t\tthis.map.set(item, value);\n\t}\n\n\t/**\n\t * @param {K} item the item to delete\n\t * @returns {void}\n\t */\n\tdelete(item) {\n\t\tthrow new Error(\"Items can't be deleted from a StackedCacheMap\");\n\t}\n\n\t/**\n\t * @param {K} item the item to test\n\t * @returns {boolean} true if the item exists in this set\n\t */\n\thas(item) {\n\t\tthrow new Error(\n\t\t\t\"Checking StackedCacheMap.has before reading is inefficient, use StackedCacheMap.get and check for undefined\"\n\t\t);\n\t}\n\n\t/**\n\t * @param {K} item the key of the element to return\n\t * @returns {V} the value of the element\n\t */\n\tget(item) {\n\t\tfor (const map of this.stack) {\n\t\t\tconst value = map.get(item);\n\t\t\tif (value !== undefined) return value;\n\t\t}\n\t\treturn this.map.get(item);\n\t}\n\n\tclear() {\n\t\tthis.stack.length = 0;\n\t\tthis.map.clear();\n\t}\n\n\tget size() {\n\t\tlet size = this.map.size;\n\t\tfor (const map of this.stack) {\n\t\t\tsize += map.size;\n\t\t}\n\t\treturn size;\n\t}\n\n\t[Symbol.iterator]() {\n\t\tconst iterators = this.stack.map(map => map[Symbol.iterator]());\n\t\tlet current = this.map[Symbol.iterator]();\n\t\treturn {\n\t\t\tnext() {\n\t\t\t\tlet result = current.next();\n\t\t\t\twhile (result.done && iterators.length > 0) {\n\t\t\t\t\tcurrent = iterators.pop();\n\t\t\t\t\tresult = current.next();\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n}\n\nmodule.exports = StackedCacheMap;\n"]},"metadata":{},"sourceType":"script"}