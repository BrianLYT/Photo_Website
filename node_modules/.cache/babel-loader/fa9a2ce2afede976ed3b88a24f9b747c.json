{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\n\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\n\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\n\nconst WebpackError = require(\"./WebpackError\");\n\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n/** @typedef {import(\"../declarations/WebpackOptions\").Externals} Externals */\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/DllReferencePlugin.check.js\"), () => require(\"../schemas/plugins/DllReferencePlugin.json\"), {\n  name: \"Dll Reference Plugin\",\n  baseDataPath: \"options\"\n});\n\nclass DllReferencePlugin {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  constructor(options) {\n    validate(options);\n    this.options = options;\n    /** @type {WeakMap<Object, {path: string, data: DllReferencePluginOptionsManifest?, error: Error?}>} */\n\n    this._compilationData = new WeakMap();\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n    });\n    compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", (params, callback) => {\n      if (\"manifest\" in this.options) {\n        const manifest = this.options.manifest;\n\n        if (typeof manifest === \"string\") {\n          compiler.inputFileSystem.readFile(manifest, (err, result) => {\n            if (err) return callback(err);\n            const data = {\n              path: manifest,\n              data: undefined,\n              error: undefined\n            }; // Catch errors parsing the manifest so that blank\n            // or malformed manifest files don't kill the process.\n\n            try {\n              data.data = parseJson(result.toString(\"utf-8\"));\n            } catch (e) {\n              // Store the error in the params so that it can\n              // be added as a compilation error later on.\n              const manifestPath = makePathsRelative(compiler.options.context, manifest, compiler.root);\n              data.error = new DllManifestError(manifestPath, e.message);\n            }\n\n            this._compilationData.set(params, data);\n\n            return callback();\n          });\n          return;\n        }\n      }\n\n      return callback();\n    });\n    compiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n      let name = this.options.name;\n      let sourceType = this.options.sourceType;\n      let content = \"content\" in this.options ? this.options.content : undefined;\n\n      if (\"manifest\" in this.options) {\n        let manifestParameter = this.options.manifest;\n        let manifest;\n\n        if (typeof manifestParameter === \"string\") {\n          const data = this._compilationData.get(params); // If there was an error parsing the manifest\n          // file, exit now because the error will be added\n          // as a compilation error in the \"compilation\" hook.\n\n\n          if (data.error) {\n            return;\n          }\n\n          manifest = data.data;\n        } else {\n          manifest = manifestParameter;\n        }\n\n        if (manifest) {\n          if (!name) name = manifest.name;\n          if (!sourceType) sourceType = manifest.type;\n          if (!content) content = manifest.content;\n        }\n      }\n      /** @type {Externals} */\n\n\n      const externals = {};\n      const source = \"dll-reference \" + name;\n      externals[source] = name;\n      const normalModuleFactory = params.normalModuleFactory;\n      new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n      new DelegatedModuleFactoryPlugin({\n        source: source,\n        type: this.options.type,\n        scope: this.options.scope,\n        context: this.options.context || compiler.options.context,\n        content,\n        extensions: this.options.extensions,\n        associatedObjectForCache: compiler.root\n      }).apply(normalModuleFactory);\n    });\n    compiler.hooks.compilation.tap(\"DllReferencePlugin\", (compilation, params) => {\n      if (\"manifest\" in this.options) {\n        let manifest = this.options.manifest;\n\n        if (typeof manifest === \"string\") {\n          const data = this._compilationData.get(params); // If there was an error parsing the manifest file, add the\n          // error as a compilation error to make the compilation fail.\n\n\n          if (data.error) {\n            compilation.errors.push(data.error);\n          }\n\n          compilation.fileDependencies.add(manifest);\n        }\n      }\n    });\n  }\n\n}\n\nclass DllManifestError extends WebpackError {\n  constructor(filename, message) {\n    super();\n    this.name = \"DllManifestError\";\n    this.message = `Dll manifest ${filename}\\n${message}`;\n  }\n\n}\n\nmodule.exports = DllReferencePlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/DllReferencePlugin.js"],"names":["parseJson","require","DelegatedModuleFactoryPlugin","ExternalModuleFactoryPlugin","WebpackError","DelegatedSourceDependency","createSchemaValidation","makePathsRelative","validate","name","baseDataPath","DllReferencePlugin","constructor","options","_compilationData","WeakMap","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","beforeCompile","tapAsync","params","callback","manifest","inputFileSystem","readFile","err","result","data","path","undefined","error","toString","e","manifestPath","context","root","DllManifestError","message","compile","sourceType","content","manifestParameter","get","type","externals","source","scope","extensions","associatedObjectForCache","errors","push","fileDependencies","add","filename","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst WebpackError = require(\"./WebpackError\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\n/** @typedef {import(\"../declarations/WebpackOptions\").Externals} Externals */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/DllReferencePlugin.check.js\"),\n\t() => require(\"../schemas/plugins/DllReferencePlugin.json\"),\n\t{\n\t\tname: \"Dll Reference Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass DllReferencePlugin {\n\t/**\n\t * @param {DllReferencePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\t\tthis.options = options;\n\t\t/** @type {WeakMap<Object, {path: string, data: DllReferencePluginOptionsManifest?, error: Error?}>} */\n\t\tthis._compilationData = new WeakMap();\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.beforeCompile.tapAsync(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(params, callback) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tconst manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tcompiler.inputFileSystem.readFile(manifest, (err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\t\tpath: manifest,\n\t\t\t\t\t\t\t\tdata: undefined,\n\t\t\t\t\t\t\t\terror: undefined\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t// Catch errors parsing the manifest so that blank\n\t\t\t\t\t\t\t// or malformed manifest files don't kill the process.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdata.data = parseJson(result.toString(\"utf-8\"));\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t// Store the error in the params so that it can\n\t\t\t\t\t\t\t\t// be added as a compilation error later on.\n\t\t\t\t\t\t\t\tconst manifestPath = makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.options.context,\n\t\t\t\t\t\t\t\t\tmanifest,\n\t\t\t\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdata.error = new DllManifestError(manifestPath, e.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._compilationData.set(params, data);\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n\t\t\tlet name = this.options.name;\n\t\t\tlet sourceType = this.options.sourceType;\n\t\t\tlet content =\n\t\t\t\t\"content\" in this.options ? this.options.content : undefined;\n\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\tlet manifestParameter = this.options.manifest;\n\t\t\t\tlet manifest;\n\t\t\t\tif (typeof manifestParameter === \"string\") {\n\t\t\t\t\tconst data = this._compilationData.get(params);\n\t\t\t\t\t// If there was an error parsing the manifest\n\t\t\t\t\t// file, exit now because the error will be added\n\t\t\t\t\t// as a compilation error in the \"compilation\" hook.\n\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmanifest = data.data;\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = manifestParameter;\n\t\t\t\t}\n\t\t\t\tif (manifest) {\n\t\t\t\t\tif (!name) name = manifest.name;\n\t\t\t\t\tif (!sourceType) sourceType = manifest.type;\n\t\t\t\t\tif (!content) content = manifest.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/** @type {Externals} */\n\t\t\tconst externals = {};\n\t\t\tconst source = \"dll-reference \" + name;\n\t\t\texternals[source] = name;\n\t\t\tconst normalModuleFactory = params.normalModuleFactory;\n\t\t\tnew ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(\n\t\t\t\tnormalModuleFactory\n\t\t\t);\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tsource: source,\n\t\t\t\ttype: this.options.type,\n\t\t\t\tscope: this.options.scope,\n\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\tcontent,\n\t\t\t\textensions: this.options.extensions,\n\t\t\t\tassociatedObjectForCache: compiler.root\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, params) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tlet manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tconst data = this._compilationData.get(params);\n\t\t\t\t\t\t// If there was an error parsing the manifest file, add the\n\t\t\t\t\t\t// error as a compilation error to make the compilation fail.\n\t\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\t\tcompilation.errors.push(data.error);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompilation.fileDependencies.add(manifest);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DllManifestError extends WebpackError {\n\tconstructor(filename, message) {\n\t\tsuper();\n\n\t\tthis.name = \"DllManifestError\";\n\t\tthis.message = `Dll manifest ${filename}\\n${message}`;\n\t}\n}\n\nmodule.exports = DllReferencePlugin;\n"]},"metadata":{},"sourceType":"script"}