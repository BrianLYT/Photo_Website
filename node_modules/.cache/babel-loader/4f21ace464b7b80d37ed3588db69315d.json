{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\n\nconst TYPES = new Set([\"webassembly\"]);\n\nclass AsyncWebAssemblyGenerator extends Generator {\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n  /**\n   * @param {NormalModule} module fresh module\n   * @returns {Set<string>} available types (do not mutate)\n   */\n\n\n  getTypes(module) {\n    return TYPES;\n  }\n  /**\n   * @param {NormalModule} module the module\n   * @param {string=} type source type\n   * @returns {number} estimate size of the module\n   */\n\n\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return 0;\n    }\n\n    return originalSource.size();\n  }\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {GenerateContext} generateContext context for generate\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, generateContext) {\n    return module.originalSource();\n  }\n\n}\n\nmodule.exports = AsyncWebAssemblyGenerator;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyGenerator.js"],"names":["Generator","require","TYPES","Set","AsyncWebAssemblyGenerator","constructor","options","getTypes","module","getSize","type","originalSource","size","generate","generateContext","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;AAEA;;AACA;;AACA;;;AAEA,MAAMC,KAAK,GAAG,IAAIC,GAAJ,CAAQ,CAAC,aAAD,CAAR,CAAd;;AAEA,MAAMC,yBAAN,SAAwCJ,SAAxC,CAAkD;AACjDK,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,QAAQ,CAACC,MAAD,EAAS;AAChB,WAAON,KAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCO,EAAAA,OAAO,CAACD,MAAD,EAASE,IAAT,EAAe;AACrB,UAAMC,cAAc,GAAGH,MAAM,CAACG,cAAP,EAAvB;;AACA,QAAI,CAACA,cAAL,EAAqB;AACpB,aAAO,CAAP;AACA;;AACD,WAAOA,cAAc,CAACC,IAAf,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,QAAQ,CAACL,MAAD,EAASM,eAAT,EAA0B;AACjC,WAAON,MAAM,CAACG,cAAP,EAAP;AACA;;AAlCgD;;AAqClDH,MAAM,CAACO,OAAP,GAAiBX,yBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n\nconst TYPES = new Set([\"webassembly\"]);\n\nclass AsyncWebAssemblyGenerator extends Generator {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {NormalModule} module fresh module\n\t * @returns {Set<string>} available types (do not mutate)\n\t */\n\tgetTypes(module) {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {NormalModule} module the module\n\t * @param {string=} type source type\n\t * @returns {number} estimate size of the module\n\t */\n\tgetSize(module, type) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn originalSource.size();\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {GenerateContext} generateContext context for generate\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, generateContext) {\n\t\treturn module.originalSource();\n\t}\n}\n\nmodule.exports = AsyncWebAssemblyGenerator;\n"]},"metadata":{},"sourceType":"script"}