{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nconst slashCode = \"/\".charCodeAt(0);\nconst backslashCode = \"\\\\\".charCodeAt(0);\n\nconst isInside = (path, parent) => {\n  if (!path.startsWith(parent)) return false;\n  if (path.length === parent.length) return true;\n  const charCode = path.charCodeAt(parent.length);\n  return charCode === slashCode || charCode === backslashCode;\n};\n\nmodule.exports = class RestrictionsPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {Set<string | RegExp>} restrictions restrictions\n   */\n  constructor(source, restrictions) {\n    this.source = source;\n    this.restrictions = restrictions;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    resolver.getHook(this.source).tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\n      if (typeof request.path === \"string\") {\n        const path = request.path;\n\n        for (const rule of this.restrictions) {\n          if (typeof rule === \"string\") {\n            if (!isInside(path, rule)) {\n              if (resolveContext.log) {\n                resolveContext.log(`${path} is not inside of the restriction ${rule}`);\n              }\n\n              return callback(null, null);\n            }\n          } else if (!rule.test(path)) {\n            if (resolveContext.log) {\n              resolveContext.log(`${path} doesn't match the restriction ${rule}`);\n            }\n\n            return callback(null, null);\n          }\n        }\n      }\n\n      callback();\n    });\n  }\n\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/enhanced-resolve/lib/RestrictionsPlugin.js"],"names":["slashCode","charCodeAt","backslashCode","isInside","path","parent","startsWith","length","charCode","module","exports","RestrictionsPlugin","constructor","source","restrictions","apply","resolver","getHook","tapAsync","request","resolveContext","callback","rule","log","test"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAMA,SAAS,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAlB;AACA,MAAMC,aAAa,GAAG,KAAKD,UAAL,CAAgB,CAAhB,CAAtB;;AAEA,MAAME,QAAQ,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAClC,MAAI,CAACD,IAAI,CAACE,UAAL,CAAgBD,MAAhB,CAAL,EAA8B,OAAO,KAAP;AAC9B,MAAID,IAAI,CAACG,MAAL,KAAgBF,MAAM,CAACE,MAA3B,EAAmC,OAAO,IAAP;AACnC,QAAMC,QAAQ,GAAGJ,IAAI,CAACH,UAAL,CAAgBI,MAAM,CAACE,MAAvB,CAAjB;AACA,SAAOC,QAAQ,KAAKR,SAAb,IAA0BQ,QAAQ,KAAKN,aAA9C;AACA,CALD;;AAOAO,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;AACzC;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,YAAT,EAAuB;AACjC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CACNC,OADF,CACU,KAAKJ,MADf,EAEEK,QAFF,CAEW,oBAFX,EAEiC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACtE,UAAI,OAAOF,OAAO,CAACf,IAAf,KAAwB,QAA5B,EAAsC;AACrC,cAAMA,IAAI,GAAGe,OAAO,CAACf,IAArB;;AACA,aAAK,MAAMkB,IAAX,IAAmB,KAAKR,YAAxB,EAAsC;AACrC,cAAI,OAAOQ,IAAP,KAAgB,QAApB,EAA8B;AAC7B,gBAAI,CAACnB,QAAQ,CAACC,IAAD,EAAOkB,IAAP,CAAb,EAA2B;AAC1B,kBAAIF,cAAc,CAACG,GAAnB,EAAwB;AACvBH,gBAAAA,cAAc,CAACG,GAAf,CACE,GAAEnB,IAAK,qCAAoCkB,IAAK,EADlD;AAGA;;AACD,qBAAOD,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACA;AACD,WATD,MASO,IAAI,CAACC,IAAI,CAACE,IAAL,CAAUpB,IAAV,CAAL,EAAsB;AAC5B,gBAAIgB,cAAc,CAACG,GAAnB,EAAwB;AACvBH,cAAAA,cAAc,CAACG,GAAf,CACE,GAAEnB,IAAK,kCAAiCkB,IAAK,EAD/C;AAGA;;AACD,mBAAOD,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACA;AACD;AACD;;AAEDA,MAAAA,QAAQ;AACR,KA3BF;AA4BA;;AA3CwC,CAA1C","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nconst slashCode = \"/\".charCodeAt(0);\nconst backslashCode = \"\\\\\".charCodeAt(0);\n\nconst isInside = (path, parent) => {\n\tif (!path.startsWith(parent)) return false;\n\tif (path.length === parent.length) return true;\n\tconst charCode = path.charCodeAt(parent.length);\n\treturn charCode === slashCode || charCode === backslashCode;\n};\n\nmodule.exports = class RestrictionsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {Set<string | RegExp>} restrictions restrictions\n\t */\n\tconstructor(source, restrictions) {\n\t\tthis.source = source;\n\t\tthis.restrictions = restrictions;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (typeof request.path === \"string\") {\n\t\t\t\t\tconst path = request.path;\n\t\t\t\t\tfor (const rule of this.restrictions) {\n\t\t\t\t\t\tif (typeof rule === \"string\") {\n\t\t\t\t\t\t\tif (!isInside(path, rule)) {\n\t\t\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t\t`${path} is not inside of the restriction ${rule}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (!rule.test(path)) {\n\t\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t`${path} doesn't match the restriction ${rule}`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback();\n\t\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}