{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst NormalModule = require(\"./NormalModule\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass LoaderTargetPlugin {\n  /**\n   * @param {string} target the target\n   */\n  constructor(target) {\n    this.target = target;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"LoaderTargetPlugin\", compilation => {\n      NormalModule.getCompilationHooks(compilation).loader.tap(\"LoaderTargetPlugin\", loaderContext => {\n        loaderContext.target = this.target;\n      });\n    });\n  }\n\n}\n\nmodule.exports = LoaderTargetPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/LoaderTargetPlugin.js"],"names":["NormalModule","require","LoaderTargetPlugin","constructor","target","apply","compiler","hooks","compilation","tap","getCompilationHooks","loader","loaderContext","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;AAEA;;;AAEA,MAAMC,kBAAN,CAAyB;AACxB;AACD;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAAS;AACnB,SAAKA,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,oBAA/B,EAAqDD,WAAW,IAAI;AACnER,MAAAA,YAAY,CAACU,mBAAb,CAAiCF,WAAjC,EAA8CG,MAA9C,CAAqDF,GAArD,CACC,oBADD,EAECG,aAAa,IAAI;AAChBA,QAAAA,aAAa,CAACR,MAAd,GAAuB,KAAKA,MAA5B;AACA,OAJF;AAMA,KAPD;AAQA;;AAtBuB;;AAyBzBS,MAAM,CAACC,OAAP,GAAiBZ,kBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst NormalModule = require(\"./NormalModule\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass LoaderTargetPlugin {\n\t/**\n\t * @param {string} target the target\n\t */\n\tconstructor(target) {\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"LoaderTargetPlugin\", compilation => {\n\t\t\tNormalModule.getCompilationHooks(compilation).loader.tap(\n\t\t\t\t\"LoaderTargetPlugin\",\n\t\t\t\tloaderContext => {\n\t\t\t\t\tloaderContext.target = this.target;\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = LoaderTargetPlugin;\n"]},"metadata":{},"sourceType":"script"}