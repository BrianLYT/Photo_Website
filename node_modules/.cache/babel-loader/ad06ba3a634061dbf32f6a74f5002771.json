{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\"use strict\";\n\nconst {\n  cleverMerge\n} = require(\"../util/cleverMerge\");\n\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\n\nconst memoize = require(\"../util/memoize\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nconst getSchema = name => {\n  const {\n    definitions\n  } = require(\"../../schemas/WebpackOptions.json\");\n\n  return {\n    definitions,\n    oneOf: [{\n      $ref: `#/definitions/${name}`\n    }]\n  };\n};\n\nconst generatorValidationOptions = {\n  name: \"Asset Modules Plugin\",\n  baseDataPath: \"generator\"\n};\nconst validateGeneratorOptions = {\n  asset: createSchemaValidation(require(\"../../schemas/plugins/asset/AssetGeneratorOptions.check.js\"), () => getSchema(\"AssetGeneratorOptions\"), generatorValidationOptions),\n  \"asset/resource\": createSchemaValidation(require(\"../../schemas/plugins/asset/AssetResourceGeneratorOptions.check.js\"), () => getSchema(\"AssetResourceGeneratorOptions\"), generatorValidationOptions),\n  \"asset/inline\": createSchemaValidation(require(\"../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js\"), () => getSchema(\"AssetInlineGeneratorOptions\"), generatorValidationOptions)\n};\nconst validateParserOptions = createSchemaValidation(require(\"../../schemas/plugins/asset/AssetParserOptions.check.js\"), () => getSchema(\"AssetParserOptions\"), {\n  name: \"Asset Modules Plugin\",\n  baseDataPath: \"parser\"\n});\nconst getAssetGenerator = memoize(() => require(\"./AssetGenerator\"));\nconst getAssetParser = memoize(() => require(\"./AssetParser\"));\nconst getAssetSourceParser = memoize(() => require(\"./AssetSourceParser\"));\nconst getAssetSourceGenerator = memoize(() => require(\"./AssetSourceGenerator\"));\nconst type = \"asset\";\nconst plugin = \"AssetModulesPlugin\";\n\nclass AssetModulesPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(plugin, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      normalModuleFactory.hooks.createParser.for(\"asset\").tap(plugin, parserOptions => {\n        validateParserOptions(parserOptions);\n        parserOptions = cleverMerge(compiler.options.module.parser.asset, parserOptions);\n        let dataUrlCondition = parserOptions.dataUrlCondition;\n\n        if (!dataUrlCondition || typeof dataUrlCondition === \"object\") {\n          dataUrlCondition = {\n            maxSize: 8096,\n            ...dataUrlCondition\n          };\n        }\n\n        const AssetParser = getAssetParser();\n        return new AssetParser(dataUrlCondition);\n      });\n      normalModuleFactory.hooks.createParser.for(\"asset/inline\").tap(plugin, parserOptions => {\n        const AssetParser = getAssetParser();\n        return new AssetParser(true);\n      });\n      normalModuleFactory.hooks.createParser.for(\"asset/resource\").tap(plugin, parserOptions => {\n        const AssetParser = getAssetParser();\n        return new AssetParser(false);\n      });\n      normalModuleFactory.hooks.createParser.for(\"asset/source\").tap(plugin, parserOptions => {\n        const AssetSourceParser = getAssetSourceParser();\n        return new AssetSourceParser();\n      });\n\n      for (const type of [\"asset\", \"asset/inline\", \"asset/resource\"]) {\n        normalModuleFactory.hooks.createGenerator.for(type).tap(plugin, generatorOptions => {\n          validateGeneratorOptions[type](generatorOptions);\n          let dataUrl = undefined;\n\n          if (type !== \"asset/resource\") {\n            dataUrl = generatorOptions.dataUrl;\n\n            if (!dataUrl || typeof dataUrl === \"object\") {\n              dataUrl = {\n                encoding: undefined,\n                mimetype: undefined,\n                ...dataUrl\n              };\n            }\n          }\n\n          let filename = undefined;\n          let publicPath = undefined;\n          let outputPath = undefined;\n\n          if (type !== \"asset/inline\") {\n            filename = generatorOptions.filename;\n            publicPath = generatorOptions.publicPath;\n            outputPath = generatorOptions.outputPath;\n          }\n\n          const AssetGenerator = getAssetGenerator();\n          return new AssetGenerator(dataUrl, filename, publicPath, outputPath, generatorOptions.emit !== false);\n        });\n      }\n\n      normalModuleFactory.hooks.createGenerator.for(\"asset/source\").tap(plugin, () => {\n        const AssetSourceGenerator = getAssetSourceGenerator();\n        return new AssetSourceGenerator();\n      });\n      compilation.hooks.renderManifest.tap(plugin, (result, options) => {\n        const {\n          chunkGraph\n        } = compilation;\n        const {\n          chunk,\n          codeGenerationResults\n        } = options;\n        const modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"asset\", compareModulesByIdentifier);\n\n        if (modules) {\n          for (const module of modules) {\n            try {\n              const codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n              result.push({\n                render: () => codeGenResult.sources.get(type),\n                filename: module.buildInfo.filename || codeGenResult.data.get(\"filename\"),\n                info: module.buildInfo.assetInfo || codeGenResult.data.get(\"assetInfo\"),\n                auxiliary: true,\n                identifier: `assetModule${chunkGraph.getModuleId(module)}`,\n                hash: module.buildInfo.fullContentHash || codeGenResult.data.get(\"fullContentHash\")\n              });\n            } catch (e) {\n              e.message += `\\nduring rendering of asset ${module.identifier()}`;\n              throw e;\n            }\n          }\n        }\n\n        return result;\n      });\n      compilation.hooks.prepareModuleExecution.tap(\"AssetModulesPlugin\", (options, context) => {\n        const {\n          codeGenerationResult\n        } = options;\n        const source = codeGenerationResult.sources.get(\"asset\");\n        if (source === undefined) return;\n        context.assets.set(codeGenerationResult.data.get(\"filename\"), {\n          source,\n          info: codeGenerationResult.data.get(\"assetInfo\")\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = AssetModulesPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/asset/AssetModulesPlugin.js"],"names":["cleverMerge","require","compareModulesByIdentifier","createSchemaValidation","memoize","getSchema","name","definitions","oneOf","$ref","generatorValidationOptions","baseDataPath","validateGeneratorOptions","asset","validateParserOptions","getAssetGenerator","getAssetParser","getAssetSourceParser","getAssetSourceGenerator","type","plugin","AssetModulesPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","createParser","for","parserOptions","options","module","parser","dataUrlCondition","maxSize","AssetParser","AssetSourceParser","createGenerator","generatorOptions","dataUrl","undefined","encoding","mimetype","filename","publicPath","outputPath","AssetGenerator","emit","AssetSourceGenerator","renderManifest","result","chunkGraph","chunk","codeGenerationResults","modules","getOrderedChunkModulesIterableBySourceType","codeGenResult","get","runtime","push","render","sources","buildInfo","data","info","assetInfo","auxiliary","identifier","getModuleId","hash","fullContentHash","e","message","prepareModuleExecution","context","codeGenerationResult","source","assets","set","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Yuta Hiroto @hiroppy\n*/\n\n\"use strict\";\n\nconst { cleverMerge } = require(\"../util/cleverMerge\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nconst getSchema = name => {\n\tconst { definitions } = require(\"../../schemas/WebpackOptions.json\");\n\treturn {\n\t\tdefinitions,\n\t\toneOf: [{ $ref: `#/definitions/${name}` }]\n\t};\n};\n\nconst generatorValidationOptions = {\n\tname: \"Asset Modules Plugin\",\n\tbaseDataPath: \"generator\"\n};\nconst validateGeneratorOptions = {\n\tasset: createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t),\n\t\"asset/resource\": createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetResourceGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetResourceGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t),\n\t\"asset/inline\": createSchemaValidation(\n\t\trequire(\"../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js\"),\n\t\t() => getSchema(\"AssetInlineGeneratorOptions\"),\n\t\tgeneratorValidationOptions\n\t)\n};\n\nconst validateParserOptions = createSchemaValidation(\n\trequire(\"../../schemas/plugins/asset/AssetParserOptions.check.js\"),\n\t() => getSchema(\"AssetParserOptions\"),\n\t{\n\t\tname: \"Asset Modules Plugin\",\n\t\tbaseDataPath: \"parser\"\n\t}\n);\n\nconst getAssetGenerator = memoize(() => require(\"./AssetGenerator\"));\nconst getAssetParser = memoize(() => require(\"./AssetParser\"));\nconst getAssetSourceParser = memoize(() => require(\"./AssetSourceParser\"));\nconst getAssetSourceGenerator = memoize(() =>\n\trequire(\"./AssetSourceGenerator\")\n);\n\nconst type = \"asset\";\nconst plugin = \"AssetModulesPlugin\";\n\nclass AssetModulesPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\tplugin,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"asset\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tvalidateParserOptions(parserOptions);\n\t\t\t\t\t\tparserOptions = cleverMerge(\n\t\t\t\t\t\t\tcompiler.options.module.parser.asset,\n\t\t\t\t\t\t\tparserOptions\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tlet dataUrlCondition = parserOptions.dataUrlCondition;\n\t\t\t\t\t\tif (!dataUrlCondition || typeof dataUrlCondition === \"object\") {\n\t\t\t\t\t\t\tdataUrlCondition = {\n\t\t\t\t\t\t\t\tmaxSize: 8096,\n\t\t\t\t\t\t\t\t...dataUrlCondition\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(dataUrlCondition);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"asset/inline\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(true);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"asset/resource\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\n\n\t\t\t\t\t\treturn new AssetParser(false);\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"asset/source\")\n\t\t\t\t\t.tap(plugin, parserOptions => {\n\t\t\t\t\t\tconst AssetSourceParser = getAssetSourceParser();\n\n\t\t\t\t\t\treturn new AssetSourceParser();\n\t\t\t\t\t});\n\n\t\t\t\tfor (const type of [\"asset\", \"asset/inline\", \"asset/resource\"]) {\n\t\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t\t.for(type)\n\t\t\t\t\t\t.tap(plugin, generatorOptions => {\n\t\t\t\t\t\t\tvalidateGeneratorOptions[type](generatorOptions);\n\n\t\t\t\t\t\t\tlet dataUrl = undefined;\n\t\t\t\t\t\t\tif (type !== \"asset/resource\") {\n\t\t\t\t\t\t\t\tdataUrl = generatorOptions.dataUrl;\n\t\t\t\t\t\t\t\tif (!dataUrl || typeof dataUrl === \"object\") {\n\t\t\t\t\t\t\t\t\tdataUrl = {\n\t\t\t\t\t\t\t\t\t\tencoding: undefined,\n\t\t\t\t\t\t\t\t\t\tmimetype: undefined,\n\t\t\t\t\t\t\t\t\t\t...dataUrl\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet filename = undefined;\n\t\t\t\t\t\t\tlet publicPath = undefined;\n\t\t\t\t\t\t\tlet outputPath = undefined;\n\t\t\t\t\t\t\tif (type !== \"asset/inline\") {\n\t\t\t\t\t\t\t\tfilename = generatorOptions.filename;\n\t\t\t\t\t\t\t\tpublicPath = generatorOptions.publicPath;\n\t\t\t\t\t\t\t\toutputPath = generatorOptions.outputPath;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst AssetGenerator = getAssetGenerator();\n\n\t\t\t\t\t\t\treturn new AssetGenerator(\n\t\t\t\t\t\t\t\tdataUrl,\n\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\tpublicPath,\n\t\t\t\t\t\t\t\toutputPath,\n\t\t\t\t\t\t\t\tgeneratorOptions.emit !== false\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"asset/source\")\n\t\t\t\t\t.tap(plugin, () => {\n\t\t\t\t\t\tconst AssetSourceGenerator = getAssetSourceGenerator();\n\n\t\t\t\t\t\treturn new AssetSourceGenerator();\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.renderManifest.tap(plugin, (result, options) => {\n\t\t\t\t\tconst { chunkGraph } = compilation;\n\t\t\t\t\tconst { chunk, codeGenerationResults } = options;\n\n\t\t\t\t\tconst modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\"asset\",\n\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t);\n\t\t\t\t\tif (modules) {\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst codeGenResult = codeGenerationResults.get(\n\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\tchunk.runtime\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () => codeGenResult.sources.get(type),\n\t\t\t\t\t\t\t\t\tfilename:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.filename ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"filename\"),\n\t\t\t\t\t\t\t\t\tinfo:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.assetInfo ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"assetInfo\"),\n\t\t\t\t\t\t\t\t\tauxiliary: true,\n\t\t\t\t\t\t\t\t\tidentifier: `assetModule${chunkGraph.getModuleId(module)}`,\n\t\t\t\t\t\t\t\t\thash:\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.fullContentHash ||\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"fullContentHash\")\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\te.message += `\\nduring rendering of asset ${module.identifier()}`;\n\t\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.prepareModuleExecution.tap(\n\t\t\t\t\t\"AssetModulesPlugin\",\n\t\t\t\t\t(options, context) => {\n\t\t\t\t\t\tconst { codeGenerationResult } = options;\n\t\t\t\t\t\tconst source = codeGenerationResult.sources.get(\"asset\");\n\t\t\t\t\t\tif (source === undefined) return;\n\t\t\t\t\t\tcontext.assets.set(codeGenerationResult.data.get(\"filename\"), {\n\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\tinfo: codeGenerationResult.data.get(\"assetInfo\")\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AssetModulesPlugin;\n"]},"metadata":{},"sourceType":"script"}