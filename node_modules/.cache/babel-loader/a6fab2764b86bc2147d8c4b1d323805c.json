{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ContextDependency = require(\"./ContextDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n\nclass ContextDependencyTemplateAsRequireCall extends ContextDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, _ref) {\n    let {\n      runtimeTemplate,\n      moduleGraph,\n      chunkGraph,\n      runtimeRequirements\n    } = _ref;\n    const dep =\n    /** @type {ContextDependency} */\n    dependency;\n    let moduleExports = runtimeTemplate.moduleExports({\n      module: moduleGraph.getModule(dep),\n      chunkGraph,\n      request: dep.request,\n      runtimeRequirements\n    });\n\n    if (dep.inShorthand) {\n      moduleExports = `${dep.inShorthand}: ${moduleExports}`;\n    }\n\n    if (moduleGraph.getModule(dep)) {\n      if (dep.valueRange) {\n        if (Array.isArray(dep.replaces)) {\n          for (let i = 0; i < dep.replaces.length; i++) {\n            const rep = dep.replaces[i];\n            source.replace(rep.range[0], rep.range[1] - 1, rep.value);\n          }\n        }\n\n        source.replace(dep.valueRange[1], dep.range[1] - 1, \")\");\n        source.replace(dep.range[0], dep.valueRange[0] - 1, `${moduleExports}(`);\n      } else {\n        source.replace(dep.range[0], dep.range[1] - 1, moduleExports);\n      }\n    } else {\n      source.replace(dep.range[0], dep.range[1] - 1, moduleExports);\n    }\n  }\n\n}\n\nmodule.exports = ContextDependencyTemplateAsRequireCall;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/ContextDependencyTemplateAsRequireCall.js"],"names":["ContextDependency","require","ContextDependencyTemplateAsRequireCall","Template","apply","dependency","source","runtimeTemplate","moduleGraph","chunkGraph","runtimeRequirements","dep","moduleExports","module","getModule","request","inShorthand","valueRange","Array","isArray","replaces","i","length","rep","replace","range","value","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;AAEA;;AACA;;AACA;;;AAEA,MAAMC,sCAAN,SAAqDF,iBAAiB,CAACG,QAAvE,CAAgF;AAC/E;AACD;AACA;AACA;AACA;AACA;AACCC,EAAAA,KAAK,CACJC,UADI,EAEJC,MAFI,QAIH;AAAA,QADD;AAAEC,MAAAA,eAAF;AAAmBC,MAAAA,WAAnB;AAAgCC,MAAAA,UAAhC;AAA4CC,MAAAA;AAA5C,KACC;AACD,UAAMC,GAAG;AAAG;AAAkCN,IAAAA,UAA9C;AACA,QAAIO,aAAa,GAAGL,eAAe,CAACK,aAAhB,CAA8B;AACjDC,MAAAA,MAAM,EAAEL,WAAW,CAACM,SAAZ,CAAsBH,GAAtB,CADyC;AAEjDF,MAAAA,UAFiD;AAGjDM,MAAAA,OAAO,EAAEJ,GAAG,CAACI,OAHoC;AAIjDL,MAAAA;AAJiD,KAA9B,CAApB;;AAOA,QAAIC,GAAG,CAACK,WAAR,EAAqB;AACpBJ,MAAAA,aAAa,GAAI,GAAED,GAAG,CAACK,WAAY,KAAIJ,aAAc,EAArD;AACA;;AACD,QAAIJ,WAAW,CAACM,SAAZ,CAAsBH,GAAtB,CAAJ,EAAgC;AAC/B,UAAIA,GAAG,CAACM,UAAR,EAAoB;AACnB,YAAIC,KAAK,CAACC,OAAN,CAAcR,GAAG,CAACS,QAAlB,CAAJ,EAAiC;AAChC,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,GAAG,CAACS,QAAJ,CAAaE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC7C,kBAAME,GAAG,GAAGZ,GAAG,CAACS,QAAJ,CAAaC,CAAb,CAAZ;AACAf,YAAAA,MAAM,CAACkB,OAAP,CAAeD,GAAG,CAACE,KAAJ,CAAU,CAAV,CAAf,EAA6BF,GAAG,CAACE,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+CF,GAAG,CAACG,KAAnD;AACA;AACD;;AACDpB,QAAAA,MAAM,CAACkB,OAAP,CAAeb,GAAG,CAACM,UAAJ,CAAe,CAAf,CAAf,EAAkCN,GAAG,CAACc,KAAJ,CAAU,CAAV,IAAe,CAAjD,EAAoD,GAApD;AACAnB,QAAAA,MAAM,CAACkB,OAAP,CACCb,GAAG,CAACc,KAAJ,CAAU,CAAV,CADD,EAECd,GAAG,CAACM,UAAJ,CAAe,CAAf,IAAoB,CAFrB,EAGE,GAAEL,aAAc,GAHlB;AAKA,OAbD,MAaO;AACNN,QAAAA,MAAM,CAACkB,OAAP,CAAeb,GAAG,CAACc,KAAJ,CAAU,CAAV,CAAf,EAA6Bd,GAAG,CAACc,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+Cb,aAA/C;AACA;AACD,KAjBD,MAiBO;AACNN,MAAAA,MAAM,CAACkB,OAAP,CAAeb,GAAG,CAACc,KAAJ,CAAU,CAAV,CAAf,EAA6Bd,GAAG,CAACc,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+Cb,aAA/C;AACA;AACD;;AA3C8E;;AA6ChFC,MAAM,CAACc,OAAP,GAAiBzB,sCAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ContextDependency = require(\"./ContextDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass ContextDependencyTemplateAsRequireCall extends ContextDependency.Template {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(\n\t\tdependency,\n\t\tsource,\n\t\t{ runtimeTemplate, moduleGraph, chunkGraph, runtimeRequirements }\n\t) {\n\t\tconst dep = /** @type {ContextDependency} */ (dependency);\n\t\tlet moduleExports = runtimeTemplate.moduleExports({\n\t\t\tmodule: moduleGraph.getModule(dep),\n\t\t\tchunkGraph,\n\t\t\trequest: dep.request,\n\t\t\truntimeRequirements\n\t\t});\n\n\t\tif (dep.inShorthand) {\n\t\t\tmoduleExports = `${dep.inShorthand}: ${moduleExports}`;\n\t\t}\n\t\tif (moduleGraph.getModule(dep)) {\n\t\t\tif (dep.valueRange) {\n\t\t\t\tif (Array.isArray(dep.replaces)) {\n\t\t\t\t\tfor (let i = 0; i < dep.replaces.length; i++) {\n\t\t\t\t\t\tconst rep = dep.replaces[i];\n\t\t\t\t\t\tsource.replace(rep.range[0], rep.range[1] - 1, rep.value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsource.replace(dep.valueRange[1], dep.range[1] - 1, \")\");\n\t\t\t\tsource.replace(\n\t\t\t\t\tdep.range[0],\n\t\t\t\t\tdep.valueRange[0] - 1,\n\t\t\t\t\t`${moduleExports}(`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tsource.replace(dep.range[0], dep.range[1] - 1, moduleExports);\n\t\t\t}\n\t\t} else {\n\t\t\tsource.replace(dep.range[0], dep.range[1] - 1, moduleExports);\n\t\t}\n\t}\n}\nmodule.exports = ContextDependencyTemplateAsRequireCall;\n"]},"metadata":{},"sourceType":"script"}