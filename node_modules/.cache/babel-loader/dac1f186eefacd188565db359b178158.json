{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\n\nconst NormalModule = require(\"./NormalModule\");\n\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass AutomaticPrefetchPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"AutomaticPrefetchPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);\n    });\n    let lastModules = null;\n    compiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", compilation => {\n      lastModules = [];\n\n      for (const m of compilation.modules) {\n        if (m instanceof NormalModule) {\n          lastModules.push({\n            context: m.context,\n            request: m.request\n          });\n        }\n      }\n    });\n    compiler.hooks.make.tapAsync(\"AutomaticPrefetchPlugin\", (compilation, callback) => {\n      if (!lastModules) return callback();\n      asyncLib.forEach(lastModules, (m, callback) => {\n        compilation.addModuleChain(m.context || compiler.context, new PrefetchDependency(`!!${m.request}`), callback);\n      }, err => {\n        lastModules = null;\n        callback(err);\n      });\n    });\n  }\n\n}\n\nmodule.exports = AutomaticPrefetchPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/AutomaticPrefetchPlugin.js"],"names":["asyncLib","require","NormalModule","PrefetchDependency","AutomaticPrefetchPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","lastModules","afterCompile","m","modules","push","context","request","make","tapAsync","callback","forEach","addModuleChain","err","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,mCAAD,CAAlC;AAEA;;;AAEA,MAAMG,uBAAN,CAA8B;AAC7B;AACD;AACA;AACA;AACA;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACfA,IAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,yBADD,EAEC,CAACD,WAAD,WAA0C;AAAA,UAA5B;AAAEE,QAAAA;AAAF,OAA4B;AACzCF,MAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCT,kBADD,EAECO,mBAFD;AAIA,KAPF;AASA,QAAIG,WAAW,GAAG,IAAlB;AACAP,IAAAA,QAAQ,CAACC,KAAT,CAAeO,YAAf,CAA4BL,GAA5B,CAAgC,yBAAhC,EAA2DD,WAAW,IAAI;AACzEK,MAAAA,WAAW,GAAG,EAAd;;AAEA,WAAK,MAAME,CAAX,IAAgBP,WAAW,CAACQ,OAA5B,EAAqC;AACpC,YAAID,CAAC,YAAYb,YAAjB,EAA+B;AAC9BW,UAAAA,WAAW,CAACI,IAAZ,CAAiB;AAChBC,YAAAA,OAAO,EAAEH,CAAC,CAACG,OADK;AAEhBC,YAAAA,OAAO,EAAEJ,CAAC,CAACI;AAFK,WAAjB;AAIA;AACD;AACD,KAXD;AAYAb,IAAAA,QAAQ,CAACC,KAAT,CAAea,IAAf,CAAoBC,QAApB,CACC,yBADD,EAEC,CAACb,WAAD,EAAcc,QAAd,KAA2B;AAC1B,UAAI,CAACT,WAAL,EAAkB,OAAOS,QAAQ,EAAf;AAClBtB,MAAAA,QAAQ,CAACuB,OAAT,CACCV,WADD,EAEC,CAACE,CAAD,EAAIO,QAAJ,KAAiB;AAChBd,QAAAA,WAAW,CAACgB,cAAZ,CACCT,CAAC,CAACG,OAAF,IAAaZ,QAAQ,CAACY,OADvB,EAEC,IAAIf,kBAAJ,CAAwB,KAAIY,CAAC,CAACI,OAAQ,EAAtC,CAFD,EAGCG,QAHD;AAKA,OARF,EASCG,GAAG,IAAI;AACNZ,QAAAA,WAAW,GAAG,IAAd;AACAS,QAAAA,QAAQ,CAACG,GAAD,CAAR;AACA,OAZF;AAcA,KAlBF;AAoBA;;AAjD4B;;AAmD9BC,MAAM,CAACC,OAAP,GAAiBvB,uBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst NormalModule = require(\"./NormalModule\");\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass AutomaticPrefetchPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AutomaticPrefetchPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tPrefetchDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\tlet lastModules = null;\n\t\tcompiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", compilation => {\n\t\t\tlastModules = [];\n\n\t\t\tfor (const m of compilation.modules) {\n\t\t\t\tif (m instanceof NormalModule) {\n\t\t\t\t\tlastModules.push({\n\t\t\t\t\t\tcontext: m.context,\n\t\t\t\t\t\trequest: m.request\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"AutomaticPrefetchPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tif (!lastModules) return callback();\n\t\t\t\tasyncLib.forEach(\n\t\t\t\t\tlastModules,\n\t\t\t\t\t(m, callback) => {\n\t\t\t\t\t\tcompilation.addModuleChain(\n\t\t\t\t\t\t\tm.context || compiler.context,\n\t\t\t\t\t\t\tnew PrefetchDependency(`!!${m.request}`),\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\terr => {\n\t\t\t\t\t\tlastModules = null;\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = AutomaticPrefetchPlugin;\n"]},"metadata":{},"sourceType":"script"}