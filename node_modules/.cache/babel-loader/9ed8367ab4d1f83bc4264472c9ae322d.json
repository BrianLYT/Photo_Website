{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\n\nconst fs = require(\"graceful-fs\");\n\nconst createConsoleLogger = require(\"../logging/createConsoleLogger\");\n\nconst NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\n\nconst nodeConsole = require(\"./nodeConsole\");\n/** @typedef {import(\"../../declarations/WebpackOptions\").InfrastructureLogging} InfrastructureLogging */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass NodeEnvironmentPlugin {\n  /**\n   * @param {Object} options options\n   * @param {InfrastructureLogging} options.infrastructureLogging infrastructure logging options\n   */\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const {\n      infrastructureLogging\n    } = this.options;\n    compiler.infrastructureLogger = createConsoleLogger({\n      level: infrastructureLogging.level || \"info\",\n      debug: infrastructureLogging.debug || false,\n      console: infrastructureLogging.console || nodeConsole({\n        colors: infrastructureLogging.colors,\n        appendOnly: infrastructureLogging.appendOnly,\n        stream: infrastructureLogging.stream\n      })\n    });\n    compiler.inputFileSystem = new CachedInputFileSystem(fs, 60000);\n    const inputFileSystem = compiler.inputFileSystem;\n    compiler.outputFileSystem = fs;\n    compiler.intermediateFileSystem = fs;\n    compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);\n    compiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", compiler => {\n      if (compiler.inputFileSystem === inputFileSystem) {\n        compiler.fsStartTime = Date.now();\n        inputFileSystem.purge();\n      }\n    });\n  }\n\n}\n\nmodule.exports = NodeEnvironmentPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/node/NodeEnvironmentPlugin.js"],"names":["CachedInputFileSystem","require","fs","createConsoleLogger","NodeWatchFileSystem","nodeConsole","NodeEnvironmentPlugin","constructor","options","apply","compiler","infrastructureLogging","infrastructureLogger","level","debug","console","colors","appendOnly","stream","inputFileSystem","outputFileSystem","intermediateFileSystem","watchFileSystem","hooks","beforeRun","tap","fsStartTime","Date","now","purge","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,4CAAD,CAArC;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAME,mBAAmB,GAAGF,OAAO,CAAC,gCAAD,CAAnC;;AACA,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,uBAAD,CAAnC;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,eAAD,CAA3B;AAEA;;AACA;;;AAEA,MAAMK,qBAAN,CAA4B;AAC3B;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAM;AAAEC,MAAAA;AAAF,QAA4B,KAAKH,OAAvC;AACAE,IAAAA,QAAQ,CAACE,oBAAT,GAAgCT,mBAAmB,CAAC;AACnDU,MAAAA,KAAK,EAAEF,qBAAqB,CAACE,KAAtB,IAA+B,MADa;AAEnDC,MAAAA,KAAK,EAAEH,qBAAqB,CAACG,KAAtB,IAA+B,KAFa;AAGnDC,MAAAA,OAAO,EACNJ,qBAAqB,CAACI,OAAtB,IACAV,WAAW,CAAC;AACXW,QAAAA,MAAM,EAAEL,qBAAqB,CAACK,MADnB;AAEXC,QAAAA,UAAU,EAAEN,qBAAqB,CAACM,UAFvB;AAGXC,QAAAA,MAAM,EAAEP,qBAAqB,CAACO;AAHnB,OAAD;AALuC,KAAD,CAAnD;AAWAR,IAAAA,QAAQ,CAACS,eAAT,GAA2B,IAAInB,qBAAJ,CAA0BE,EAA1B,EAA8B,KAA9B,CAA3B;AACA,UAAMiB,eAAe,GAAGT,QAAQ,CAACS,eAAjC;AACAT,IAAAA,QAAQ,CAACU,gBAAT,GAA4BlB,EAA5B;AACAQ,IAAAA,QAAQ,CAACW,sBAAT,GAAkCnB,EAAlC;AACAQ,IAAAA,QAAQ,CAACY,eAAT,GAA2B,IAAIlB,mBAAJ,CAC1BM,QAAQ,CAACS,eADiB,CAA3B;AAGAT,IAAAA,QAAQ,CAACa,KAAT,CAAeC,SAAf,CAAyBC,GAAzB,CAA6B,uBAA7B,EAAsDf,QAAQ,IAAI;AACjE,UAAIA,QAAQ,CAACS,eAAT,KAA6BA,eAAjC,EAAkD;AACjDT,QAAAA,QAAQ,CAACgB,WAAT,GAAuBC,IAAI,CAACC,GAAL,EAAvB;AACAT,QAAAA,eAAe,CAACU,KAAhB;AACA;AACD,KALD;AAMA;;AAxC0B;;AA2C5BC,MAAM,CAACC,OAAP,GAAiBzB,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\nconst fs = require(\"graceful-fs\");\nconst createConsoleLogger = require(\"../logging/createConsoleLogger\");\nconst NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\nconst nodeConsole = require(\"./nodeConsole\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").InfrastructureLogging} InfrastructureLogging */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass NodeEnvironmentPlugin {\n\t/**\n\t * @param {Object} options options\n\t * @param {InfrastructureLogging} options.infrastructureLogging infrastructure logging options\n\t */\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { infrastructureLogging } = this.options;\n\t\tcompiler.infrastructureLogger = createConsoleLogger({\n\t\t\tlevel: infrastructureLogging.level || \"info\",\n\t\t\tdebug: infrastructureLogging.debug || false,\n\t\t\tconsole:\n\t\t\t\tinfrastructureLogging.console ||\n\t\t\t\tnodeConsole({\n\t\t\t\t\tcolors: infrastructureLogging.colors,\n\t\t\t\t\tappendOnly: infrastructureLogging.appendOnly,\n\t\t\t\t\tstream: infrastructureLogging.stream\n\t\t\t\t})\n\t\t});\n\t\tcompiler.inputFileSystem = new CachedInputFileSystem(fs, 60000);\n\t\tconst inputFileSystem = compiler.inputFileSystem;\n\t\tcompiler.outputFileSystem = fs;\n\t\tcompiler.intermediateFileSystem = fs;\n\t\tcompiler.watchFileSystem = new NodeWatchFileSystem(\n\t\t\tcompiler.inputFileSystem\n\t\t);\n\t\tcompiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", compiler => {\n\t\t\tif (compiler.inputFileSystem === inputFileSystem) {\n\t\t\t\tcompiler.fsStartTime = Date.now();\n\t\t\t\tinputFileSystem.purge();\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = NodeEnvironmentPlugin;\n"]},"metadata":{},"sourceType":"script"}