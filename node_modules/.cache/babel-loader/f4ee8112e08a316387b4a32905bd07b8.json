{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nclass ArraySet {\n  constructor() {\n    this._array = [];\n    this._set = new Map();\n  }\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n\n\n  static fromArray(aArray, aAllowDuplicates) {\n    const set = new ArraySet();\n\n    for (let i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n\n    return set;\n  }\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n\n\n  size() {\n    return this._set.size;\n  }\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n\n\n  add(aStr, aAllowDuplicates) {\n    const isDuplicate = this.has(aStr);\n    const idx = this._array.length;\n\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n\n    if (!isDuplicate) {\n      this._set.set(aStr, idx);\n    }\n  }\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n\n\n  has(aStr) {\n    return this._set.has(aStr);\n  }\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n\n\n  indexOf(aStr) {\n    const idx = this._set.get(aStr);\n\n    if (idx >= 0) {\n      return idx;\n    }\n\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  }\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n\n\n  at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n\n    throw new Error(\"No element indexed by \" + aIdx);\n  }\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n\n\n  toArray() {\n    return this._array.slice();\n  }\n\n}\n\nexports.ArraySet = ArraySet;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/terser/node_modules/source-map/lib/array-set.js"],"names":["ArraySet","constructor","_array","_set","Map","fromArray","aArray","aAllowDuplicates","set","i","len","length","add","size","aStr","isDuplicate","has","idx","push","indexOf","get","Error","at","aIdx","toArray","slice","exports"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AACZ,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACD;AAED;AACF;AACA;;;AACkB,SAATC,SAAS,CAACC,MAAD,EAASC,gBAAT,EAA2B;AACzC,UAAMC,GAAG,GAAG,IAAIR,QAAJ,EAAZ;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGJ,MAAM,CAACK,MAA7B,EAAqCF,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDD,MAAAA,GAAG,CAACI,GAAJ,CAAQN,MAAM,CAACG,CAAD,CAAd,EAAmBF,gBAAnB;AACD;;AACD,WAAOC,GAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKV,IAAL,CAAUU,IAAjB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACED,EAAAA,GAAG,CAACE,IAAD,EAAOP,gBAAP,EAAyB;AAC1B,UAAMQ,WAAW,GAAG,KAAKC,GAAL,CAASF,IAAT,CAApB;AACA,UAAMG,GAAG,GAAG,KAAKf,MAAL,CAAYS,MAAxB;;AACA,QAAI,CAACI,WAAD,IAAgBR,gBAApB,EAAsC;AACpC,WAAKL,MAAL,CAAYgB,IAAZ,CAAiBJ,IAAjB;AACD;;AACD,QAAI,CAACC,WAAL,EAAkB;AAChB,WAAKZ,IAAL,CAAUK,GAAV,CAAcM,IAAd,EAAoBG,GAApB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACED,EAAAA,GAAG,CAACF,IAAD,EAAO;AACN,WAAO,KAAKX,IAAL,CAAUa,GAAV,CAAcF,IAAd,CAAP;AACH;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,OAAO,CAACL,IAAD,EAAO;AACZ,UAAMG,GAAG,GAAG,KAAKd,IAAL,CAAUiB,GAAV,CAAcN,IAAd,CAAZ;;AACA,QAAIG,GAAG,IAAI,CAAX,EAAc;AACV,aAAOA,GAAP;AACH;;AACD,UAAM,IAAII,KAAJ,CAAU,MAAMP,IAAN,GAAa,sBAAvB,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEQ,EAAAA,EAAE,CAACC,IAAD,EAAO;AACP,QAAIA,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAG,KAAKrB,MAAL,CAAYS,MAApC,EAA4C;AAC1C,aAAO,KAAKT,MAAL,CAAYqB,IAAZ,CAAP;AACD;;AACD,UAAM,IAAIF,KAAJ,CAAU,2BAA2BE,IAArC,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKtB,MAAL,CAAYuB,KAAZ,EAAP;AACD;;AApFY;;AAsFfC,OAAO,CAAC1B,QAAR,GAAmBA,QAAnB","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nclass ArraySet {\n  constructor() {\n    this._array = [];\n    this._set = new Map();\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  static fromArray(aArray, aAllowDuplicates) {\n    const set = new ArraySet();\n    for (let i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  }\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  size() {\n    return this._set.size;\n  }\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  add(aStr, aAllowDuplicates) {\n    const isDuplicate = this.has(aStr);\n    const idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set.set(aStr, idx);\n    }\n  }\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  has(aStr) {\n      return this._set.has(aStr);\n  }\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  indexOf(aStr) {\n    const idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  }\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error(\"No element indexed by \" + aIdx);\n  }\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  toArray() {\n    return this._array.slice();\n  }\n}\nexports.ArraySet = ArraySet;\n"]},"metadata":{},"sourceType":"script"}