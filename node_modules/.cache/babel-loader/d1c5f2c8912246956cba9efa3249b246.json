{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst {\n  STAGE_ADVANCED\n} = require(\"../OptimizationStages\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nclass AggressiveMergingPlugin {\n  constructor(options) {\n    if (options !== undefined && typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\");\n    }\n\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const options = this.options;\n    const minSizeReduce = options.minSizeReduce || 1.5;\n    compiler.hooks.thisCompilation.tap(\"AggressiveMergingPlugin\", compilation => {\n      compilation.hooks.optimizeChunks.tap({\n        name: \"AggressiveMergingPlugin\",\n        stage: STAGE_ADVANCED\n      }, chunks => {\n        const chunkGraph = compilation.chunkGraph;\n        /** @type {{a: Chunk, b: Chunk, improvement: number}[]} */\n\n        let combinations = [];\n\n        for (const a of chunks) {\n          if (a.canBeInitial()) continue;\n\n          for (const b of chunks) {\n            if (b.canBeInitial()) continue;\n            if (b === a) break;\n\n            if (!chunkGraph.canChunksBeIntegrated(a, b)) {\n              continue;\n            }\n\n            const aSize = chunkGraph.getChunkSize(b, {\n              chunkOverhead: 0\n            });\n            const bSize = chunkGraph.getChunkSize(a, {\n              chunkOverhead: 0\n            });\n            const abSize = chunkGraph.getIntegratedChunksSize(b, a, {\n              chunkOverhead: 0\n            });\n            const improvement = (aSize + bSize) / abSize;\n            combinations.push({\n              a,\n              b,\n              improvement\n            });\n          }\n        }\n\n        combinations.sort((a, b) => {\n          return b.improvement - a.improvement;\n        });\n        const pair = combinations[0];\n        if (!pair) return;\n        if (pair.improvement < minSizeReduce) return;\n        chunkGraph.integrateChunks(pair.b, pair.a);\n        compilation.chunks.delete(pair.a);\n        return true;\n      });\n    });\n  }\n\n}\n\nmodule.exports = AggressiveMergingPlugin;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/optimize/AggressiveMergingPlugin.js"],"names":["STAGE_ADVANCED","require","AggressiveMergingPlugin","constructor","options","undefined","Array","isArray","Error","apply","compiler","minSizeReduce","hooks","thisCompilation","tap","compilation","optimizeChunks","name","stage","chunks","chunkGraph","combinations","a","canBeInitial","b","canChunksBeIntegrated","aSize","getChunkSize","chunkOverhead","bSize","abSize","getIntegratedChunksSize","improvement","push","sort","pair","integrateChunks","delete","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAqBC,OAAO,CAAC,uBAAD,CAAlC;AAEA;;AACA;;;AAEA,MAAMC,uBAAN,CAA8B;AAC7BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,QACEA,OAAO,KAAKC,SAAZ,IAAyB,OAAOD,OAAP,KAAmB,QAA7C,IACAE,KAAK,CAACC,OAAN,CAAcH,OAAd,CAFD,EAGE;AACD,YAAM,IAAII,KAAJ,CACL,wIADK,CAAN;AAGA;;AACD,SAAKJ,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;AACCK,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMN,OAAO,GAAG,KAAKA,OAArB;AACA,UAAMO,aAAa,GAAGP,OAAO,CAACO,aAAR,IAAyB,GAA/C;AAEAD,IAAAA,QAAQ,CAACE,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,yBADD,EAECC,WAAW,IAAI;AACdA,MAAAA,WAAW,CAACH,KAAZ,CAAkBI,cAAlB,CAAiCF,GAAjC,CACC;AACCG,QAAAA,IAAI,EAAE,yBADP;AAECC,QAAAA,KAAK,EAAElB;AAFR,OADD,EAKCmB,MAAM,IAAI;AACT,cAAMC,UAAU,GAAGL,WAAW,CAACK,UAA/B;AACA;;AACA,YAAIC,YAAY,GAAG,EAAnB;;AACA,aAAK,MAAMC,CAAX,IAAgBH,MAAhB,EAAwB;AACvB,cAAIG,CAAC,CAACC,YAAF,EAAJ,EAAsB;;AACtB,eAAK,MAAMC,CAAX,IAAgBL,MAAhB,EAAwB;AACvB,gBAAIK,CAAC,CAACD,YAAF,EAAJ,EAAsB;AACtB,gBAAIC,CAAC,KAAKF,CAAV,EAAa;;AACb,gBAAI,CAACF,UAAU,CAACK,qBAAX,CAAiCH,CAAjC,EAAoCE,CAApC,CAAL,EAA6C;AAC5C;AACA;;AACD,kBAAME,KAAK,GAAGN,UAAU,CAACO,YAAX,CAAwBH,CAAxB,EAA2B;AACxCI,cAAAA,aAAa,EAAE;AADyB,aAA3B,CAAd;AAGA,kBAAMC,KAAK,GAAGT,UAAU,CAACO,YAAX,CAAwBL,CAAxB,EAA2B;AACxCM,cAAAA,aAAa,EAAE;AADyB,aAA3B,CAAd;AAGA,kBAAME,MAAM,GAAGV,UAAU,CAACW,uBAAX,CAAmCP,CAAnC,EAAsCF,CAAtC,EAAyC;AACvDM,cAAAA,aAAa,EAAE;AADwC,aAAzC,CAAf;AAGA,kBAAMI,WAAW,GAAG,CAACN,KAAK,GAAGG,KAAT,IAAkBC,MAAtC;AACAT,YAAAA,YAAY,CAACY,IAAb,CAAkB;AACjBX,cAAAA,CADiB;AAEjBE,cAAAA,CAFiB;AAGjBQ,cAAAA;AAHiB,aAAlB;AAKA;AACD;;AAEDX,QAAAA,YAAY,CAACa,IAAb,CAAkB,CAACZ,CAAD,EAAIE,CAAJ,KAAU;AAC3B,iBAAOA,CAAC,CAACQ,WAAF,GAAgBV,CAAC,CAACU,WAAzB;AACA,SAFD;AAIA,cAAMG,IAAI,GAAGd,YAAY,CAAC,CAAD,CAAzB;AAEA,YAAI,CAACc,IAAL,EAAW;AACX,YAAIA,IAAI,CAACH,WAAL,GAAmBrB,aAAvB,EAAsC;AAEtCS,QAAAA,UAAU,CAACgB,eAAX,CAA2BD,IAAI,CAACX,CAAhC,EAAmCW,IAAI,CAACb,CAAxC;AACAP,QAAAA,WAAW,CAACI,MAAZ,CAAmBkB,MAAnB,CAA0BF,IAAI,CAACb,CAA/B;AACA,eAAO,IAAP;AACA,OA/CF;AAiDA,KApDF;AAsDA;;AA5E4B;;AA+E9BgB,MAAM,CAACC,OAAP,GAAiBrC,uBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { STAGE_ADVANCED } = require(\"../OptimizationStages\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AggressiveMergingPlugin {\n\tconstructor(options) {\n\t\tif (\n\t\t\t(options !== undefined && typeof options !== \"object\") ||\n\t\t\tArray.isArray(options)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\"\n\t\t\t);\n\t\t}\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst minSizeReduce = options.minSizeReduce || 1.5;\n\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"AggressiveMergingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeChunks.tap(\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"AggressiveMergingPlugin\",\n\t\t\t\t\t\tstage: STAGE_ADVANCED\n\t\t\t\t\t},\n\t\t\t\t\tchunks => {\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\t/** @type {{a: Chunk, b: Chunk, improvement: number}[]} */\n\t\t\t\t\t\tlet combinations = [];\n\t\t\t\t\t\tfor (const a of chunks) {\n\t\t\t\t\t\t\tif (a.canBeInitial()) continue;\n\t\t\t\t\t\t\tfor (const b of chunks) {\n\t\t\t\t\t\t\t\tif (b.canBeInitial()) continue;\n\t\t\t\t\t\t\t\tif (b === a) break;\n\t\t\t\t\t\t\t\tif (!chunkGraph.canChunksBeIntegrated(a, b)) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst aSize = chunkGraph.getChunkSize(b, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst bSize = chunkGraph.getChunkSize(a, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst abSize = chunkGraph.getIntegratedChunksSize(b, a, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst improvement = (aSize + bSize) / abSize;\n\t\t\t\t\t\t\t\tcombinations.push({\n\t\t\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\t\timprovement\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcombinations.sort((a, b) => {\n\t\t\t\t\t\t\treturn b.improvement - a.improvement;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst pair = combinations[0];\n\n\t\t\t\t\t\tif (!pair) return;\n\t\t\t\t\t\tif (pair.improvement < minSizeReduce) return;\n\n\t\t\t\t\t\tchunkGraph.integrateChunks(pair.b, pair.a);\n\t\t\t\t\t\tcompilation.chunks.delete(pair.a);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AggressiveMergingPlugin;\n"]},"metadata":{},"sourceType":"script"}