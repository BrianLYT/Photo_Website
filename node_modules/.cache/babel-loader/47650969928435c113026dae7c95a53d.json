{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport * as t from \"@webassemblyjs/ast\";\n\nfunction findLastSection(ast, forSection) {\n  var targetSectionId = constants.sections[forSection]; // $FlowIgnore: metadata can not be empty\n\n  var moduleSections = ast.body[0].metadata.sections;\n  var lastSection;\n  var lastId = 0;\n\n  for (var i = 0, len = moduleSections.length; i < len; i++) {\n    var section = moduleSections[i]; // Ignore custom section since they can actually occur everywhere\n\n    if (section.section === \"custom\") {\n      continue;\n    }\n\n    var sectionId = constants.sections[section.section];\n\n    if (targetSectionId > lastId && targetSectionId < sectionId) {\n      return lastSection;\n    }\n\n    lastId = sectionId;\n    lastSection = section;\n  }\n\n  return lastSection;\n}\n\nexport function createEmptySection(ast, uint8Buffer, section) {\n  // previous section after which we are going to insert our section\n  var lastSection = findLastSection(ast, section);\n  var start, end;\n  /**\n   * It's the first section\n   */\n\n  if (lastSection == null || lastSection.section === \"custom\") {\n    start = 8\n    /* wasm header size */\n    ;\n    end = start;\n  } else {\n    start = lastSection.startOffset + lastSection.size.value + 1;\n    end = start;\n  } // section id\n\n\n  start += 1;\n  var sizeStartLoc = {\n    line: -1,\n    column: start\n  };\n  var sizeEndLoc = {\n    line: -1,\n    column: start + 1\n  }; // 1 byte for the empty vector\n\n  var size = t.withLoc(t.numberLiteralFromRaw(1), sizeEndLoc, sizeStartLoc);\n  var vectorOfSizeStartLoc = {\n    line: -1,\n    column: sizeEndLoc.column\n  };\n  var vectorOfSizeEndLoc = {\n    line: -1,\n    column: sizeEndLoc.column + 1\n  };\n  var vectorOfSize = t.withLoc(t.numberLiteralFromRaw(0), vectorOfSizeEndLoc, vectorOfSizeStartLoc);\n  var sectionMetadata = t.sectionMetadata(section, start, size, vectorOfSize);\n  var sectionBytes = encodeNode(sectionMetadata);\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start - 1, end, sectionBytes); // Add section into the AST for later lookups\n\n  if (_typeof(ast.body[0].metadata) === \"object\") {\n    // $FlowIgnore: metadata can not be empty\n    ast.body[0].metadata.sections.push(sectionMetadata);\n    t.sortSectionMetadata(ast.body[0]);\n  }\n  /**\n   * Update AST\n   */\n  // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var deltaBytes = +sectionBytes.length;\n  var encounteredSection = false;\n  t.traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        t.shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return {\n    uint8Buffer: uint8Buffer,\n    sectionMetadata: sectionMetadata\n  };\n}","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","encodeNode","overrideBytesInBuffer","constants","t","findLastSection","ast","forSection","targetSectionId","sections","moduleSections","body","metadata","lastSection","lastId","i","len","length","section","sectionId","createEmptySection","uint8Buffer","start","end","startOffset","size","value","sizeStartLoc","line","column","sizeEndLoc","withLoc","numberLiteralFromRaw","vectorOfSizeStartLoc","vectorOfSizeEndLoc","vectorOfSize","sectionMetadata","sectionBytes","push","sortSectionMetadata","deltaBytes","encounteredSection","traverse","SectionMetadata","path","node","shiftSection"],"mappings":"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","sourcesContent":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { encodeNode } from \"@webassemblyjs/wasm-gen\";\nimport { overrideBytesInBuffer } from \"@webassemblyjs/helper-buffer\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport * as t from \"@webassemblyjs/ast\";\n\nfunction findLastSection(ast, forSection) {\n  var targetSectionId = constants.sections[forSection]; // $FlowIgnore: metadata can not be empty\n\n  var moduleSections = ast.body[0].metadata.sections;\n  var lastSection;\n  var lastId = 0;\n\n  for (var i = 0, len = moduleSections.length; i < len; i++) {\n    var section = moduleSections[i]; // Ignore custom section since they can actually occur everywhere\n\n    if (section.section === \"custom\") {\n      continue;\n    }\n\n    var sectionId = constants.sections[section.section];\n\n    if (targetSectionId > lastId && targetSectionId < sectionId) {\n      return lastSection;\n    }\n\n    lastId = sectionId;\n    lastSection = section;\n  }\n\n  return lastSection;\n}\n\nexport function createEmptySection(ast, uint8Buffer, section) {\n  // previous section after which we are going to insert our section\n  var lastSection = findLastSection(ast, section);\n  var start, end;\n  /**\n   * It's the first section\n   */\n\n  if (lastSection == null || lastSection.section === \"custom\") {\n    start = 8\n    /* wasm header size */\n    ;\n    end = start;\n  } else {\n    start = lastSection.startOffset + lastSection.size.value + 1;\n    end = start;\n  } // section id\n\n\n  start += 1;\n  var sizeStartLoc = {\n    line: -1,\n    column: start\n  };\n  var sizeEndLoc = {\n    line: -1,\n    column: start + 1\n  }; // 1 byte for the empty vector\n\n  var size = t.withLoc(t.numberLiteralFromRaw(1), sizeEndLoc, sizeStartLoc);\n  var vectorOfSizeStartLoc = {\n    line: -1,\n    column: sizeEndLoc.column\n  };\n  var vectorOfSizeEndLoc = {\n    line: -1,\n    column: sizeEndLoc.column + 1\n  };\n  var vectorOfSize = t.withLoc(t.numberLiteralFromRaw(0), vectorOfSizeEndLoc, vectorOfSizeStartLoc);\n  var sectionMetadata = t.sectionMetadata(section, start, size, vectorOfSize);\n  var sectionBytes = encodeNode(sectionMetadata);\n  uint8Buffer = overrideBytesInBuffer(uint8Buffer, start - 1, end, sectionBytes); // Add section into the AST for later lookups\n\n  if (_typeof(ast.body[0].metadata) === \"object\") {\n    // $FlowIgnore: metadata can not be empty\n    ast.body[0].metadata.sections.push(sectionMetadata);\n    t.sortSectionMetadata(ast.body[0]);\n  }\n  /**\n   * Update AST\n   */\n  // Once we hit our section every that is after needs to be shifted by the delta\n\n\n  var deltaBytes = +sectionBytes.length;\n  var encounteredSection = false;\n  t.traverse(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        t.shiftSection(ast, path.node, deltaBytes);\n      }\n    }\n  });\n  return {\n    uint8Buffer: uint8Buffer,\n    sectionMetadata: sectionMetadata\n  };\n}"]},"metadata":{},"sourceType":"module"}