{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class DirectoryExistsPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"DirectoryExistsPlugin\", (request, resolveContext, callback) => {\n      const fs = resolver.fileSystem;\n      const directory = request.path;\n      if (!directory) return callback();\n      fs.stat(directory, (err, stat) => {\n        if (err || !stat) {\n          if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n          if (resolveContext.log) resolveContext.log(directory + \" doesn't exist\");\n          return callback();\n        }\n\n        if (!stat.isDirectory()) {\n          if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n          if (resolveContext.log) resolveContext.log(directory + \" is not a directory\");\n          return callback();\n        }\n\n        if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(directory);\n        resolver.doResolve(target, request, `existing directory ${directory}`, resolveContext, callback);\n      });\n    });\n  }\n\n};","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js"],"names":["module","exports","DirectoryExistsPlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","directory","path","stat","err","missingDependencies","add","log","isDirectory","fileDependencies","doResolve"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,qBAAN,CAA4B;AAC5C;AACD;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AAED;AACD;AACA;AACA;;;AACCC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACf,UAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;AACAE,IAAAA,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAGE,uBAHF,EAIE,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;AACtC,YAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAApB;AACA,YAAMC,SAAS,GAAGL,OAAO,CAACM,IAA1B;AACA,UAAI,CAACD,SAAL,EAAgB,OAAOH,QAAQ,EAAf;AAChBC,MAAAA,EAAE,CAACI,IAAH,CAAQF,SAAR,EAAmB,CAACG,GAAD,EAAMD,IAAN,KAAe;AACjC,YAAIC,GAAG,IAAI,CAACD,IAAZ,EAAkB;AACjB,cAAIN,cAAc,CAACQ,mBAAnB,EACCR,cAAc,CAACQ,mBAAf,CAAmCC,GAAnC,CAAuCL,SAAvC;AACD,cAAIJ,cAAc,CAACU,GAAnB,EACCV,cAAc,CAACU,GAAf,CAAmBN,SAAS,GAAG,gBAA/B;AACD,iBAAOH,QAAQ,EAAf;AACA;;AACD,YAAI,CAACK,IAAI,CAACK,WAAL,EAAL,EAAyB;AACxB,cAAIX,cAAc,CAACQ,mBAAnB,EACCR,cAAc,CAACQ,mBAAf,CAAmCC,GAAnC,CAAuCL,SAAvC;AACD,cAAIJ,cAAc,CAACU,GAAnB,EACCV,cAAc,CAACU,GAAf,CAAmBN,SAAS,GAAG,qBAA/B;AACD,iBAAOH,QAAQ,EAAf;AACA;;AACD,YAAID,cAAc,CAACY,gBAAnB,EACCZ,cAAc,CAACY,gBAAf,CAAgCH,GAAhC,CAAoCL,SAApC;AACDT,QAAAA,QAAQ,CAACkB,SAAT,CACCpB,MADD,EAECM,OAFD,EAGE,sBAAqBK,SAAU,EAHjC,EAICJ,cAJD,EAKCC,QALD;AAOA,OAxBD;AAyBA,KAjCH;AAmCA;;AAnD2C,CAA7C","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class DirectoryExistsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"DirectoryExistsPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst fs = resolver.fileSystem;\n\t\t\t\t\tconst directory = request.path;\n\t\t\t\t\tif (!directory) return callback();\n\t\t\t\t\tfs.stat(directory, (err, stat) => {\n\t\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" doesn't exist\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!stat.isDirectory()) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" is not a directory\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(directory);\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t`existing directory ${directory}`,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}