{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\n\nconst makeSerializable = require(\"./util/makeSerializable\");\n\nconst WASM_HEADER = Buffer.from([0x00, 0x61, 0x73, 0x6d]);\n\nclass ModuleParseError extends WebpackError {\n  /**\n   * @param {string | Buffer} source source code\n   * @param {Error&any} err the parse error\n   * @param {string[]} loaders the loaders used\n   * @param {string} type module type\n   */\n  constructor(source, err, loaders, type) {\n    let message = \"Module parse failed: \" + (err && err.message);\n    let loc = undefined;\n\n    if ((Buffer.isBuffer(source) && source.slice(0, 4).equals(WASM_HEADER) || typeof source === \"string\" && /^\\0asm/.test(source)) && !type.startsWith(\"webassembly\")) {\n      message += \"\\nThe module seem to be a WebAssembly module, but module is not flagged as WebAssembly module for webpack.\";\n      message += \"\\nBREAKING CHANGE: Since webpack 5 WebAssembly is not enabled by default and flagged as experimental feature.\";\n      message += \"\\nYou need to enable one of the WebAssembly experiments via 'experiments.asyncWebAssembly: true' (based on async modules) or 'experiments.syncWebAssembly: true' (like webpack 4, deprecated).\";\n      message += \"\\nFor files that transpile to WebAssembly, make sure to set the module type in the 'module.rules' section of the config (e. g. 'type: \\\"webassembly/async\\\"').\";\n    } else if (!loaders) {\n      message += \"\\nYou may need an appropriate loader to handle this file type.\";\n    } else if (loaders.length >= 1) {\n      message += `\\nFile was processed with these loaders:${loaders.map(loader => `\\n * ${loader}`).join(\"\")}`;\n      message += \"\\nYou may need an additional loader to handle the result of these loaders.\";\n    } else {\n      message += \"\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\";\n    }\n\n    if (err && err.loc && typeof err.loc === \"object\" && typeof err.loc.line === \"number\") {\n      var lineNumber = err.loc.line;\n\n      if (Buffer.isBuffer(source) || /[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)) {\n        // binary file\n        message += \"\\n(Source code omitted for this binary file)\";\n      } else {\n        const sourceLines = source.split(/\\r?\\n/);\n        const start = Math.max(0, lineNumber - 3);\n        const linesBefore = sourceLines.slice(start, lineNumber - 1);\n        const theLine = sourceLines[lineNumber - 1];\n        const linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n        message += linesBefore.map(l => `\\n| ${l}`).join(\"\") + `\\n> ${theLine}` + linesAfter.map(l => `\\n| ${l}`).join(\"\");\n      }\n\n      loc = {\n        start: err.loc\n      };\n    } else if (err && err.stack) {\n      message += \"\\n\" + err.stack;\n    }\n\n    super(message);\n    this.name = \"ModuleParseError\";\n    this.loc = loc;\n    this.error = err;\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.error);\n    super.serialize(context);\n  }\n\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.error = read();\n    super.deserialize(context);\n  }\n\n}\n\nmakeSerializable(ModuleParseError, \"webpack/lib/ModuleParseError\");\nmodule.exports = ModuleParseError;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/ModuleParseError.js"],"names":["WebpackError","require","makeSerializable","WASM_HEADER","Buffer","from","ModuleParseError","constructor","source","err","loaders","type","message","loc","undefined","isBuffer","slice","equals","test","startsWith","length","map","loader","join","line","lineNumber","sourceLines","split","start","Math","max","linesBefore","theLine","linesAfter","l","stack","name","error","serialize","context","write","deserialize","read","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst WebpackError = require(\"./WebpackError\");\nconst makeSerializable = require(\"./util/makeSerializable\");\n\nconst WASM_HEADER = Buffer.from([0x00, 0x61, 0x73, 0x6d]);\n\nclass ModuleParseError extends WebpackError {\n\t/**\n\t * @param {string | Buffer} source source code\n\t * @param {Error&any} err the parse error\n\t * @param {string[]} loaders the loaders used\n\t * @param {string} type module type\n\t */\n\tconstructor(source, err, loaders, type) {\n\t\tlet message = \"Module parse failed: \" + (err && err.message);\n\t\tlet loc = undefined;\n\n\t\tif (\n\t\t\t((Buffer.isBuffer(source) && source.slice(0, 4).equals(WASM_HEADER)) ||\n\t\t\t\t(typeof source === \"string\" && /^\\0asm/.test(source))) &&\n\t\t\t!type.startsWith(\"webassembly\")\n\t\t) {\n\t\t\tmessage +=\n\t\t\t\t\"\\nThe module seem to be a WebAssembly module, but module is not flagged as WebAssembly module for webpack.\";\n\t\t\tmessage +=\n\t\t\t\t\"\\nBREAKING CHANGE: Since webpack 5 WebAssembly is not enabled by default and flagged as experimental feature.\";\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou need to enable one of the WebAssembly experiments via 'experiments.asyncWebAssembly: true' (based on async modules) or 'experiments.syncWebAssembly: true' (like webpack 4, deprecated).\";\n\t\t\tmessage +=\n\t\t\t\t\"\\nFor files that transpile to WebAssembly, make sure to set the module type in the 'module.rules' section of the config (e. g. 'type: \\\"webassembly/async\\\"').\";\n\t\t} else if (!loaders) {\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou may need an appropriate loader to handle this file type.\";\n\t\t} else if (loaders.length >= 1) {\n\t\t\tmessage += `\\nFile was processed with these loaders:${loaders\n\t\t\t\t.map(loader => `\\n * ${loader}`)\n\t\t\t\t.join(\"\")}`;\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou may need an additional loader to handle the result of these loaders.\";\n\t\t} else {\n\t\t\tmessage +=\n\t\t\t\t\"\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\";\n\t\t}\n\n\t\tif (\n\t\t\terr &&\n\t\t\terr.loc &&\n\t\t\ttypeof err.loc === \"object\" &&\n\t\t\ttypeof err.loc.line === \"number\"\n\t\t) {\n\t\t\tvar lineNumber = err.loc.line;\n\n\t\t\tif (\n\t\t\t\tBuffer.isBuffer(source) ||\n\t\t\t\t/[\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007]/.test(source)\n\t\t\t) {\n\t\t\t\t// binary file\n\t\t\t\tmessage += \"\\n(Source code omitted for this binary file)\";\n\t\t\t} else {\n\t\t\t\tconst sourceLines = source.split(/\\r?\\n/);\n\t\t\t\tconst start = Math.max(0, lineNumber - 3);\n\t\t\t\tconst linesBefore = sourceLines.slice(start, lineNumber - 1);\n\t\t\t\tconst theLine = sourceLines[lineNumber - 1];\n\t\t\t\tconst linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);\n\n\t\t\t\tmessage +=\n\t\t\t\t\tlinesBefore.map(l => `\\n| ${l}`).join(\"\") +\n\t\t\t\t\t`\\n> ${theLine}` +\n\t\t\t\t\tlinesAfter.map(l => `\\n| ${l}`).join(\"\");\n\t\t\t}\n\n\t\t\tloc = { start: err.loc };\n\t\t} else if (err && err.stack) {\n\t\t\tmessage += \"\\n\" + err.stack;\n\t\t}\n\n\t\tsuper(message);\n\n\t\tthis.name = \"ModuleParseError\";\n\t\tthis.loc = loc;\n\t\tthis.error = err;\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.error);\n\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\n\t\tthis.error = read();\n\n\t\tsuper.deserialize(context);\n\t}\n}\n\nmakeSerializable(ModuleParseError, \"webpack/lib/ModuleParseError\");\n\nmodule.exports = ModuleParseError;\n"]},"metadata":{},"sourceType":"script"}