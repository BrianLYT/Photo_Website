{"ast":null,"code":"import { decode } from \"@webassemblyjs/wasm-parser\";\nimport { traverse } from \"@webassemblyjs/ast\";\nimport { cloneNode } from \"@webassemblyjs/ast/lib/clone\";\nimport { shrinkPaddedLEB128 } from \"@webassemblyjs/wasm-opt\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { applyOperations } from \"./apply\";\n\nfunction hashNode(node) {\n  return JSON.stringify(node);\n}\n\nfunction preprocess(ab) {\n  var optBin = shrinkPaddedLEB128(new Uint8Array(ab));\n  return optBin.buffer;\n}\n\nfunction sortBySectionOrder(nodes) {\n  var originalOrder = new Map();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _node = _step.value;\n      originalOrder.set(_node, originalOrder.size);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  nodes.sort(function (a, b) {\n    var sectionA = getSectionForNode(a);\n    var sectionB = getSectionForNode(b);\n    var aId = constants.sections[sectionA];\n    var bId = constants.sections[sectionB];\n\n    if (typeof aId !== \"number\" || typeof bId !== \"number\") {\n      throw new Error(\"Section id not found\");\n    }\n\n    if (aId === bId) {\n      // $FlowIgnore originalOrder is filled for all nodes\n      return originalOrder.get(a) - originalOrder.get(b);\n    }\n\n    return aId - bId;\n  });\n}\n\nexport function edit(ab, visitors) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return editWithAST(ast, ab, visitors);\n}\nexport function editWithAST(ast, ab, visitors) {\n  var operations = [];\n  var uint8Buffer = new Uint8Array(ab);\n  var nodeBefore;\n\n  function before(type, path) {\n    nodeBefore = cloneNode(path.node);\n  }\n\n  function after(type, path) {\n    if (path.node._deleted === true) {\n      operations.push({\n        kind: \"delete\",\n        node: path.node\n      }); // $FlowIgnore\n    } else if (hashNode(nodeBefore) !== hashNode(path.node)) {\n      operations.push({\n        kind: \"update\",\n        oldNode: nodeBefore,\n        node: path.node\n      });\n    }\n  }\n\n  traverse(ast, visitors, before, after);\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}\nexport function add(ab, newNodes) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return addWithAST(ast, ab, newNodes);\n}\nexport function addWithAST(ast, ab, newNodes) {\n  // Sort nodes by insertion order\n  sortBySectionOrder(newNodes);\n  var uint8Buffer = new Uint8Array(ab); // Map node into operations\n\n  var operations = newNodes.map(function (n) {\n    return {\n      kind: \"add\",\n      node: n\n    };\n  });\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/@webassemblyjs/wasm-edit/esm/index.js"],"names":["decode","traverse","cloneNode","shrinkPaddedLEB128","getSectionForNode","constants","applyOperations","hashNode","node","JSON","stringify","preprocess","ab","optBin","Uint8Array","buffer","sortBySectionOrder","nodes","originalOrder","Map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_node","value","set","size","err","return","sort","a","b","sectionA","sectionB","aId","sections","bId","Error","get","edit","visitors","ast","editWithAST","operations","uint8Buffer","nodeBefore","before","type","path","after","_deleted","push","kind","oldNode","add","newNodes","addWithAST","map","n"],"mappings":"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","sourcesContent":["import { decode } from \"@webassemblyjs/wasm-parser\";\nimport { traverse } from \"@webassemblyjs/ast\";\nimport { cloneNode } from \"@webassemblyjs/ast/lib/clone\";\nimport { shrinkPaddedLEB128 } from \"@webassemblyjs/wasm-opt\";\nimport { getSectionForNode } from \"@webassemblyjs/helper-wasm-bytecode\";\nimport constants from \"@webassemblyjs/helper-wasm-bytecode\";\nimport { applyOperations } from \"./apply\";\n\nfunction hashNode(node) {\n  return JSON.stringify(node);\n}\n\nfunction preprocess(ab) {\n  var optBin = shrinkPaddedLEB128(new Uint8Array(ab));\n  return optBin.buffer;\n}\n\nfunction sortBySectionOrder(nodes) {\n  var originalOrder = new Map();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _node = _step.value;\n      originalOrder.set(_node, originalOrder.size);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  nodes.sort(function (a, b) {\n    var sectionA = getSectionForNode(a);\n    var sectionB = getSectionForNode(b);\n    var aId = constants.sections[sectionA];\n    var bId = constants.sections[sectionB];\n\n    if (typeof aId !== \"number\" || typeof bId !== \"number\") {\n      throw new Error(\"Section id not found\");\n    }\n\n    if (aId === bId) {\n      // $FlowIgnore originalOrder is filled for all nodes\n      return originalOrder.get(a) - originalOrder.get(b);\n    }\n\n    return aId - bId;\n  });\n}\n\nexport function edit(ab, visitors) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return editWithAST(ast, ab, visitors);\n}\nexport function editWithAST(ast, ab, visitors) {\n  var operations = [];\n  var uint8Buffer = new Uint8Array(ab);\n  var nodeBefore;\n\n  function before(type, path) {\n    nodeBefore = cloneNode(path.node);\n  }\n\n  function after(type, path) {\n    if (path.node._deleted === true) {\n      operations.push({\n        kind: \"delete\",\n        node: path.node\n      }); // $FlowIgnore\n    } else if (hashNode(nodeBefore) !== hashNode(path.node)) {\n      operations.push({\n        kind: \"update\",\n        oldNode: nodeBefore,\n        node: path.node\n      });\n    }\n  }\n\n  traverse(ast, visitors, before, after);\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}\nexport function add(ab, newNodes) {\n  ab = preprocess(ab);\n  var ast = decode(ab);\n  return addWithAST(ast, ab, newNodes);\n}\nexport function addWithAST(ast, ab, newNodes) {\n  // Sort nodes by insertion order\n  sortBySectionOrder(newNodes);\n  var uint8Buffer = new Uint8Array(ab); // Map node into operations\n\n  var operations = newNodes.map(function (n) {\n    return {\n      kind: \"add\",\n      node: n\n    };\n  });\n  uint8Buffer = applyOperations(ast, uint8Buffer, operations);\n  return uint8Buffer.buffer;\n}"]},"metadata":{},"sourceType":"module"}