{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\n\nconst LAZY_TARGET = Symbol(\"lazy serialization target\");\nconst LAZY_SERIALIZED_VALUE = Symbol(\"lazy serialization data\");\n/**\n * @template DeserializedType\n * @template SerializedType\n */\n\nclass SerializerMiddleware {\n  /* istanbul ignore next */\n\n  /**\n   * @abstract\n   * @param {DeserializedType} data data\n   * @param {Object} context context object\n   * @returns {SerializedType|Promise<SerializedType>} serialized data\n   */\n  serialize(data, context) {\n    const AbstractMethodError = require(\"../AbstractMethodError\");\n\n    throw new AbstractMethodError();\n  }\n  /* istanbul ignore next */\n\n  /**\n   * @abstract\n   * @param {SerializedType} data data\n   * @param {Object} context context object\n   * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\n   */\n\n\n  deserialize(data, context) {\n    const AbstractMethodError = require(\"../AbstractMethodError\");\n\n    throw new AbstractMethodError();\n  }\n  /**\n   * @param {any | function(): Promise<any> | any} value contained value or function to value\n   * @param {SerializerMiddleware<any, any>} target target middleware\n   * @param {object=} options lazy options\n   * @param {any=} serializedValue serialized value\n   * @returns {function(): Promise<any> | any} lazy function\n   */\n\n\n  static createLazy(value, target) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let serializedValue = arguments.length > 3 ? arguments[3] : undefined;\n    if (SerializerMiddleware.isLazy(value, target)) return value;\n    const fn = typeof value === \"function\" ? value : () => value;\n    fn[LAZY_TARGET] = target;\n    /** @type {any} */\n\n    fn.options = options;\n    fn[LAZY_SERIALIZED_VALUE] = serializedValue;\n    return fn;\n  }\n  /**\n   * @param {function(): Promise<any> | any} fn lazy function\n   * @param {SerializerMiddleware<any, any>=} target target middleware\n   * @returns {boolean} true, when fn is a lazy function (optionally of that target)\n   */\n\n\n  static isLazy(fn, target) {\n    if (typeof fn !== \"function\") return false;\n    const t = fn[LAZY_TARGET];\n    return target ? t === target : !!t;\n  }\n  /**\n   * @param {function(): Promise<any> | any} fn lazy function\n   * @returns {object} options\n   */\n\n\n  static getLazyOptions(fn) {\n    if (typeof fn !== \"function\") return undefined;\n    return (\n      /** @type {any} */\n      fn.options\n    );\n  }\n  /**\n   * @param {function(): Promise<any> | any} fn lazy function\n   * @returns {any} serialized value\n   */\n\n\n  static getLazySerializedValue(fn) {\n    if (typeof fn !== \"function\") return undefined;\n    return fn[LAZY_SERIALIZED_VALUE];\n  }\n  /**\n   * @param {function(): Promise<any> | any} fn lazy function\n   * @param {any} value serialized value\n   * @returns {void}\n   */\n\n\n  static setLazySerializedValue(fn, value) {\n    fn[LAZY_SERIALIZED_VALUE] = value;\n  }\n  /**\n   * @param {function(): Promise<any> | any} lazy lazy function\n   * @param {function(any): Promise<any> | any} serialize serialize function\n   * @returns {function(): Promise<any> | any} new lazy\n   */\n\n\n  static serializeLazy(lazy, serialize) {\n    const fn = memoize(() => {\n      const r = lazy();\n\n      if (r && typeof r.then === \"function\") {\n        return r.then(data => data && serialize(data));\n      }\n\n      return serialize(r);\n    });\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    /** @type {any} */\n\n    fn.options =\n    /** @type {any} */\n    lazy.options;\n    lazy[LAZY_SERIALIZED_VALUE] = fn;\n    return fn;\n  }\n  /**\n   * @param {function(): Promise<any> | any} lazy lazy function\n   * @param {function(any): Promise<any> | any} deserialize deserialize function\n   * @returns {function(): Promise<any> | any} new lazy\n   */\n\n\n  static deserializeLazy(lazy, deserialize) {\n    const fn = memoize(() => {\n      const r = lazy();\n\n      if (r && typeof r.then === \"function\") {\n        return r.then(data => deserialize(data));\n      }\n\n      return deserialize(r);\n    });\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    /** @type {any} */\n\n    fn.options =\n    /** @type {any} */\n    lazy.options;\n    fn[LAZY_SERIALIZED_VALUE] = lazy;\n    return fn;\n  }\n  /**\n   * @param {function(): Promise<any> | any} lazy lazy function\n   * @returns {function(): Promise<any> | any} new lazy\n   */\n\n\n  static unMemoizeLazy(lazy) {\n    if (!SerializerMiddleware.isLazy(lazy)) return lazy;\n\n    const fn = () => {\n      throw new Error(\"A lazy value that has been unmemorized can't be called again\");\n    };\n\n    fn[LAZY_SERIALIZED_VALUE] = SerializerMiddleware.unMemoizeLazy(lazy[LAZY_SERIALIZED_VALUE]);\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    fn.options =\n    /** @type {any} */\n    lazy.options;\n    return fn;\n  }\n\n}\n\nmodule.exports = SerializerMiddleware;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/serialization/SerializerMiddleware.js"],"names":["memoize","require","LAZY_TARGET","Symbol","LAZY_SERIALIZED_VALUE","SerializerMiddleware","serialize","data","context","AbstractMethodError","deserialize","createLazy","value","target","options","serializedValue","isLazy","fn","t","getLazyOptions","undefined","getLazySerializedValue","setLazySerializedValue","serializeLazy","lazy","r","then","deserializeLazy","unMemoizeLazy","Error","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\n\nconst LAZY_TARGET = Symbol(\"lazy serialization target\");\nconst LAZY_SERIALIZED_VALUE = Symbol(\"lazy serialization data\");\n\n/**\n * @template DeserializedType\n * @template SerializedType\n */\nclass SerializerMiddleware {\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {DeserializedType} data data\n\t * @param {Object} context context object\n\t * @returns {SerializedType|Promise<SerializedType>} serialized data\n\t */\n\tserialize(data, context) {\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @param {SerializedType} data data\n\t * @param {Object} context context object\n\t * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\n\t */\n\tdeserialize(data, context) {\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @param {any | function(): Promise<any> | any} value contained value or function to value\n\t * @param {SerializerMiddleware<any, any>} target target middleware\n\t * @param {object=} options lazy options\n\t * @param {any=} serializedValue serialized value\n\t * @returns {function(): Promise<any> | any} lazy function\n\t */\n\tstatic createLazy(value, target, options = {}, serializedValue) {\n\t\tif (SerializerMiddleware.isLazy(value, target)) return value;\n\t\tconst fn = typeof value === \"function\" ? value : () => value;\n\t\tfn[LAZY_TARGET] = target;\n\t\t/** @type {any} */ (fn).options = options;\n\t\tfn[LAZY_SERIALIZED_VALUE] = serializedValue;\n\t\treturn fn;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} fn lazy function\n\t * @param {SerializerMiddleware<any, any>=} target target middleware\n\t * @returns {boolean} true, when fn is a lazy function (optionally of that target)\n\t */\n\tstatic isLazy(fn, target) {\n\t\tif (typeof fn !== \"function\") return false;\n\t\tconst t = fn[LAZY_TARGET];\n\t\treturn target ? t === target : !!t;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} fn lazy function\n\t * @returns {object} options\n\t */\n\tstatic getLazyOptions(fn) {\n\t\tif (typeof fn !== \"function\") return undefined;\n\t\treturn /** @type {any} */ (fn).options;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} fn lazy function\n\t * @returns {any} serialized value\n\t */\n\tstatic getLazySerializedValue(fn) {\n\t\tif (typeof fn !== \"function\") return undefined;\n\t\treturn fn[LAZY_SERIALIZED_VALUE];\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} fn lazy function\n\t * @param {any} value serialized value\n\t * @returns {void}\n\t */\n\tstatic setLazySerializedValue(fn, value) {\n\t\tfn[LAZY_SERIALIZED_VALUE] = value;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} lazy lazy function\n\t * @param {function(any): Promise<any> | any} serialize serialize function\n\t * @returns {function(): Promise<any> | any} new lazy\n\t */\n\tstatic serializeLazy(lazy, serialize) {\n\t\tconst fn = memoize(() => {\n\t\t\tconst r = lazy();\n\t\t\tif (r && typeof r.then === \"function\") {\n\t\t\t\treturn r.then(data => data && serialize(data));\n\t\t\t}\n\t\t\treturn serialize(r);\n\t\t});\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\n\t\t/** @type {any} */ (fn).options = /** @type {any} */ (lazy).options;\n\t\tlazy[LAZY_SERIALIZED_VALUE] = fn;\n\t\treturn fn;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} lazy lazy function\n\t * @param {function(any): Promise<any> | any} deserialize deserialize function\n\t * @returns {function(): Promise<any> | any} new lazy\n\t */\n\tstatic deserializeLazy(lazy, deserialize) {\n\t\tconst fn = memoize(() => {\n\t\t\tconst r = lazy();\n\t\t\tif (r && typeof r.then === \"function\") {\n\t\t\t\treturn r.then(data => deserialize(data));\n\t\t\t}\n\t\t\treturn deserialize(r);\n\t\t});\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\n\t\t/** @type {any} */ (fn).options = /** @type {any} */ (lazy).options;\n\t\tfn[LAZY_SERIALIZED_VALUE] = lazy;\n\t\treturn fn;\n\t}\n\n\t/**\n\t * @param {function(): Promise<any> | any} lazy lazy function\n\t * @returns {function(): Promise<any> | any} new lazy\n\t */\n\tstatic unMemoizeLazy(lazy) {\n\t\tif (!SerializerMiddleware.isLazy(lazy)) return lazy;\n\t\tconst fn = () => {\n\t\t\tthrow new Error(\n\t\t\t\t\"A lazy value that has been unmemorized can't be called again\"\n\t\t\t);\n\t\t};\n\t\tfn[LAZY_SERIALIZED_VALUE] = SerializerMiddleware.unMemoizeLazy(\n\t\t\tlazy[LAZY_SERIALIZED_VALUE]\n\t\t);\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\n\t\tfn.options = /** @type {any} */ (lazy).options;\n\t\treturn fn;\n\t}\n}\n\nmodule.exports = SerializerMiddleware;\n"]},"metadata":{},"sourceType":"script"}