{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\n\nconst NullDependency = require(\"./NullDependency\");\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n\n/** @typedef {import(\"../Dependency\")} Dependency */\n\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\n\nclass RequireResolveHeaderDependency extends NullDependency {\n  constructor(range) {\n    super();\n    if (!Array.isArray(range)) throw new Error(\"range must be valid\");\n    this.range = range;\n  }\n\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.range);\n    super.serialize(context);\n  }\n\n  static deserialize(context) {\n    const obj = new RequireResolveHeaderDependency(context.read());\n    obj.deserialize(context);\n    return obj;\n  }\n\n}\n\nmakeSerializable(RequireResolveHeaderDependency, \"webpack/lib/dependencies/RequireResolveHeaderDependency\");\nRequireResolveHeaderDependency.Template = class RequireResolveHeaderDependencyTemplate extends NullDependency.Template {\n  /**\n   * @param {Dependency} dependency the dependency for which the template should be applied\n   * @param {ReplaceSource} source the current replace source which can be modified\n   * @param {DependencyTemplateContext} templateContext the context object\n   * @returns {void}\n   */\n  apply(dependency, source, templateContext) {\n    const dep =\n    /** @type {RequireResolveHeaderDependency} */\n    dependency;\n    source.replace(dep.range[0], dep.range[1] - 1, \"/*require.resolve*/\");\n  }\n\n  applyAsTemplateArgument(name, dep, source) {\n    source.replace(dep.range[0], dep.range[1] - 1, \"/*require.resolve*/\");\n  }\n\n};\nmodule.exports = RequireResolveHeaderDependency;","map":{"version":3,"sources":["G:/0_coding/Side Project/photo-website/node_modules/webpack/lib/dependencies/RequireResolveHeaderDependency.js"],"names":["makeSerializable","require","NullDependency","RequireResolveHeaderDependency","constructor","range","Array","isArray","Error","serialize","context","write","deserialize","obj","read","Template","RequireResolveHeaderDependencyTemplate","apply","dependency","source","templateContext","dep","replace","applyAsTemplateArgument","name","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,0BAAD,CAAhC;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA9B;AAEA;;AACA;;AACA;;;AAEA,MAAME,8BAAN,SAA6CD,cAA7C,CAA4D;AAC3DE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB;AAEA,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B,MAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;AAE3B,SAAKH,KAAL,GAAaA,KAAb;AACA;;AAEDI,EAAAA,SAAS,CAACC,OAAD,EAAU;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,OAAlB;AAEAC,IAAAA,KAAK,CAAC,KAAKN,KAAN,CAAL;AAEA,UAAMI,SAAN,CAAgBC,OAAhB;AACA;;AAEiB,SAAXE,WAAW,CAACF,OAAD,EAAU;AAC3B,UAAMG,GAAG,GAAG,IAAIV,8BAAJ,CAAmCO,OAAO,CAACI,IAAR,EAAnC,CAAZ;AACAD,IAAAA,GAAG,CAACD,WAAJ,CAAgBF,OAAhB;AACA,WAAOG,GAAP;AACA;;AArB0D;;AAwB5Db,gBAAgB,CACfG,8BADe,EAEf,yDAFe,CAAhB;AAKAA,8BAA8B,CAACY,QAA/B,GAA0C,MAAMC,sCAAN,SACzCd,cAAc,CAACa,QAD0B,CAExC;AACD;AACD;AACA;AACA;AACA;AACA;AACCE,EAAAA,KAAK,CAACC,UAAD,EAAaC,MAAb,EAAqBC,eAArB,EAAsC;AAC1C,UAAMC,GAAG;AAAG;AAA+CH,IAAAA,UAA3D;AACAC,IAAAA,MAAM,CAACG,OAAP,CAAeD,GAAG,CAAChB,KAAJ,CAAU,CAAV,CAAf,EAA6BgB,GAAG,CAAChB,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+C,qBAA/C;AACA;;AAEDkB,EAAAA,uBAAuB,CAACC,IAAD,EAAOH,GAAP,EAAYF,MAAZ,EAAoB;AAC1CA,IAAAA,MAAM,CAACG,OAAP,CAAeD,GAAG,CAAChB,KAAJ,CAAU,CAAV,CAAf,EAA6BgB,GAAG,CAAChB,KAAJ,CAAU,CAAV,IAAe,CAA5C,EAA+C,qBAA/C;AACA;;AAdA,CAFF;AAmBAoB,MAAM,CAACC,OAAP,GAAiBvB,8BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass RequireResolveHeaderDependency extends NullDependency {\n\tconstructor(range) {\n\t\tsuper();\n\n\t\tif (!Array.isArray(range)) throw new Error(\"range must be valid\");\n\n\t\tthis.range = range;\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\n\t\twrite(this.range);\n\n\t\tsuper.serialize(context);\n\t}\n\n\tstatic deserialize(context) {\n\t\tconst obj = new RequireResolveHeaderDependency(context.read());\n\t\tobj.deserialize(context);\n\t\treturn obj;\n\t}\n}\n\nmakeSerializable(\n\tRequireResolveHeaderDependency,\n\t\"webpack/lib/dependencies/RequireResolveHeaderDependency\"\n);\n\nRequireResolveHeaderDependency.Template = class RequireResolveHeaderDependencyTemplate extends (\n\tNullDependency.Template\n) {\n\t/**\n\t * @param {Dependency} dependency the dependency for which the template should be applied\n\t * @param {ReplaceSource} source the current replace source which can be modified\n\t * @param {DependencyTemplateContext} templateContext the context object\n\t * @returns {void}\n\t */\n\tapply(dependency, source, templateContext) {\n\t\tconst dep = /** @type {RequireResolveHeaderDependency} */ (dependency);\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, \"/*require.resolve*/\");\n\t}\n\n\tapplyAsTemplateArgument(name, dep, source) {\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, \"/*require.resolve*/\");\n\t}\n};\n\nmodule.exports = RequireResolveHeaderDependency;\n"]},"metadata":{},"sourceType":"script"}